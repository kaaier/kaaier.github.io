<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kaiaier&#39;s    Blog</title>
  <icon>https://www.gravatar.com/avatar/2917627e1dc7f4b7645f9313f29aa11f</icon>
  <subtitle>Stay Hungry, Stay Foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kaaier.github.io/"/>
  <updated>2019-08-06T15:55:48.886Z</updated>
  <id>https://kaaier.github.io/</id>
  
  <author>
    <name>张旭</name>
    <email>15993096663@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Object-Detection</title>
    <link href="https://kaaier.github.io/2019/08/25/Object-Detection/"/>
    <id>https://kaaier.github.io/2019/08/25/Object-Detection/</id>
    <published>2019-08-25T01:52:48.000Z</published>
    <updated>2019-08-06T15:55:48.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object-Detection"><a href="#Object-Detection" class="headerlink" title="Object-Detection"></a>Object-Detection</h1><p>[TOC]</p><h5 id="记录关于object-detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转CVPR-Latest-paper-learning"><a href="#记录关于object-detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转CVPR-Latest-paper-learning" class="headerlink" title="记录关于object detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转CVPR(Latest paper learning)."></a>记录关于object detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转<a href="https://github.com/facebookresearch/Detectron" target="_blank" rel="noopener">CVPR(Latest paper learning)</a>.</h5><ul><li><p>R-CNN</p></li><li><p>Fast R-CNN</p></li><li><p>Faster R-CNN</p></li><li><p>Mask R-CNN</p><a id="more"></a></li><li><p>Light-Head R-CNN</p></li><li><p>Cascade R-CNN</p></li><li><p>SPP-Net</p></li><li><p>YOLO</p></li><li><p>YOLOv2</p></li><li><p>YOLOv3</p></li><li><p>YOLT</p></li><li><p>SSD</p></li><li><p>DSSD</p></li><li><p>FSSD</p></li><li><p>ESSD</p></li><li><p>MDSSD</p></li><li><p>Pelee</p></li><li><p>Fire SSD</p></li><li><p>R-FCN</p></li><li><p>FPN</p></li><li><p>DSOD</p></li><li><p>RetinaNet</p></li><li><p>MegDet</p></li><li><p>RefineNet</p></li><li><p>DetNet</p></li><li><p>SSOD</p></li><li><p>CornerNet</p></li><li><p>M2Det</p></li><li><p>3D Object Detection</p></li><li><p>ZSD（Zero-Shot Object Detection）</p></li><li><p>OSD（One-Shot object Detection）</p></li><li><p>Weakly Supervised Object Detection</p></li><li><p>Softer-NMS</p></li><li><p>2018</p></li><li><p>2019</p></li><li><p>Other</p></li></ul><h1 id="Survey"><a href="#Survey" class="headerlink" title="Survey"></a>Survey</h1><p><strong>A Survey of Deep Learning-based Object Detection</strong></p><ul><li><p>intro：From Fast R-CNN to NAS-FPN</p></li><li><p>arXiv：<a href="https://arxiv.org/abs/1907.09408" target="_blank" rel="noopener">https://arxiv.org/abs/1907.09408</a></p></li></ul><p><strong>Object Detection in 20 Years: A Survey</strong></p><ul><li>intro：This work has been submitted to the IEEE TPAMI for possible publication</li><li>arXiv：<a href="https://arxiv.org/abs/1905.05055" target="_blank" rel="noopener">https://arxiv.org/abs/1905.05055</a></li></ul><p><strong>《Recent Advances in Object Detection in the Age of Deep Convolutional Neural Networks》</strong></p><ul><li>intro: awesome</li></ul><ul><li>arXiv: <a href="https://arxiv.org/abs/1809.03193" target="_blank" rel="noopener">https://arxiv.org/abs/1809.03193</a></li></ul><p><strong>《Deep Learning for Generic Object Detection: A Survey》</strong></p><ul><li>intro: Submitted to IJCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1809.02165" target="_blank" rel="noopener">https://arxiv.org/abs/1809.02165</a></li></ul><h1 id="Papers-amp-Codes"><a href="#Papers-amp-Codes" class="headerlink" title="Papers&amp;Codes"></a>Papers&amp;Codes</h1><h2 id="R-CNN"><a href="#R-CNN" class="headerlink" title="R-CNN"></a>R-CNN</h2><p><strong>Rich feature hierarchies for accurate object detection and semantic segmentation</strong></p><ul><li>intro: R-CNN</li><li>arxiv: <a href="http://arxiv.org/abs/1311.2524" target="_blank" rel="noopener">http://arxiv.org/abs/1311.2524</a></li><li>supp: <a href="http://people.eecs.berkeley.edu/~rbg/papers/r-cnn-cvpr-supp.pdf" target="_blank" rel="noopener">http://people.eecs.berkeley.edu/~rbg/papers/r-cnn-cvpr-supp.pdf</a></li><li>slides: <a href="http://www.image-net.org/challenges/LSVRC/2013/slides/r-cnn-ilsvrc2013-workshop.pdf" target="_blank" rel="noopener">http://www.image-net.org/challenges/LSVRC/2013/slides/r-cnn-ilsvrc2013-workshop.pdf</a></li><li>slides: <a href="http://www.cs.berkeley.edu/~rbg/slides/rcnn-cvpr14-slides.pdf" target="_blank" rel="noopener">http://www.cs.berkeley.edu/~rbg/slides/rcnn-cvpr14-slides.pdf</a></li><li>github: <a href="https://github.com/rbgirshick/rcnn" target="_blank" rel="noopener">https://github.com/rbgirshick/rcnn</a></li><li>notes: <a href="http://zhangliliang.com/2014/07/23/paper-note-rcnn/" target="_blank" rel="noopener">http://zhangliliang.com/2014/07/23/paper-note-rcnn/</a></li><li>caffe-pr(“Make R-CNN the Caffe detection example”): <a href="https://github.com/BVLC/caffe/pull/482" target="_blank" rel="noopener">https://github.com/BVLC/caffe/pull/482</a></li></ul><h2 id="Fast-R-CNN"><a href="#Fast-R-CNN" class="headerlink" title="Fast R-CNN"></a>Fast R-CNN</h2><p><strong>Fast R-CNN</strong></p><ul><li>arxiv: <a href="http://arxiv.org/abs/1504.08083" target="_blank" rel="noopener">http://arxiv.org/abs/1504.08083</a></li><li>slides: <a href="http://tutorial.caffe.berkeleyvision.org/caffe-cvpr15-detection.pdf" target="_blank" rel="noopener">http://tutorial.caffe.berkeleyvision.org/caffe-cvpr15-detection.pdf</a></li><li>github: <a href="https://github.com/rbgirshick/fast-rcnn" target="_blank" rel="noopener">https://github.com/rbgirshick/fast-rcnn</a></li><li>github(COCO-branch): <a href="https://github.com/rbgirshick/fast-rcnn/tree/coco" target="_blank" rel="noopener">https://github.com/rbgirshick/fast-rcnn/tree/coco</a></li><li>webcam demo: <a href="https://github.com/rbgirshick/fast-rcnn/pull/29" target="_blank" rel="noopener">https://github.com/rbgirshick/fast-rcnn/pull/29</a></li><li>notes: <a href="http://zhangliliang.com/2015/05/17/paper-note-fast-rcnn/" target="_blank" rel="noopener">http://zhangliliang.com/2015/05/17/paper-note-fast-rcnn/</a></li><li>notes: <a href="http://blog.csdn.net/linj_m/article/details/48930179" target="_blank" rel="noopener">http://blog.csdn.net/linj_m/article/details/48930179</a></li><li>github(“Fast R-CNN in MXNet”): <a href="https://github.com/precedenceguo/mx-rcnn" target="_blank" rel="noopener">https://github.com/precedenceguo/mx-rcnn</a></li><li>github: <a href="https://github.com/mahyarnajibi/fast-rcnn-torch" target="_blank" rel="noopener">https://github.com/mahyarnajibi/fast-rcnn-torch</a></li><li>github: <a href="https://github.com/apple2373/chainer-simple-fast-rnn" target="_blank" rel="noopener">https://github.com/apple2373/chainer-simple-fast-rnn</a></li><li>github: <a href="https://github.com/zplizzi/tensorflow-fast-rcnn" target="_blank" rel="noopener">https://github.com/zplizzi/tensorflow-fast-rcnn</a></li></ul><p><strong>A-Fast-RCNN: Hard Positive Generation via Adversary for Object Detection</strong></p><ul><li>intro: CVPR 2017</li><li>arxiv: <a href="https://arxiv.org/abs/1704.03414" target="_blank" rel="noopener">https://arxiv.org/abs/1704.03414</a></li><li>paper: <a href="http://abhinavsh.info/papers/pdfs/adversarial_object_detection.pdf" target="_blank" rel="noopener">http://abhinavsh.info/papers/pdfs/adversarial_object_detection.pdf</a></li><li>github(Caffe): <a href="https://github.com/xiaolonw/adversarial-frcnn" target="_blank" rel="noopener">https://github.com/xiaolonw/adversarial-frcnn</a></li></ul><h2 id="Faster-R-CNN"><a href="#Faster-R-CNN" class="headerlink" title="Faster R-CNN"></a>Faster R-CNN</h2><p><strong>Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks</strong></p><ul><li>intro: NIPS 2015</li><li>arxiv: <a href="http://arxiv.org/abs/1506.01497" target="_blank" rel="noopener">http://arxiv.org/abs/1506.01497</a></li><li>gitxiv: <a href="http://www.gitxiv.com/posts/8pfpcvefDYn2gSgXk/faster-r-cnn-towards-real-time-object-detection-with-region" target="_blank" rel="noopener">http://www.gitxiv.com/posts/8pfpcvefDYn2gSgXk/faster-r-cnn-towards-real-time-object-detection-with-region</a></li><li>slides: <a href="http://web.cs.hacettepe.edu.tr/~aykut/classes/spring2016/bil722/slides/w05-FasterR-CNN.pdf" target="_blank" rel="noopener">http://web.cs.hacettepe.edu.tr/~aykut/classes/spring2016/bil722/slides/w05-FasterR-CNN.pdf</a></li><li>github(official, Matlab): <a href="https://github.com/ShaoqingRen/faster_rcnn" target="_blank" rel="noopener">https://github.com/ShaoqingRen/faster_rcnn</a></li><li>github(Caffe): <a href="https://github.com/rbgirshick/py-faster-rcnn" target="_blank" rel="noopener">https://github.com/rbgirshick/py-faster-rcnn</a></li><li>github(MXNet): <a href="https://github.com/msracver/Deformable-ConvNets/tree/master/faster_rcnn" target="_blank" rel="noopener">https://github.com/msracver/Deformable-ConvNets/tree/master/faster_rcnn</a></li><li>github(PyTorch–recommend): <a href="https://github.com//jwyang/faster-rcnn.pytorch" target="_blank" rel="noopener">https://github.com//jwyang/faster-rcnn.pytorch</a></li><li>github: <a href="https://github.com/mitmul/chainer-faster-rcnn" target="_blank" rel="noopener">https://github.com/mitmul/chainer-faster-rcnn</a></li><li>github(Torch):: <a href="https://github.com/andreaskoepf/faster-rcnn.torch" target="_blank" rel="noopener">https://github.com/andreaskoepf/faster-rcnn.torch</a></li><li>github(Torch):: <a href="https://github.com/ruotianluo/Faster-RCNN-Densecap-torch" target="_blank" rel="noopener">https://github.com/ruotianluo/Faster-RCNN-Densecap-torch</a></li><li>github(TensorFlow): <a href="https://github.com/smallcorgi/Faster-RCNN_TF" target="_blank" rel="noopener">https://github.com/smallcorgi/Faster-RCNN_TF</a></li><li>github(TensorFlow): <a href="https://github.com/CharlesShang/TFFRCNN" target="_blank" rel="noopener">https://github.com/CharlesShang/TFFRCNN</a></li><li>github(C++ demo): <a href="https://github.com/YihangLou/FasterRCNN-Encapsulation-Cplusplus" target="_blank" rel="noopener">https://github.com/YihangLou/FasterRCNN-Encapsulation-Cplusplus</a></li><li>github(Keras): <a href="https://github.com/yhenon/keras-frcnn" target="_blank" rel="noopener">https://github.com/yhenon/keras-frcnn</a></li><li>github: <a href="https://github.com/Eniac-Xie/faster-rcnn-resnet" target="_blank" rel="noopener">https://github.com/Eniac-Xie/faster-rcnn-resnet</a></li><li>github(C++): <a href="https://github.com/D-X-Y/caffe-faster-rcnn/tree/dev" target="_blank" rel="noopener">https://github.com/D-X-Y/caffe-faster-rcnn/tree/dev</a></li></ul><p><strong>R-CNN minus R</strong></p><ul><li>intro: BMVC 2015</li><li>arxiv: <a href="http://arxiv.org/abs/1506.06981" target="_blank" rel="noopener">http://arxiv.org/abs/1506.06981</a></li></ul><p><strong>Faster R-CNN in MXNet with distributed implementation and data parallelization</strong></p><ul><li>github: <a href="https://github.com/dmlc/mxnet/tree/master/example/rcnn" target="_blank" rel="noopener">https://github.com/dmlc/mxnet/tree/master/example/rcnn</a></li></ul><p><strong>Contextual Priming and Feedback for Faster R-CNN</strong></p><ul><li>intro: ECCV 2016. Carnegie Mellon University</li><li>paper: <a href="http://abhinavsh.info/context_priming_feedback.pdf" target="_blank" rel="noopener">http://abhinavsh.info/context_priming_feedback.pdf</a></li><li>poster: <a href="http://www.eccv2016.org/files/posters/P-1A-20.pdf" target="_blank" rel="noopener">http://www.eccv2016.org/files/posters/P-1A-20.pdf</a></li></ul><p><strong>An Implementation of Faster RCNN with Study for Region Sampling</strong></p><ul><li>intro: Technical Report, 3 pages. CMU</li><li>arxiv: <a href="https://arxiv.org/abs/1702.02138" target="_blank" rel="noopener">https://arxiv.org/abs/1702.02138</a></li><li>github: <a href="https://github.com/endernewton/tf-faster-rcnn" target="_blank" rel="noopener">https://github.com/endernewton/tf-faster-rcnn</a></li><li>github: <a href="https://github.com/ruotianluo/pytorch-faster-rcnn" target="_blank" rel="noopener">https://github.com/ruotianluo/pytorch-faster-rcnn</a></li></ul><p><strong>Interpretable R-CNN</strong></p><ul><li>intro: North Carolina State University &amp; Alibaba</li><li>keywords: AND-OR Graph (AOG)</li><li>arxiv: <a href="https://arxiv.org/abs/1711.05226" target="_blank" rel="noopener">https://arxiv.org/abs/1711.05226</a></li></ul><p><strong>Domain Adaptive Faster R-CNN for Object Detection in the Wild</strong></p><ul><li>intro: CVPR 2018. ETH Zurich &amp; ESAT/PSI</li><li>arxiv: <a href="https://arxiv.org/abs/1803.03243" target="_blank" rel="noopener">https://arxiv.org/abs/1803.03243</a></li></ul><h2 id="Mask-R-CNN"><a href="#Mask-R-CNN" class="headerlink" title="Mask R-CNN"></a>Mask R-CNN</h2><ul><li>arxiv: <a href="http://arxiv.org/abs/1703.06870" target="_blank" rel="noopener">http://arxiv.org/abs/1703.06870</a></li><li>github(Keras): <a href="https://github.com/matterport/Mask_RCNN" target="_blank" rel="noopener">https://github.com/matterport/Mask_RCNN</a></li><li>github(Caffe2): <a href="https://github.com/facebookresearch/Detectron" target="_blank" rel="noopener">https://github.com/facebookresearch/Detectron</a></li><li>github(Pytorch): <a href="https://github.com/wannabeOG/Mask-RCNN" target="_blank" rel="noopener">https://github.com/wannabeOG/Mask-RCNN</a></li><li>github(MXNet): <a href="https://github.com/TuSimple/mx-maskrcnn" target="_blank" rel="noopener">https://github.com/TuSimple/mx-maskrcnn</a></li><li>github(Chainer): <a href="https://github.com/DeNA/Chainer_Mask_R-CNN" target="_blank" rel="noopener">https://github.com/DeNA/Chainer_Mask_R-CNN</a></li></ul><h2 id="Light-Head-R-CNN"><a href="#Light-Head-R-CNN" class="headerlink" title="Light-Head R-CNN"></a>Light-Head R-CNN</h2><p><strong>Light-Head R-CNN: In Defense of Two-Stage Object Detector</strong></p><ul><li>intro: Tsinghua University &amp; Megvii Inc</li><li>arxiv: <a href="https://arxiv.org/abs/1711.07264" target="_blank" rel="noopener">https://arxiv.org/abs/1711.07264</a></li><li>github(offical): <a href="https://github.com/zengarden/light_head_rcnn" target="_blank" rel="noopener">https://github.com/zengarden/light_head_rcnn</a></li><li>github: <a href="https://github.com/terrychenism/Deformable-ConvNets/blob/master/rfcn/symbols/resnet_v1_101_rfcn_light.py#L784" target="_blank" rel="noopener">https://github.com/terrychenism/Deformable-ConvNets/blob/master/rfcn/symbols/resnet_v1_101_rfcn_light.py#L784</a></li></ul><h2 id="Cascade-R-CNN"><a href="#Cascade-R-CNN" class="headerlink" title="Cascade R-CNN"></a>Cascade R-CNN</h2><p><strong>Cascade R-CNN: Delving into High Quality Object Detection</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1712.00726" target="_blank" rel="noopener">https://arxiv.org/abs/1712.00726</a></li><li>github: <a href="https://github.com/zhaoweicai/cascade-rcnn" target="_blank" rel="noopener">https://github.com/zhaoweicai/cascade-rcnn</a></li></ul><h2 id="SPP-Net"><a href="#SPP-Net" class="headerlink" title="SPP-Net"></a>SPP-Net</h2><p><strong>Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition</strong></p><ul><li>intro: ECCV 2014 / TPAMI 2015</li><li>arxiv: <a href="http://arxiv.org/abs/1406.4729" target="_blank" rel="noopener">http://arxiv.org/abs/1406.4729</a></li><li>github: <a href="https://github.com/ShaoqingRen/SPP_net" target="_blank" rel="noopener">https://github.com/ShaoqingRen/SPP_net</a></li><li>notes: <a href="http://zhangliliang.com/2014/09/13/paper-note-sppnet/" target="_blank" rel="noopener">http://zhangliliang.com/2014/09/13/paper-note-sppnet/</a></li></ul><p><strong>DeepID-Net: Deformable Deep Convolutional Neural Networks for Object Detection</strong></p><ul><li>intro: PAMI 2016</li><li>intro: an extension of R-CNN. box pre-training, cascade on region proposals, deformation layers and context representations</li><li>project page: <a href="http://www.ee.cuhk.edu.hk/%CB%9Cwlouyang/projects/imagenetDeepId/index.html" target="_blank" rel="noopener">http://www.ee.cuhk.edu.hk/%CB%9Cwlouyang/projects/imagenetDeepId/index.html</a></li><li>arxiv: <a href="http://arxiv.org/abs/1412.5661" target="_blank" rel="noopener">http://arxiv.org/abs/1412.5661</a></li></ul><p><strong>Object Detectors Emerge in Deep Scene CNNs</strong></p><ul><li>intro: ICLR 2015</li><li>arxiv: <a href="http://arxiv.org/abs/1412.6856" target="_blank" rel="noopener">http://arxiv.org/abs/1412.6856</a></li><li>paper: <a href="https://www.robots.ox.ac.uk/~vgg/rg/papers/zhou_iclr15.pdf" target="_blank" rel="noopener">https://www.robots.ox.ac.uk/~vgg/rg/papers/zhou_iclr15.pdf</a></li><li>paper: <a href="https://people.csail.mit.edu/khosla/papers/iclr2015_zhou.pdf" target="_blank" rel="noopener">https://people.csail.mit.edu/khosla/papers/iclr2015_zhou.pdf</a></li><li>slides: <a href="http://places.csail.mit.edu/slide_iclr2015.pdf" target="_blank" rel="noopener">http://places.csail.mit.edu/slide_iclr2015.pdf</a></li></ul><p><strong>segDeepM: Exploiting Segmentation and Context in Deep Neural Networks for Object Detection</strong></p><ul><li>intro: CVPR 2015</li><li>project(code+data): <a href="https://www.cs.toronto.edu/~yukun/segdeepm.html" target="_blank" rel="noopener">https://www.cs.toronto.edu/~yukun/segdeepm.html</a></li><li>arxiv: <a href="https://arxiv.org/abs/1502.04275" target="_blank" rel="noopener">https://arxiv.org/abs/1502.04275</a></li><li>github: <a href="https://github.com/YknZhu/segDeepM" target="_blank" rel="noopener">https://github.com/YknZhu/segDeepM</a></li></ul><p><strong>Object Detection Networks on Convolutional Feature Maps</strong></p><ul><li>intro: TPAMI 2015</li><li>keywords: NoC</li><li>arxiv: <a href="http://arxiv.org/abs/1504.06066" target="_blank" rel="noopener">http://arxiv.org/abs/1504.06066</a></li></ul><p><strong>Improving Object Detection with Deep Convolutional Networks via Bayesian Optimization and Structured Prediction</strong></p><ul><li>arxiv: <a href="http://arxiv.org/abs/1504.03293" target="_blank" rel="noopener">http://arxiv.org/abs/1504.03293</a></li><li>slides: <a href="http://www.ytzhang.net/files/publications/2015-cvpr-det-slides.pdf" target="_blank" rel="noopener">http://www.ytzhang.net/files/publications/2015-cvpr-det-slides.pdf</a></li><li>github: <a href="https://github.com/YutingZhang/fgs-obj" target="_blank" rel="noopener">https://github.com/YutingZhang/fgs-obj</a></li></ul><p><strong>DeepBox: Learning Objectness with Convolutional Networks</strong></p><ul><li>keywords: DeepBox</li><li>arxiv: <a href="http://arxiv.org/abs/1505.02146" target="_blank" rel="noopener">http://arxiv.org/abs/1505.02146</a></li><li>github: <a href="https://github.com/weichengkuo/DeepBox" target="_blank" rel="noopener">https://github.com/weichengkuo/DeepBox</a></li></ul><h2 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a>YOLO</h2><p><strong>You Only Look Once: Unified, Real-Time Object Detection</strong></p><p><a href="https://camo.githubusercontent.com/e69d4118b20a42de4e23b9549f9a6ec6dbbb0814/687474703a2f2f706a7265646469652e636f6d2f6d656469612f66696c65732f6461726b6e65742d626c61636b2d736d616c6c2e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/e69d4118b20a42de4e23b9549f9a6ec6dbbb0814/687474703a2f2f706a7265646469652e636f6d2f6d656469612f66696c65732f6461726b6e65742d626c61636b2d736d616c6c2e706e67" alt="img"></a></p><ul><li>arxiv: <a href="http://arxiv.org/abs/1506.02640" target="_blank" rel="noopener">http://arxiv.org/abs/1506.02640</a></li><li>code: <a href="https://pjreddie.com/darknet/yolov1/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolov1/</a></li><li>github: <a href="https://github.com/pjreddie/darknet" target="_blank" rel="noopener">https://github.com/pjreddie/darknet</a></li><li>blog: <a href="https://pjreddie.com/darknet/yolov1/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolov1/</a></li><li>slides: <a href="https://docs.google.com/presentation/d/1aeRvtKG21KHdD5lg6Hgyhx5rPq_ZOsGjG5rJ1HP7BbA/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1aeRvtKG21KHdD5lg6Hgyhx5rPq_ZOsGjG5rJ1HP7BbA/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p</a></li><li>reddit: <a href="https://www.reddit.com/r/MachineLearning/comments/3a3m0o/realtime_object_detection_with_yolo/" target="_blank" rel="noopener">https://www.reddit.com/r/MachineLearning/comments/3a3m0o/realtime_object_detection_with_yolo/</a></li><li>github: <a href="https://github.com/gliese581gg/YOLO_tensorflow" target="_blank" rel="noopener">https://github.com/gliese581gg/YOLO_tensorflow</a></li><li>github: <a href="https://github.com/xingwangsfu/caffe-yolo" target="_blank" rel="noopener">https://github.com/xingwangsfu/caffe-yolo</a></li><li>github: <a href="https://github.com/frankzhangrui/Darknet-Yolo" target="_blank" rel="noopener">https://github.com/frankzhangrui/Darknet-Yolo</a></li><li>github: <a href="https://github.com/BriSkyHekun/py-darknet-yolo" target="_blank" rel="noopener">https://github.com/BriSkyHekun/py-darknet-yolo</a></li><li>github: <a href="https://github.com/tommy-qichang/yolo.torch" target="_blank" rel="noopener">https://github.com/tommy-qichang/yolo.torch</a></li><li>github: <a href="https://github.com/frischzenger/yolo-windows" target="_blank" rel="noopener">https://github.com/frischzenger/yolo-windows</a></li><li>github: <a href="https://github.com/AlexeyAB/yolo-windows" target="_blank" rel="noopener">https://github.com/AlexeyAB/yolo-windows</a></li><li>github: <a href="https://github.com/nilboy/tensorflow-yolo" target="_blank" rel="noopener">https://github.com/nilboy/tensorflow-yolo</a></li></ul><p><strong>darkflow - translate darknet to tensorflow. Load trained weights, retrain/fine-tune them using tensorflow, export constant graph def to C++</strong></p><ul><li>blog: <a href="https://thtrieu.github.io/notes/yolo-tensorflow-graph-buffer-cpp" target="_blank" rel="noopener">https://thtrieu.github.io/notes/yolo-tensorflow-graph-buffer-cpp</a></li><li>github: <a href="https://github.com/thtrieu/darkflow" target="_blank" rel="noopener">https://github.com/thtrieu/darkflow</a></li></ul><p><strong>Start Training YOLO with Our Own Data</strong></p><p><a href="https://camo.githubusercontent.com/2f99b692dd7ce47d7832385f3e8a6654e680d92a/687474703a2f2f6775616e6768616e2e696e666f2f626c6f672f656e2f77702d636f6e74656e742f75706c6f6164732f323031352f31322f696d616765732d34302e6a7067" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/2f99b692dd7ce47d7832385f3e8a6654e680d92a/687474703a2f2f6775616e6768616e2e696e666f2f626c6f672f656e2f77702d636f6e74656e742f75706c6f6164732f323031352f31322f696d616765732d34302e6a7067" alt="img"></a></p><ul><li>intro: train with customized data and class numbers/labels. Linux / Windows version for darknet.</li><li>blog: <a href="http://guanghan.info/blog/en/my-works/train-yolo/" target="_blank" rel="noopener">http://guanghan.info/blog/en/my-works/train-yolo/</a></li><li>github: <a href="https://github.com/Guanghan/darknet" target="_blank" rel="noopener">https://github.com/Guanghan/darknet</a></li></ul><p><strong>YOLO: Core ML versus MPSNNGraph</strong></p><ul><li>intro: Tiny YOLO for iOS implemented using CoreML but also using the new MPS graph API.</li><li>blog: <a href="http://machinethink.net/blog/yolo-coreml-versus-mps-graph/" target="_blank" rel="noopener">http://machinethink.net/blog/yolo-coreml-versus-mps-graph/</a></li><li>github: <a href="https://github.com/hollance/YOLO-CoreML-MPSNNGraph" target="_blank" rel="noopener">https://github.com/hollance/YOLO-CoreML-MPSNNGraph</a></li></ul><p><strong>TensorFlow YOLO object detection on Android</strong></p><ul><li>intro: Real-time object detection on Android using the YOLO network with TensorFlow</li><li>github: <a href="https://github.com/natanielruiz/android-yolo" target="_blank" rel="noopener">https://github.com/natanielruiz/android-yolo</a></li></ul><p><strong>Computer Vision in iOS – Object Detection</strong></p><ul><li>blog: <a href="https://sriraghu.com/2017/07/12/computer-vision-in-ios-object-detection/" target="_blank" rel="noopener">https://sriraghu.com/2017/07/12/computer-vision-in-ios-object-detection/</a></li><li>github:<a href="https://github.com/r4ghu/iOS-CoreML-Yolo" target="_blank" rel="noopener">https://github.com/r4ghu/iOS-CoreML-Yolo</a></li></ul><h2 id="YOLOv2"><a href="#YOLOv2" class="headerlink" title="YOLOv2"></a>YOLOv2</h2><p><strong>YOLO9000: Better, Faster, Stronger</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1612.08242" target="_blank" rel="noopener">https://arxiv.org/abs/1612.08242</a></li><li>code: <a href="http://pjreddie.com/yolo9000/" target="_blank" rel="noopener">http://pjreddie.com/yolo9000/</a>    <a href="https://pjreddie.com/darknet/yolov2/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolov2/</a></li><li>github(Chainer): <a href="https://github.com/leetenki/YOLOv2" target="_blank" rel="noopener">https://github.com/leetenki/YOLOv2</a></li><li>github(Keras): <a href="https://github.com/allanzelener/YAD2K" target="_blank" rel="noopener">https://github.com/allanzelener/YAD2K</a></li><li>github(PyTorch): <a href="https://github.com/longcw/yolo2-pytorch" target="_blank" rel="noopener">https://github.com/longcw/yolo2-pytorch</a></li><li>github(Tensorflow): <a href="https://github.com/hizhangp/yolo_tensorflow" target="_blank" rel="noopener">https://github.com/hizhangp/yolo_tensorflow</a></li><li>github(Windows): <a href="https://github.com/AlexeyAB/darknet" target="_blank" rel="noopener">https://github.com/AlexeyAB/darknet</a></li><li>github: <a href="https://github.com/choasUp/caffe-yolo9000" target="_blank" rel="noopener">https://github.com/choasUp/caffe-yolo9000</a></li><li>github: <a href="https://github.com/philipperemy/yolo-9000" target="_blank" rel="noopener">https://github.com/philipperemy/yolo-9000</a></li><li>github(TensorFlow): <a href="https://github.com/KOD-Chen/YOLOv2-Tensorflow" target="_blank" rel="noopener">https://github.com/KOD-Chen/YOLOv2-Tensorflow</a></li><li>github(Keras): <a href="https://github.com/yhcc/yolo2" target="_blank" rel="noopener">https://github.com/yhcc/yolo2</a></li><li>github(Keras): <a href="https://github.com/experiencor/keras-yolo2" target="_blank" rel="noopener">https://github.com/experiencor/keras-yolo2</a></li><li>github(TensorFlow): <a href="https://github.com/WojciechMormul/yolo2" target="_blank" rel="noopener">https://github.com/WojciechMormul/yolo2</a></li></ul><p><strong>darknet_scripts</strong></p><ul><li>intro: Auxilary scripts to work with (YOLO) darknet deep learning famework. AKA -&gt; How to generate YOLO anchors?</li><li>github: <a href="https://github.com/Jumabek/darknet_scripts" target="_blank" rel="noopener">https://github.com/Jumabek/darknet_scripts</a></li></ul><p><strong>Yolo_mark: GUI for marking bounded boxes of objects in images for training Yolo v2</strong></p><ul><li>github: <a href="https://github.com/AlexeyAB/Yolo_mark" target="_blank" rel="noopener">https://github.com/AlexeyAB/Yolo_mark</a></li></ul><p><strong>LightNet: Bringing pjreddie’s DarkNet out of the shadows</strong></p><p><a href="https://github.com//explosion/lightnet" target="_blank" rel="noopener">https://github.com//explosion/lightnet</a></p><p><strong>YOLO v2 Bounding Box Tool</strong></p><ul><li>intro: Bounding box labeler tool to generate the training data in the format YOLO v2 requires.</li><li>github: <a href="https://github.com/Cartucho/yolo-boundingbox-labeler-GUI" target="_blank" rel="noopener">https://github.com/Cartucho/yolo-boundingbox-labeler-GUI</a></li></ul><p><strong>Loss Rank Mining: A General Hard Example Mining Method for Real-time Detectors</strong></p><ul><li>intro: <strong>LRM</strong> is the first hard example mining strategy which could fit YOLOv2 perfectly and make it better applied in series of real scenarios where both real-time rates and accurate detection are strongly demanded.</li><li>arxiv: <a href="https://arxiv.org/abs/1804.04606" target="_blank" rel="noopener">https://arxiv.org/abs/1804.04606</a></li></ul><p><strong>Object detection at 200 Frames Per Second</strong></p><ul><li>intro: faster than Tiny-Yolo-v2</li><li>arxiv: <a href="https://arxiv.org/abs/1805.06361" target="_blank" rel="noopener">https://arxiv.org/abs/1805.06361</a></li></ul><p><strong>Event-based Convolutional Networks for Object Detection in Neuromorphic Cameras</strong></p><ul><li>intro: YOLE–Object Detection in Neuromorphic Cameras</li><li>arxiv:<a href="https://arxiv.org/abs/1805.07931" target="_blank" rel="noopener">https://arxiv.org/abs/1805.07931</a></li></ul><p><strong>OmniDetector: With Neural Networks to Bounding Boxes</strong></p><ul><li>intro: a person detector on n fish-eye images of indoor scenes（NIPS 2018）</li><li>arxiv:<a href="https://arxiv.org/abs/1805.08503" target="_blank" rel="noopener">https://arxiv.org/abs/1805.08503</a></li><li>datasets:<a href="https://gitlab.com/omnidetector/omnidetector" target="_blank" rel="noopener">https://gitlab.com/omnidetector/omnidetector</a></li></ul><h2 id="YOLOv3"><a href="#YOLOv3" class="headerlink" title="YOLOv3"></a>YOLOv3</h2><p><strong>YOLOv3: An Incremental Improvement</strong></p><ul><li>arxiv:<a href="https://arxiv.org/abs/1804.02767" target="_blank" rel="noopener">https://arxiv.org/abs/1804.02767</a></li><li>paper:<a href="https://pjreddie.com/media/files/papers/YOLOv3.pdf" target="_blank" rel="noopener">https://pjreddie.com/media/files/papers/YOLOv3.pdf</a></li><li>code: <a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolo/</a></li><li>github(Official):<a href="https://github.com/pjreddie/darknet" target="_blank" rel="noopener">https://github.com/pjreddie/darknet</a></li><li>github:<a href="https://github.com/mystic123/tensorflow-yolo-v3" target="_blank" rel="noopener">https://github.com/mystic123/tensorflow-yolo-v3</a></li><li>github:<a href="https://github.com/experiencor/keras-yolo3" target="_blank" rel="noopener">https://github.com/experiencor/keras-yolo3</a></li><li>github:<a href="https://github.com/qqwweee/keras-yolo3" target="_blank" rel="noopener">https://github.com/qqwweee/keras-yolo3</a></li><li>github:<a href="https://github.com/marvis/pytorch-yolo3" target="_blank" rel="noopener">https://github.com/marvis/pytorch-yolo3</a></li><li>github:<a href="https://github.com/ayooshkathuria/pytorch-yolo-v3" target="_blank" rel="noopener">https://github.com/ayooshkathuria/pytorch-yolo-v3</a></li><li>github:<a href="https://github.com/ayooshkathuria/YOLO_v3_tutorial_from_scratch" target="_blank" rel="noopener">https://github.com/ayooshkathuria/YOLO_v3_tutorial_from_scratch</a></li><li>github:<a href="https://github.com/eriklindernoren/PyTorch-YOLOv3" target="_blank" rel="noopener">https://github.com/eriklindernoren/PyTorch-YOLOv3</a></li><li>github:<a href="https://github.com/ultralytics/yolov3" target="_blank" rel="noopener">https://github.com/ultralytics/yolov3</a></li><li>github:<a href="https://github.com/BobLiu20/YOLOv3_PyTorch" target="_blank" rel="noopener">https://github.com/BobLiu20/YOLOv3_PyTorch</a></li><li>github:<a href="https://github.com/andy-yun/pytorch-0.4-yolov3" target="_blank" rel="noopener">https://github.com/andy-yun/pytorch-0.4-yolov3</a></li><li>github:<a href="https://github.com/DeNA/PyTorch_YOLOv3" target="_blank" rel="noopener">https://github.com/DeNA/PyTorch_YOLOv3</a></li></ul><h2 id="YOLT"><a href="#YOLT" class="headerlink" title="YOLT"></a>YOLT</h2><p><strong>You Only Look Twice: Rapid Multi-Scale Object Detection In Satellite Imagery</strong></p><ul><li>intro: Small Object Detection</li></ul><ul><li>arxiv:<a href="https://arxiv.org/abs/1805.09512" target="_blank" rel="noopener">https://arxiv.org/abs/1805.09512</a></li><li>github:<a href="https://github.com/avanetten/yolt" target="_blank" rel="noopener">https://github.com/avanetten/yolt</a></li></ul><h2 id="SSD"><a href="#SSD" class="headerlink" title="SSD"></a>SSD</h2><p><strong>SSD: Single Shot MultiBox Detector</strong></p><p><a href="https://camo.githubusercontent.com/ad9b147ed3a5f48ffb7c3540711c15aa04ce49c6/687474703a2f2f7777772e63732e756e632e6564752f7e776c69752f7061706572732f7373642e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/ad9b147ed3a5f48ffb7c3540711c15aa04ce49c6/687474703a2f2f7777772e63732e756e632e6564752f7e776c69752f7061706572732f7373642e706e67" alt="img"></a></p><ul><li>intro: ECCV 2016 Oral</li><li>arxiv: <a href="http://arxiv.org/abs/1512.02325" target="_blank" rel="noopener">http://arxiv.org/abs/1512.02325</a></li><li>paper: <a href="http://www.cs.unc.edu/~wliu/papers/ssd.pdf" target="_blank" rel="noopener">http://www.cs.unc.edu/~wliu/papers/ssd.pdf</a></li><li>slides: <a href="http://www.cs.unc.edu/~wliu/papers/ssd_eccv2016_slide.pdf" target="_blank" rel="noopener">http://www.cs.unc.edu/%7Ewliu/papers/ssd_eccv2016_slide.pdf</a></li><li>github(Official): <a href="https://github.com/weiliu89/caffe/tree/ssd" target="_blank" rel="noopener">https://github.com/weiliu89/caffe/tree/ssd</a></li><li>video: <a href="http://weibo.com/p/2304447a2326da963254c963c97fb05dd3a973" target="_blank" rel="noopener">http://weibo.com/p/2304447a2326da963254c963c97fb05dd3a973</a></li><li>github: <a href="https://github.com/zhreshold/mxnet-ssd" target="_blank" rel="noopener">https://github.com/zhreshold/mxnet-ssd</a></li><li>github: <a href="https://github.com/zhreshold/mxnet-ssd.cpp" target="_blank" rel="noopener">https://github.com/zhreshold/mxnet-ssd.cpp</a></li><li>github: <a href="https://github.com/rykov8/ssd_keras" target="_blank" rel="noopener">https://github.com/rykov8/ssd_keras</a></li><li>github: <a href="https://github.com/balancap/SSD-Tensorflow" target="_blank" rel="noopener">https://github.com/balancap/SSD-Tensorflow</a></li><li>github: <a href="https://github.com/amdegroot/ssd.pytorch" target="_blank" rel="noopener">https://github.com/amdegroot/ssd.pytorch</a></li><li>github(Caffe): <a href="https://github.com/chuanqi305/MobileNet-SSD" target="_blank" rel="noopener">https://github.com/chuanqi305/MobileNet-SSD</a></li></ul><p><strong>What’s the diffience in performance between this new code you pushed and the previous code? #327</strong></p><p><a href="https://github.com/weiliu89/caffe/issues/327" target="_blank" rel="noopener">https://github.com/weiliu89/caffe/issues/327</a></p><h2 id="DSSD"><a href="#DSSD" class="headerlink" title="DSSD"></a>DSSD</h2><p><strong>DSSD : Deconvolutional Single Shot Detector</strong></p><ul><li>intro: UNC Chapel Hill &amp; Amazon Inc</li><li>arxiv: <a href="https://arxiv.org/abs/1701.06659" target="_blank" rel="noopener">https://arxiv.org/abs/1701.06659</a></li><li>github: <a href="https://github.com/chengyangfu/caffe/tree/dssd" target="_blank" rel="noopener">https://github.com/chengyangfu/caffe/tree/dssd</a></li><li>github: <a href="https://github.com/MTCloudVision/mxnet-dssd" target="_blank" rel="noopener">https://github.com/MTCloudVision/mxnet-dssd</a></li><li>demo: <a href="http://120.52.72.53/www.cs.unc.edu/c3pr90ntc0td/~cyfu/dssd_lalaland.mp4" target="_blank" rel="noopener">http://120.52.72.53/www.cs.unc.edu/c3pr90ntc0td/~cyfu/dssd_lalaland.mp4</a></li></ul><p><strong>Enhancement of SSD by concatenating feature maps for object detection</strong></p><ul><li>intro: rainbow SSD (R-SSD)</li><li>arxiv: <a href="https://arxiv.org/abs/1705.09587" target="_blank" rel="noopener">https://arxiv.org/abs/1705.09587</a></li></ul><p><strong>Context-aware Single-Shot Detector</strong></p><ul><li>keywords: CSSD, DiCSSD, DeCSSD, effective receptive fields (ERFs), theoretical receptive fields (TRFs)</li><li>arxiv: <a href="https://arxiv.org/abs/1707.08682" target="_blank" rel="noopener">https://arxiv.org/abs/1707.08682</a></li></ul><p><strong>Feature-Fused SSD: Fast Detection for Small Objects</strong></p><p><a href="https://arxiv.org/abs/1709.05054" target="_blank" rel="noopener">https://arxiv.org/abs/1709.05054</a></p><h2 id="FSSD"><a href="#FSSD" class="headerlink" title="FSSD"></a>FSSD</h2><p><strong>FSSD: Feature Fusion Single Shot Multibox Detector</strong></p><p><a href="https://arxiv.org/abs/1712.00960" target="_blank" rel="noopener">https://arxiv.org/abs/1712.00960</a></p><p><strong>Weaving Multi-scale Context for Single Shot Detector</strong></p><ul><li>intro: WeaveNet</li><li>keywords: fuse multi-scale information</li><li>arxiv: <a href="https://arxiv.org/abs/1712.03149" target="_blank" rel="noopener">https://arxiv.org/abs/1712.03149</a></li></ul><h2 id="ESSD"><a href="#ESSD" class="headerlink" title="ESSD"></a>ESSD</h2><p><strong>Extend the shallow part of Single Shot MultiBox Detector via Convolutional Neural Network</strong></p><p><a href="https://arxiv.org/abs/1801.05918" target="_blank" rel="noopener">https://arxiv.org/abs/1801.05918</a></p><p><strong>Tiny SSD: A Tiny Single-shot Detection Deep Convolutional Neural Network for Real-time Embedded Object Detection</strong></p><p><a href="https://arxiv.org/abs/1802.06488" target="_blank" rel="noopener">https://arxiv.org/abs/1802.06488</a></p><h2 id="MDSSD"><a href="#MDSSD" class="headerlink" title="MDSSD"></a>MDSSD</h2><p><strong>MDSSD: Multi-scale Deconvolutional Single Shot Detector for small objects</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1805.07009" target="_blank" rel="noopener">https://arxiv.org/abs/1805.07009</a></li></ul><h2 id="Pelee"><a href="#Pelee" class="headerlink" title="Pelee"></a>Pelee</h2><p><strong>Pelee: A Real-Time Object Detection System on Mobile Devices</strong></p><p><a href="https://github.com/Robert-JunWang/Pelee" target="_blank" rel="noopener">https://github.com/Robert-JunWang/Pelee</a></p><ul><li>intro: (ICLR 2018 workshop track)</li></ul><ul><li>arxiv: <a href="https://arxiv.org/abs/1804.06882" target="_blank" rel="noopener">https://arxiv.org/abs/1804.06882</a></li><li>github: <a href="https://github.com/Robert-JunWang/Pelee" target="_blank" rel="noopener">https://github.com/Robert-JunWang/Pelee</a></li></ul><h2 id="Fire-SSD"><a href="#Fire-SSD" class="headerlink" title="Fire SSD"></a>Fire SSD</h2><p><strong>Fire SSD: Wide Fire Modules based Single Shot Detector on Edge Device</strong></p><ul><li>intro:low cost, fast speed and high mAP on  factor edge computing devices</li></ul><ul><li>arxiv:<a href="https://arxiv.org/abs/1806.05363" target="_blank" rel="noopener">https://arxiv.org/abs/1806.05363</a></li></ul><h2 id="R-FCN"><a href="#R-FCN" class="headerlink" title="R-FCN"></a>R-FCN</h2><p><strong>R-FCN: Object Detection via Region-based Fully Convolutional Networks</strong></p><ul><li>arxiv: <a href="http://arxiv.org/abs/1605.06409" target="_blank" rel="noopener">http://arxiv.org/abs/1605.06409</a></li><li>github: <a href="https://github.com/daijifeng001/R-FCN" target="_blank" rel="noopener">https://github.com/daijifeng001/R-FCN</a></li><li>github(MXNet): <a href="https://github.com/msracver/Deformable-ConvNets/tree/master/rfcn" target="_blank" rel="noopener">https://github.com/msracver/Deformable-ConvNets/tree/master/rfcn</a></li><li>github: <a href="https://github.com/Orpine/py-R-FCN" target="_blank" rel="noopener">https://github.com/Orpine/py-R-FCN</a></li><li>github: <a href="https://github.com/PureDiors/pytorch_RFCN" target="_blank" rel="noopener">https://github.com/PureDiors/pytorch_RFCN</a></li><li>github: <a href="https://github.com/bharatsingh430/py-R-FCN-multiGPU" target="_blank" rel="noopener">https://github.com/bharatsingh430/py-R-FCN-multiGPU</a></li><li>github: <a href="https://github.com/xdever/RFCN-tensorflow" target="_blank" rel="noopener">https://github.com/xdever/RFCN-tensorflow</a></li></ul><p><strong>R-FCN-3000 at 30fps: Decoupling Detection and Classification</strong></p><p><a href="https://arxiv.org/abs/1712.01802" target="_blank" rel="noopener">https://arxiv.org/abs/1712.01802</a></p><p><strong>Recycle deep features for better object detection</strong></p><ul><li>arxiv: <a href="http://arxiv.org/abs/1607.05066" target="_blank" rel="noopener">http://arxiv.org/abs/1607.05066</a></li></ul><h2 id="FPN"><a href="#FPN" class="headerlink" title="FPN"></a>FPN</h2><p><strong>Feature Pyramid Networks for Object Detection</strong></p><ul><li>intro: Facebook AI Research</li><li>arxiv: <a href="https://arxiv.org/abs/1612.03144" target="_blank" rel="noopener">https://arxiv.org/abs/1612.03144</a></li></ul><p><strong>Action-Driven Object Detection with Top-Down Visual Attentions</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1612.06704" target="_blank" rel="noopener">https://arxiv.org/abs/1612.06704</a></li></ul><p><strong>Beyond Skip Connections: Top-Down Modulation for Object Detection</strong></p><ul><li>intro: CMU &amp; UC Berkeley &amp; Google Research</li><li>arxiv: <a href="https://arxiv.org/abs/1612.06851" target="_blank" rel="noopener">https://arxiv.org/abs/1612.06851</a></li></ul><p><strong>Wide-Residual-Inception Networks for Real-time Object Detection</strong></p><ul><li>intro: Inha University</li><li>arxiv: <a href="https://arxiv.org/abs/1702.01243" target="_blank" rel="noopener">https://arxiv.org/abs/1702.01243</a></li></ul><p><strong>Attentional Network for Visual Object Detection</strong></p><ul><li>intro: University of Maryland &amp; Mitsubishi Electric Research Laboratories</li><li>arxiv: <a href="https://arxiv.org/abs/1702.01478" target="_blank" rel="noopener">https://arxiv.org/abs/1702.01478</a></li></ul><p><strong>Learning Chained Deep Features and Classifiers for Cascade in Object Detection</strong></p><ul><li>keykwords: CC-Net</li><li>intro: chained cascade network (CC-Net). 81.1% mAP on PASCAL VOC 2007</li><li>arxiv: <a href="https://arxiv.org/abs/1702.07054" target="_blank" rel="noopener">https://arxiv.org/abs/1702.07054</a></li></ul><p><strong>DeNet: Scalable Real-time Object Detection with Directed Sparse Sampling</strong></p><ul><li>intro: ICCV 2017 (poster)</li><li>arxiv: <a href="https://arxiv.org/abs/1703.10295" target="_blank" rel="noopener">https://arxiv.org/abs/1703.10295</a></li></ul><p><strong>Discriminative Bimodal Networks for Visual Localization and Detection with Natural Language Queries</strong></p><ul><li>intro: CVPR 2017</li><li>arxiv: <a href="https://arxiv.org/abs/1704.03944" target="_blank" rel="noopener">https://arxiv.org/abs/1704.03944</a></li></ul><p><strong>Spatial Memory for Context Reasoning in Object Detection</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1704.04224" target="_blank" rel="noopener">https://arxiv.org/abs/1704.04224</a></li></ul><p><strong>Accurate Single Stage Detector Using Recurrent Rolling Convolution</strong></p><ul><li>intro: CVPR 2017. SenseTime</li><li>keywords: Recurrent Rolling Convolution (RRC)</li><li>arxiv: <a href="https://arxiv.org/abs/1704.05776" target="_blank" rel="noopener">https://arxiv.org/abs/1704.05776</a></li><li>github: <a href="https://github.com/xiaohaoChen/rrc_detection" target="_blank" rel="noopener">https://github.com/xiaohaoChen/rrc_detection</a></li></ul><p><strong>Deep Occlusion Reasoning for Multi-Camera Multi-Target Detection</strong></p><p><a href="https://arxiv.org/abs/1704.05775" target="_blank" rel="noopener">https://arxiv.org/abs/1704.05775</a></p><p><strong>LCDet: Low-Complexity Fully-Convolutional Neural Networks for Object Detection in Embedded Systems</strong></p><ul><li>intro: Embedded Vision Workshop in CVPR. UC San Diego &amp; Qualcomm Inc</li><li>arxiv: <a href="https://arxiv.org/abs/1705.05922" target="_blank" rel="noopener">https://arxiv.org/abs/1705.05922</a></li></ul><p><strong>Point Linking Network for Object Detection</strong></p><ul><li>intro: Point Linking Network (PLN)</li><li>arxiv: <a href="https://arxiv.org/abs/1706.03646" target="_blank" rel="noopener">https://arxiv.org/abs/1706.03646</a></li></ul><p><strong>Perceptual Generative Adversarial Networks for Small Object Detection</strong></p><p><a href="https://arxiv.org/abs/1706.05274" target="_blank" rel="noopener">https://arxiv.org/abs/1706.05274</a></p><p><strong>Few-shot Object Detection</strong></p><p><a href="https://arxiv.org/abs/1706.08249" target="_blank" rel="noopener">https://arxiv.org/abs/1706.08249</a></p><p><strong>Yes-Net: An effective Detector Based on Global Information</strong></p><p><a href="https://arxiv.org/abs/1706.09180" target="_blank" rel="noopener">https://arxiv.org/abs/1706.09180</a></p><p><strong>SMC Faster R-CNN: Toward a scene-specialized multi-object detector</strong></p><p><a href="https://arxiv.org/abs/1706.10217" target="_blank" rel="noopener">https://arxiv.org/abs/1706.10217</a></p><p><strong>Towards lightweight convolutional neural networks for object detection</strong></p><p><a href="https://arxiv.org/abs/1707.01395" target="_blank" rel="noopener">https://arxiv.org/abs/1707.01395</a></p><p><strong>RON: Reverse Connection with Objectness Prior Networks for Object Detection</strong></p><ul><li>intro: CVPR 2017</li><li>arxiv: <a href="https://arxiv.org/abs/1707.01691" target="_blank" rel="noopener">https://arxiv.org/abs/1707.01691</a></li><li>github: <a href="https://github.com/taokong/RON" target="_blank" rel="noopener">https://github.com/taokong/RON</a></li></ul><p><strong>Mimicking Very Efficient Network for Object Detection</strong></p><ul><li>intro: CVPR 2017. SenseTime &amp; Beihang University</li><li>paper: <a href="http://openaccess.thecvf.com/content_cvpr_2017/papers/Li_Mimicking_Very_Efficient_CVPR_2017_paper.pdf" target="_blank" rel="noopener">http://openaccess.thecvf.com/content_cvpr_2017/papers/Li_Mimicking_Very_Efficient_CVPR_2017_paper.pdf</a></li></ul><p><strong>Residual Features and Unified Prediction Network for Single Stage Detection</strong></p><p><a href="https://arxiv.org/abs/1707.05031" target="_blank" rel="noopener">https://arxiv.org/abs/1707.05031</a></p><p><strong>Deformable Part-based Fully Convolutional Network for Object Detection</strong></p><ul><li>intro: BMVC 2017 (oral). Sorbonne Universités &amp; CEDRIC</li><li>arxiv: <a href="https://arxiv.org/abs/1707.06175" target="_blank" rel="noopener">https://arxiv.org/abs/1707.06175</a></li></ul><p><strong>Adaptive Feeding: Achieving Fast and Accurate Detections by Adaptively Combining Object Detectors</strong></p><ul><li>intro: ICCV 2017</li><li>arxiv: <a href="https://arxiv.org/abs/1707.06399" target="_blank" rel="noopener">https://arxiv.org/abs/1707.06399</a></li></ul><p><strong>Recurrent Scale Approximation for Object Detection in CNN</strong></p><ul><li>intro: ICCV 2017</li><li>keywords: Recurrent Scale Approximation (RSA)</li><li>arxiv: <a href="https://arxiv.org/abs/1707.09531" target="_blank" rel="noopener">https://arxiv.org/abs/1707.09531</a></li><li>github: <a href="https://github.com/sciencefans/RSA-for-object-detection" target="_blank" rel="noopener">https://github.com/sciencefans/RSA-for-object-detection</a></li></ul><h2 id="DSOD"><a href="#DSOD" class="headerlink" title="DSOD"></a>DSOD</h2><p><strong>DSOD: Learning Deeply Supervised Object Detectors from Scratch</strong></p><p><img src="https://user-images.githubusercontent.com/3794909/28934967-718c9302-78b5-11e7-89ee-8b514e53e23c.png" alt="img"></p><ul><li>intro: ICCV 2017. Fudan University &amp; Tsinghua University &amp; Intel Labs China</li><li>arxiv: <a href="https://arxiv.org/abs/1708.01241" target="_blank" rel="noopener">https://arxiv.org/abs/1708.01241</a></li><li>github: <a href="https://github.com/szq0214/DSOD" target="_blank" rel="noopener">https://github.com/szq0214/DSOD</a></li><li>github:<a href="https://github.com/Windaway/DSOD-Tensorflow" target="_blank" rel="noopener">https://github.com/Windaway/DSOD-Tensorflow</a></li><li>github:<a href="https://github.com/chenyuntc/dsod.pytorch" target="_blank" rel="noopener">https://github.com/chenyuntc/dsod.pytorch</a></li></ul><p><strong>Learning Object Detectors from Scratch with Gated Recurrent Feature Pyramids</strong></p><ul><li>arxiv:<a href="https://arxiv.org/abs/1712.00886" target="_blank" rel="noopener">https://arxiv.org/abs/1712.00886</a></li><li>github:<a href="https://github.com/szq0214/GRP-DSOD" target="_blank" rel="noopener">https://github.com/szq0214/GRP-DSOD</a></li></ul><p><strong>Tiny-DSOD: Lightweight Object Detection for Resource-Restricted Usages</strong></p><ul><li>intro: BMVC 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1807.11013" target="_blank" rel="noopener">https://arxiv.org/abs/1807.11013</a></li></ul><p><strong>Object Detection from Scratch with Deep Supervision</strong></p><ul><li>intro: This is an extended version of DSOD</li><li>arXiv: <a href="https://arxiv.org/abs/1809.09294" target="_blank" rel="noopener">https://arxiv.org/abs/1809.09294</a></li></ul><h2 id="RetinaNet"><a href="#RetinaNet" class="headerlink" title="RetinaNet"></a>RetinaNet</h2><p><strong>Focal Loss for Dense Object Detection</strong></p><ul><li>intro: ICCV 2017 Best student paper award. Facebook AI Research</li><li>keywords: RetinaNet</li><li>arxiv: <a href="https://arxiv.org/abs/1708.02002" target="_blank" rel="noopener">https://arxiv.org/abs/1708.02002</a></li></ul><p><strong>CoupleNet: Coupling Global Structure with Local Parts for Object Detection</strong></p><ul><li>intro: ICCV 2017</li><li>arxiv: <a href="https://arxiv.org/abs/1708.02863" target="_blank" rel="noopener">https://arxiv.org/abs/1708.02863</a></li></ul><p><strong>Incremental Learning of Object Detectors without Catastrophic Forgetting</strong></p><ul><li>intro: ICCV 2017. Inria</li><li>arxiv: <a href="https://arxiv.org/abs/1708.06977" target="_blank" rel="noopener">https://arxiv.org/abs/1708.06977</a></li></ul><p><strong>Zoom Out-and-In Network with Map Attention Decision for Region Proposal and Object Detection</strong></p><p><a href="https://arxiv.org/abs/1709.04347" target="_blank" rel="noopener">https://arxiv.org/abs/1709.04347</a></p><p><strong>StairNet: Top-Down Semantic Aggregation for Accurate One Shot Detection</strong></p><p><a href="https://arxiv.org/abs/1709.05788" target="_blank" rel="noopener">https://arxiv.org/abs/1709.05788</a></p><p><strong>Dynamic Zoom-in Network for Fast Object Detection in Large Images</strong></p><p><a href="https://arxiv.org/abs/1711.05187" target="_blank" rel="noopener">https://arxiv.org/abs/1711.05187</a></p><p><strong>Zero-Annotation Object Detection with Web Knowledge Transfer</strong></p><ul><li>intro: NTU, Singapore &amp; Amazon</li><li>keywords: multi-instance multi-label domain adaption learning framework</li><li>arxiv: <a href="https://arxiv.org/abs/1711.05954" target="_blank" rel="noopener">https://arxiv.org/abs/1711.05954</a></li></ul><h2 id="MegDet"><a href="#MegDet" class="headerlink" title="MegDet"></a>MegDet</h2><p><strong>MegDet: A Large Mini-Batch Object Detector</strong></p><ul><li>intro: Peking University &amp; Tsinghua University &amp; Megvii Inc</li><li>arxiv: <a href="https://arxiv.org/abs/1711.07240" target="_blank" rel="noopener">https://arxiv.org/abs/1711.07240</a></li></ul><p><strong>Receptive Field Block Net for Accurate and Fast Object Detection</strong></p><ul><li>intro: RFBNet</li><li>arxiv: <a href="https://arxiv.org/abs/1711.07767" target="_blank" rel="noopener">https://arxiv.org/abs/1711.07767</a></li><li>github: <a href="https://github.com//ruinmessi/RFBNet" target="_blank" rel="noopener">https://github.com//ruinmessi/RFBNet</a></li></ul><p><strong>An Analysis of Scale Invariance in Object Detection - SNIP</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1711.08189" target="_blank" rel="noopener">https://arxiv.org/abs/1711.08189</a></li><li>github: <a href="https://github.com/bharatsingh430/snip" target="_blank" rel="noopener">https://github.com/bharatsingh430/snip</a></li></ul><p><strong>Feature Selective Networks for Object Detection</strong></p><p><a href="https://arxiv.org/abs/1711.08879" target="_blank" rel="noopener">https://arxiv.org/abs/1711.08879</a></p><p><strong>Learning a Rotation Invariant Detector with Rotatable Bounding Box</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1711.09405" target="_blank" rel="noopener">https://arxiv.org/abs/1711.09405</a></li><li>github: <a href="https://github.com/liulei01/DRBox" target="_blank" rel="noopener">https://github.com/liulei01/DRBox</a></li></ul><p><strong>Scalable Object Detection for Stylized Objects</strong></p><ul><li>intro: Microsoft AI &amp; Research Munich</li><li>arxiv: <a href="https://arxiv.org/abs/1711.09822" target="_blank" rel="noopener">https://arxiv.org/abs/1711.09822</a></li></ul><p><strong>Learning Object Detectors from Scratch with Gated Recurrent Feature Pyramids</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1712.00886" target="_blank" rel="noopener">https://arxiv.org/abs/1712.00886</a></li><li>github: <a href="https://github.com/szq0214/GRP-DSOD" target="_blank" rel="noopener">https://github.com/szq0214/GRP-DSOD</a></li></ul><p><strong>Deep Regionlets for Object Detection</strong></p><ul><li>keywords: region selection network, gating network</li><li>arxiv: <a href="https://arxiv.org/abs/1712.02408" target="_blank" rel="noopener">https://arxiv.org/abs/1712.02408</a></li></ul><p><strong>Training and Testing Object Detectors with Virtual Images</strong></p><ul><li>intro: IEEE/CAA Journal of Automatica Sinica</li><li>arxiv: <a href="https://arxiv.org/abs/1712.08470" target="_blank" rel="noopener">https://arxiv.org/abs/1712.08470</a></li></ul><p><strong>Large-Scale Object Discovery and Detector Adaptation from Unlabeled Video</strong></p><ul><li>keywords: object mining, object tracking, unsupervised object discovery by appearance-based clustering, self-supervised detector adaptation</li><li>arxiv: <a href="https://arxiv.org/abs/1712.08832" target="_blank" rel="noopener">https://arxiv.org/abs/1712.08832</a></li></ul><p><strong>Spot the Difference by Object Detection</strong></p><ul><li>intro: Tsinghua University &amp; JD Group</li><li>arxiv: <a href="https://arxiv.org/abs/1801.01051" target="_blank" rel="noopener">https://arxiv.org/abs/1801.01051</a></li></ul><p><strong>Localization-Aware Active Learning for Object Detection</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1801.05124" target="_blank" rel="noopener">https://arxiv.org/abs/1801.05124</a></li></ul><p><strong>Object Detection with Mask-based Feature Encoding</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1802.03934" target="_blank" rel="noopener">https://arxiv.org/abs/1802.03934</a></li></ul><p><strong>LSTD: A Low-Shot Transfer Detector for Object Detection</strong></p><ul><li>intro: AAAI 2018</li><li>arxiv: <a href="https://arxiv.org/abs/1803.01529" target="_blank" rel="noopener">https://arxiv.org/abs/1803.01529</a></li></ul><p><strong>Pseudo Mask Augmented Object Detection</strong></p><p><a href="https://arxiv.org/abs/1803.05858" target="_blank" rel="noopener">https://arxiv.org/abs/1803.05858</a></p><p><strong>Revisiting RCNN: On Awakening the Classification Power of Faster RCNN</strong></p><p><a href="https://arxiv.org/abs/1803.06799" target="_blank" rel="noopener">https://arxiv.org/abs/1803.06799</a></p><p><strong>Learning Region Features for Object Detection</strong></p><ul><li>intro: Peking University &amp; MSRA</li><li>arxiv: <a href="https://arxiv.org/abs/1803.07066" target="_blank" rel="noopener">https://arxiv.org/abs/1803.07066</a></li></ul><p><strong>Single-Shot Bidirectional Pyramid Networks for High-Quality Object Detection</strong></p><ul><li>intro: Singapore Management University &amp; Zhejiang University</li><li>arxiv: <a href="https://arxiv.org/abs/1803.08208" target="_blank" rel="noopener">https://arxiv.org/abs/1803.08208</a></li></ul><p><strong>Object Detection for Comics using Manga109 Annotations</strong></p><ul><li>intro: University of Tokyo &amp; National Institute of Informatics, Japan</li><li>arxiv: <a href="https://arxiv.org/abs/1803.08670" target="_blank" rel="noopener">https://arxiv.org/abs/1803.08670</a></li></ul><p><strong>Task-Driven Super Resolution: Object Detection in Low-resolution Images</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1803.11316" target="_blank" rel="noopener">https://arxiv.org/abs/1803.11316</a></li></ul><p><strong>Transferring Common-Sense Knowledge for Object Detection</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1804.01077" target="_blank" rel="noopener">https://arxiv.org/abs/1804.01077</a></li></ul><p><strong>Multi-scale Location-aware Kernel Representation for Object Detection</strong></p><ul><li>intro: CVPR 2018</li><li>arxiv: <a href="https://arxiv.org/abs/1804.00428" target="_blank" rel="noopener">https://arxiv.org/abs/1804.00428</a></li><li>github: <a href="https://github.com/Hwang64/MLKP" target="_blank" rel="noopener">https://github.com/Hwang64/MLKP</a></li></ul><p><strong>Loss Rank Mining: A General Hard Example Mining Method for Real-time Detectors</strong></p><ul><li>intro: National University of Defense Technology</li><li>arxiv: <a href="https://arxiv.org/abs/1804.04606" target="_blank" rel="noopener">https://arxiv.org/abs/1804.04606</a></li></ul><p><strong>Robust Physical Adversarial Attack on Faster R-CNN Object Detector</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1804.05810" target="_blank" rel="noopener">https://arxiv.org/abs/1804.05810</a></li></ul><h2 id="RefineNet"><a href="#RefineNet" class="headerlink" title="RefineNet"></a>RefineNet</h2><p><strong>Single-Shot Refinement Neural Network for Object Detection</strong></p><ul><li><p>intro: CVPR 2018</p></li><li><p>arxiv: <a href="https://arxiv.org/abs/1711.06897" target="_blank" rel="noopener">https://arxiv.org/abs/1711.06897</a></p></li><li><p>github: <a href="https://github.com/sfzhang15/RefineDet" target="_blank" rel="noopener">https://github.com/sfzhang15/RefineDet</a></p></li><li><p>github: <a href="https://github.com/lzx1413/PytorchSSD" target="_blank" rel="noopener">https://github.com/lzx1413/PytorchSSD</a></p></li><li><p>github: <a href="https://github.com/ddlee96/RefineDet_mxnet" target="_blank" rel="noopener">https://github.com/ddlee96/RefineDet_mxnet</a></p></li><li><p>github: <a href="https://github.com/MTCloudVision/RefineDet-Mxnet" target="_blank" rel="noopener">https://github.com/MTCloudVision/RefineDet-Mxnet</a></p></li></ul><h2 id="DetNet"><a href="#DetNet" class="headerlink" title="DetNet"></a>DetNet</h2><p><strong>DetNet: A Backbone network for Object Detection</strong></p><ul><li>intro: Tsinghua University &amp; Face++</li><li>arxiv: <a href="https://arxiv.org/abs/1804.06215" target="_blank" rel="noopener">https://arxiv.org/abs/1804.06215</a></li></ul><h2 id="SSOD"><a href="#SSOD" class="headerlink" title="SSOD"></a>SSOD</h2><p><strong>Self-supervisory Signals for Object Discovery and Detection</strong></p><ul><li>Google Brain</li><li>arxiv:<a href="https://arxiv.org/abs/1806.03370" target="_blank" rel="noopener">https://arxiv.org/abs/1806.03370</a></li></ul><h2 id="CornerNet"><a href="#CornerNet" class="headerlink" title="CornerNet"></a>CornerNet</h2><p><strong>CornerNet: Detecting Objects as Paired Keypoints</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1808.01244" target="_blank" rel="noopener">https://arxiv.org/abs/1808.01244</a></li><li>github: <a href="https://github.com/umich-vl/CornerNet" target="_blank" rel="noopener">https://github.com/umich-vl/CornerNet</a></li></ul><h2 id="M2Det"><a href="#M2Det" class="headerlink" title="M2Det"></a>M2Det</h2><p><strong>M2Det: A Single-Shot Object Detector based on Multi-Level Feature Pyramid Network</strong></p><ul><li>intro: AAAI 2019</li><li>arXiv: <a href="https://arxiv.org/abs/1811.04533" target="_blank" rel="noopener">https://arxiv.org/abs/1811.04533</a></li><li>github: <a href="https://github.com/qijiezhao/M2Det" target="_blank" rel="noopener">https://github.com/qijiezhao/M2Det</a></li></ul><h2 id="3D-Object-Detection"><a href="#3D-Object-Detection" class="headerlink" title="3D Object Detection"></a>3D Object Detection</h2><p><strong>3D Backbone Network for 3D Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1901.08373" target="_blank" rel="noopener">https://arxiv.org/abs/1901.08373</a></li></ul><p><strong>LMNet: Real-time Multiclass Object Detection on CPU using 3D LiDARs</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1805.04902" target="_blank" rel="noopener">https://arxiv.org/abs/1805.04902</a></li><li>github: <a href="https://github.com/CPFL/Autoware/tree/feature/cnn_lidar_detection" target="_blank" rel="noopener">https://github.com/CPFL/Autoware/tree/feature/cnn_lidar_detection</a></li></ul><h2 id="ZSD（Zero-Shot-Object-Detection）"><a href="#ZSD（Zero-Shot-Object-Detection）" class="headerlink" title="ZSD（Zero-Shot Object Detection）"></a>ZSD（Zero-Shot Object Detection）</h2><p><strong>Zero-Shot Detection</strong></p><ul><li>intro: Australian National University</li><li>keywords: YOLO</li><li>arxiv: <a href="https://arxiv.org/abs/1803.07113" target="_blank" rel="noopener">https://arxiv.org/abs/1803.07113</a></li></ul><p><strong>Zero-Shot Object Detection</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1804.04340" target="_blank" rel="noopener">https://arxiv.org/abs/1804.04340</a></li></ul><p><strong>Zero-Shot Object Detection: Learning to Simultaneously Recognize and Localize Novel Concepts</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1803.06049" target="_blank" rel="noopener">https://arxiv.org/abs/1803.06049</a></li></ul><p><strong>Zero-Shot Object Detection by Hybrid Region Embedding</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1805.06157" target="_blank" rel="noopener">https://arxiv.org/abs/1805.06157</a></li></ul><h2 id="OSD（One-Shot-Object-Detection）"><a href="#OSD（One-Shot-Object-Detection）" class="headerlink" title="OSD（One-Shot Object Detection）"></a>OSD（One-Shot Object Detection）</h2><p><strong>Comparison Network for One-Shot Conditional Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1904.02317" target="_blank" rel="noopener">https://arxiv.org/abs/1904.02317</a></li></ul><p><strong>One-Shot Object Detection</strong></p><p>RepMet: Representative-based metric learning for classification and one-shot object detection</p><ul><li>intro: IBM Research AI</li><li>arxiv:<a href="https://arxiv.org/abs/1806.04728" target="_blank" rel="noopener">https://arxiv.org/abs/1806.04728</a></li><li>github: TODO</li></ul><h2 id="Weakly-Supervised-Object-Detection"><a href="#Weakly-Supervised-Object-Detection" class="headerlink" title="Weakly Supervised Object Detection"></a>Weakly Supervised Object Detection</h2><p><strong>Weakly Supervised Object Detection in Artworks</strong></p><ul><li>intro: ECCV 2018 Workshop Computer Vision for Art Analysis</li><li>arXiv: <a href="https://arxiv.org/abs/1810.02569" target="_blank" rel="noopener">https://arxiv.org/abs/1810.02569</a></li><li>Datasets: <a href="https://wsoda.telecom-paristech.fr/downloads/dataset/IconArt_v1.zip" target="_blank" rel="noopener">https://wsoda.telecom-paristech.fr/downloads/dataset/IconArt_v1.zip</a></li></ul><p><strong>Cross-Domain Weakly-Supervised Object Detection through Progressive Domain Adaptation</strong></p><ul><li>intro: CVPR 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1803.11365" target="_blank" rel="noopener">https://arxiv.org/abs/1803.11365</a></li><li>homepage: <a href="https://naoto0804.github.io/cross_domain_detection/" target="_blank" rel="noopener">https://naoto0804.github.io/cross_domain_detection/</a></li><li>paper: <a href="http://openaccess.thecvf.com/content_cvpr_2018/html/Inoue_Cross-Domain_Weakly-Supervised_Object_CVPR_2018_paper.html" target="_blank" rel="noopener">http://openaccess.thecvf.com/content_cvpr_2018/html/Inoue_Cross-Domain_Weakly-Supervised_Object_CVPR_2018_paper.html</a></li><li>github: <a href="https://github.com/naoto0804/cross-domain-detection" target="_blank" rel="noopener">https://github.com/naoto0804/cross-domain-detection</a></li></ul><h2 id="Softer-NMS"><a href="#Softer-NMS" class="headerlink" title="Softer-NMS"></a>Softer-NMS</h2><p><strong>《Softer-NMS: Rethinking Bounding Box Regression for Accurate Object Detection》</strong></p><ul><li>intro: CMU &amp; Face++</li><li>arXiv: <a href="https://arxiv.org/abs/1809.08545" target="_blank" rel="noopener">https://arxiv.org/abs/1809.08545</a></li><li>github: <a href="https://github.com/yihui-he/softer-NMS" target="_blank" rel="noopener">https://github.com/yihui-he/softer-NMS</a></li></ul><h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><p><strong>Feature Selective Anchor-Free Module for Single-Shot Object Detection</strong></p><ul><li><p>intro: CVPR 2019</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1903.00621" target="_blank" rel="noopener">https://arxiv.org/abs/1903.00621</a></p></li></ul><p><strong>Object Detection based on Region Decomposition and Assembly</strong></p><ul><li><p>intro: AAAI 2019</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1901.08225" target="_blank" rel="noopener">https://arxiv.org/abs/1901.08225</a></p></li></ul><p><strong>Bottom-up Object Detection by Grouping Extreme and Center Points</strong></p><ul><li>intro: one stage 43.2% on COCO test-dev</li><li>arXiv: <a href="https://arxiv.org/abs/1901.08043" target="_blank" rel="noopener">https://arxiv.org/abs/1901.08043</a></li><li>github: <a href="https://github.com/xingyizhou/ExtremeNet" target="_blank" rel="noopener">https://github.com/xingyizhou/ExtremeNet</a></li></ul><p><strong>ORSIm Detector: A Novel Object Detection Framework in Optical Remote Sensing Imagery Using Spatial-Frequency Channel Features</strong></p><ul><li><p>intro: IEEE TRANSACTIONS ON GEOSCIENCE AND REMOTE SENSING</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1901.07925" target="_blank" rel="noopener">https://arxiv.org/abs/1901.07925</a></p></li></ul><p><strong>Consistent Optimization for Single-Shot Object Detection</strong></p><ul><li><p>intro: improves RetinaNet from 39.1 AP to 40.1 AP on COCO datase</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1901.06563" target="_blank" rel="noopener">https://arxiv.org/abs/1901.06563</a></p></li></ul><p><strong>Learning Pairwise Relationship for Multi-object Detection in Crowded Scenes</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1901.03796" target="_blank" rel="noopener">https://arxiv.org/abs/1901.03796</a></li></ul><p><strong>RetinaMask: Learning to predict masks improves state-of-the-art single-shot detection for free</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1901.03353" target="_blank" rel="noopener">https://arxiv.org/abs/1901.03353</a></li><li>github: <a href="https://github.com/chengyangfu/retinamask" target="_blank" rel="noopener">https://github.com/chengyangfu/retinamask</a></li></ul><p><strong>Region Proposal by Guided Anchoring</strong></p><ul><li>intro: CUHK - SenseTime Joint Lab</li><li>arXiv: <a href="https://arxiv.org/abs/1901.03278" target="_blank" rel="noopener">https://arxiv.org/abs/1901.03278</a></li></ul><p><strong>Scale-Aware Trident Networks for Object Detection</strong></p><ul><li>intro: mAP of <strong>48.4</strong> on the COCO dataset</li><li>arXiv: <a href="https://arxiv.org/abs/1901.01892" target="_blank" rel="noopener">https://arxiv.org/abs/1901.01892</a></li></ul><h2 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h2><p><strong>Large-Scale Object Detection of Images from Network Cameras in Variable Ambient Lighting Conditions</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.11901" target="_blank" rel="noopener">https://arxiv.org/abs/1812.11901</a></li></ul><p><strong>Strong-Weak Distribution Alignment for Adaptive Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.04798" target="_blank" rel="noopener">https://arxiv.org/abs/1812.04798</a></li></ul><p><strong>AutoFocus: Efficient Multi-Scale Inference</strong></p><ul><li>intro: AutoFocus obtains an <strong>mAP of 47.9%</strong> (68.3% at 50% overlap) on the <strong>COCO test-dev</strong> set while processing <strong>6.4 images per second on a Titan X (Pascal) GPU</strong> </li><li>arXiv: <a href="https://arxiv.org/abs/1812.01600" target="_blank" rel="noopener">https://arxiv.org/abs/1812.01600</a></li></ul><p><strong>NOTE-RCNN: NOise Tolerant Ensemble RCNN for Semi-Supervised Object Detection</strong></p><ul><li>intro: Google Could</li><li>arXiv: <a href="https://arxiv.org/abs/1812.00124" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00124</a></li></ul><p><strong>SPLAT: Semantic Pixel-Level Adaptation Transforms for Detection</strong></p><ul><li>intro: UC Berkeley</li><li>arXiv: <a href="https://arxiv.org/abs/1812.00929" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00929</a></li></ul><p><strong>Grid R-CNN</strong></p><ul><li>intro: SenseTime</li><li>arXiv: <a href="https://arxiv.org/abs/1811.12030" target="_blank" rel="noopener">https://arxiv.org/abs/1811.12030</a></li></ul><p><strong>Deformable ConvNets v2: More Deformable, Better Results</strong></p><ul><li><p>intro: Microsoft Research Asia</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1811.11168" target="_blank" rel="noopener">https://arxiv.org/abs/1811.11168</a></p></li></ul><p><strong>Anchor Box Optimization for Object Detection</strong></p><ul><li>intro: Microsoft Research</li><li>arXiv: <a href="https://arxiv.org/abs/1812.00469" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00469</a></li></ul><p><strong>Efficient Coarse-to-Fine Non-Local Module for the Detection of Small Objects</strong></p><ul><li>intro: <a href="https://arxiv.org/abs/1811.12152" target="_blank" rel="noopener">https://arxiv.org/abs/1811.12152</a></li></ul><p><strong>NOTE-RCNN: NOise Tolerant Ensemble RCNN for Semi-Supervised Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.00124" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00124</a></li></ul><p><strong>Learning RoI Transformer for Detecting Oriented Objects in Aerial Images</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.00155" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00155</a></li></ul><p><strong>Integrated Object Detection and Tracking with Tracklet-Conditioned Detection</strong></p><ul><li>intro: Microsoft Research Asia</li><li>arXiv: <a href="https://arxiv.org/abs/1811.11167" target="_blank" rel="noopener">https://arxiv.org/abs/1811.11167</a></li></ul><p><strong>Deep Regionlets: Blended Representation and Deep Learning for Generic Object Detection</strong></p><ul><li><p>arXiv: <a href="https://arxiv.org/abs/1811.11318" target="_blank" rel="noopener">https://arxiv.org/abs/1811.11318</a></p><p><strong>Gradient Harmonized Single-stage Detector</strong></p></li><li><p>intro: AAAI 2019</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1811.05181" target="_blank" rel="noopener">https://arxiv.org/abs/1811.05181</a></p></li></ul><p><strong>CFENet: Object Detection with Comprehensive Feature Enhancement Module</strong></p><ul><li>intro: ACCV 2018</li><li>github: <a href="https://github.com/qijiezhao/CFENet" target="_blank" rel="noopener">https://github.com/qijiezhao/CFENet</a></li></ul><p><strong>DeRPN: Taking a further step toward more general object detection</strong></p><ul><li>intro: AAAI 2019</li><li>arXiv: <a href="https://arxiv.org/abs/1811.06700" target="_blank" rel="noopener">https://arxiv.org/abs/1811.06700</a></li><li>github: <a href="https://github.com/HCIILAB/DeRPN" target="_blank" rel="noopener">https://github.com/HCIILAB/DeRPN</a></li></ul><p><strong>Hybrid Knowledge Routed Modules for Large-scale Object Detection</strong></p><ul><li>intro: Sun Yat-Sen University &amp; Huawei Noah’s Ark Lab</li><li>arXiv: <a href="https://arxiv.org/abs/1810.12681" target="_blank" rel="noopener">https://arxiv.org/abs/1810.12681</a></li><li>github: <a href="https://github.com/chanyn/HKRM" target="_blank" rel="noopener">https://github.com/chanyn/HKRM</a></li></ul><p><strong>《Receptive Field Block Net for Accurate and Fast Object Detection》</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1711.07767" target="_blank" rel="noopener">https://arxiv.org/abs/1711.07767</a></li><li>github: <a href="https://github.com/ruinmessi/RFBNet" target="_blank" rel="noopener">https://github.com/ruinmessi/RFBNet</a></li></ul><p><strong>Deep Feature Pyramid Reconfiguration for Object Detection</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1808.07993" target="_blank" rel="noopener">https://arxiv.org/abs/1808.07993</a></li></ul><p><strong>Unsupervised Hard Example Mining from Videos for Improved Object Detection</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1808.04285" target="_blank" rel="noopener">https://arxiv.org/abs/1808.04285</a></li></ul><p><strong>Acquisition of Localization Confidence for Accurate Object Detection</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1807.11590" target="_blank" rel="noopener">https://arxiv.org/abs/1807.11590</a></li><li>github: <a href="https://github.com/vacancy/PreciseRoIPooling" target="_blank" rel="noopener">https://github.com/vacancy/PreciseRoIPooling</a></li></ul><p><strong>Toward Scale-Invariance and Position-Sensitive Region Proposal Networks</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1807.09528" target="_blank" rel="noopener">https://arxiv.org/abs/1807.09528</a></li></ul><p><strong>MetaAnchor: Learning to Detect Objects with Customized Anchors</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1807.00980" target="_blank" rel="noopener">https://arxiv.org/abs/1807.00980</a></li></ul><p><strong>Relation Network for Object Detection</strong></p><ul><li>intro: CVPR 2018</li><li>arxiv: <a href="https://arxiv.org/abs/1711.11575" target="_blank" rel="noopener">https://arxiv.org/abs/1711.11575</a></li><li>github:<a href="https://github.com/msracver/Relation-Networks-for-Object-Detection" target="_blank" rel="noopener">https://github.com/msracver/Relation-Networks-for-Object-Detection</a></li></ul><p><strong>Quantization Mimic: Towards Very Tiny CNN for Object Detection</strong></p><ul><li>Tsinghua University1 &amp; The Chinese University of Hong Kong2 &amp;SenseTime3</li><li>arxiv: <a href="https://arxiv.org/abs/1805.02152" target="_blank" rel="noopener">https://arxiv.org/abs/1805.02152</a></li></ul><p><strong>Learning Rich Features for Image Manipulation Detection</strong></p><ul><li>intro: CVPR 2018 Camera Ready</li><li>arxiv: <a href="https://arxiv.org/abs/1805.04953" target="_blank" rel="noopener">https://arxiv.org/abs/1805.04953</a></li></ul><p><strong>SNIPER: Efficient Multi-Scale Training</strong></p><ul><li>arxiv:<a href="https://arxiv.org/abs/1805.09300" target="_blank" rel="noopener">https://arxiv.org/abs/1805.09300</a></li><li>github:<a href="https://github.com/mahyarnajibi/SNIPER" target="_blank" rel="noopener">https://github.com/mahyarnajibi/SNIPER</a></li></ul><p><strong>Soft Sampling for Robust Object Detection</strong></p><ul><li>intro: the robustness of object detection under the presence of missing annotations</li><li>arxiv:<a href="https://arxiv.org/abs/1806.06986" target="_blank" rel="noopener">https://arxiv.org/abs/1806.06986</a></li></ul><p><strong>Cost-effective Object Detection: Active Sample Mining with Switchable Selection Criteria</strong></p><ul><li>intro: TNNLS 2018</li><li>arxiv:<a href="https://arxiv.org/abs/1807.00147" target="_blank" rel="noopener">https://arxiv.org/abs/1807.00147</a></li><li>code: <a href="http://kezewang.com/codes/ASM_ver1.zip" target="_blank" rel="noopener">http://kezewang.com/codes/ASM_ver1.zip</a></li></ul><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p><strong>R3-Net: A Deep Network for Multi-oriented Vehicle Detection in Aerial Images and Videos</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1808.05560" target="_blank" rel="noopener">https://arxiv.org/abs/1808.05560</a></li><li>youtube: <a href="https://youtu.be/xCYD-tYudN0" target="_blank" rel="noopener">https://youtu.be/xCYD-tYudN0</a></li></ul><h1 id="Detection-Toolbox"><a href="#Detection-Toolbox" class="headerlink" title="Detection Toolbox"></a>Detection Toolbox</h1><ul><li><p><a href="https://github.com/facebookresearch/Detectron" target="_blank" rel="noopener">Detectron(FAIR)</a>: Detectron is Facebook AI Research’s software system that implements state-of-the-art object detection algorithms, including <a href="https://arxiv.org/abs/1703.06870" target="_blank" rel="noopener">Mask R-CNN</a>. It is written in Python and powered by the <a href="https://github.com/caffe2/caffe2" target="_blank" rel="noopener">Caffe2</a> deep learning framework.</p></li><li><p><a href="https://github.com/facebookresearch/maskrcnn-benchmark" target="_blank" rel="noopener">maskrcnn-benchmark(FAIR)</a>: Fast, modular reference implementation of Instance Segmentation and Object Detection algorithms in PyTorch.</p></li><li><p><a href="https://github.com/open-mmlab/mmdetection" target="_blank" rel="noopener">mmdetection(SenseTime&amp;CUHK)</a>: mmdetection is an open source object detection toolbox based on PyTorch. It is a part of the open-mmlab project developed by <a href="http://mmlab.ie.cuhk.edu.hk/" target="_blank" rel="noopener">Multimedia Laboratory, CUHK</a>.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Object-Detection&quot;&gt;&lt;a href=&quot;#Object-Detection&quot; class=&quot;headerlink&quot; title=&quot;Object-Detection&quot;&gt;&lt;/a&gt;Object-Detection&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h5 id=&quot;记录关于object-detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转CVPR-Latest-paper-learning&quot;&gt;&lt;a href=&quot;#记录关于object-detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转CVPR-Latest-paper-learning&quot; class=&quot;headerlink&quot; title=&quot;记录关于object detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转CVPR(Latest paper learning).&quot;&gt;&lt;/a&gt;记录关于object detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转&lt;a href=&quot;https://github.com/facebookresearch/Detectron&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CVPR(Latest paper learning)&lt;/a&gt;.&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;R-CNN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fast R-CNN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Faster R-CNN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mask R-CNN&lt;/p&gt;
    
    </summary>
    
      <category term="Computer-Vision" scheme="https://kaaier.github.io/categories/Computer-Vision/"/>
    
    
      <category term="Object-Detection" scheme="https://kaaier.github.io/tags/Object-Detection/"/>
    
      <category term="Computer-Vision" scheme="https://kaaier.github.io/tags/Computer-Vision/"/>
    
  </entry>
  
  <entry>
    <title>C++中STL总结</title>
    <link href="https://kaaier.github.io/2019/06/17/STL/"/>
    <id>https://kaaier.github.io/2019/06/17/STL/</id>
    <published>2019-06-17T01:21:20.000Z</published>
    <updated>2019-08-06T16:08:25.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><ul><li>容器（containers）</li><li>算法（algorithms）</li><li>迭代器（iterators）</li><li>仿函数（functors）</li><li>配接器（adapters）</li><li>空间配置器（allocator）</li></ul><h2 id="容器（containers）"><a href="#容器（containers）" class="headerlink" title="容器（containers）"></a>容器（containers）</h2><ul><li>序列式容器（sequence containers）：元素都是可序（ordered），但未必是有序（sorted）</li><li>关联式容器（associattive containers）<a id="more"></a><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3></li></ul><p>array是固定大小的顺序容器，它们保存了一个以严格的线性顺序排列的特定数量的元素。</p><p>在内部，一个数组除了它所包含的元素（甚至不是它的大小，它是一个模板参数，在编译时是固定的）以外不保存任何数据。存储大小与用语言括号语法（[]）声明的普通数组一样高效。这个类只是增加了一层成员函数和全局函数，所以数组可以作为标准容器使用。</p><p>与其他标准容器不同，数组具有固定的大小，并且不通过分配器管理其元素的分配：它们是封装固定大小数组元素的聚合类型。因此，他们不能动态地扩大或缩小。</p><p>零大小的数组是有效的，但是它们不应该被解除引用（成员的前面，后面和数据）。</p><p>与标准库中的其他容器不同，交换两个数组容器是一种线性操作，它涉及单独交换范围内的所有元素，这通常是相当低效的操作。另一方面，这允许迭代器在两个容器中的元素保持其原始容器关联。</p><p>数组容器的另一个独特特性是它们可以被当作元组对象来处理：array头部重载get函数来访问数组元素，就像它是一个元组，以及专门的tuple_size和tuple_element类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">size_t</span> <span class="title">N</span> &gt; <span class="title">class</span> <span class="title">array</span>;</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20160405225541788" alt></p><h4 id="array-begin"><a href="#array-begin" class="headerlink" title="array::begin"></a>array::begin</h4><p>返回指向数组容器中第一个元素的迭代器。</p><p><img src="https://i.stack.imgur.com/oa3EQ.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>, 5&gt; myarray = &#123;<span class="number">2</span>, <span class="number">16</span>, <span class="number">77</span>,<span class="number">34</span>, <span class="number">50</span>&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains:"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = myarray.begin(); it != myarray.end(); ++i)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 2 16 77 34 50</span><br></pre></td></tr></table></figure><h4 id="array-end"><a href="#array-end" class="headerlink" title="array::end"></a>array::end</h4><p>返回指向数组容器中最后一个元素之后的理论元素的迭代器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; myarray = &#123; <span class="number">5</span>, <span class="number">19</span>, <span class="number">77</span>, <span class="number">34</span>, <span class="number">99</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains:"</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> it = myarray.begin(); it != myarray.end(); ++it )</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 5 19 77 34 99</span><br></pre></td></tr></table></figure><h4 id="array-rbegin"><a href="#array-rbegin" class="headerlink" title="array::rbegin"></a>array::rbegin</h4><p>返回指向数组容器中最后一个元素的反向迭代器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      reverse_iterator rbegin（）<span class="keyword">noexcept</span>;</span><br><span class="line">const_reverse_iterator rbegin（）<span class="keyword">const</span> <span class="keyword">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,4&gt; myarray = &#123;<span class="number">4</span>, <span class="number">26</span>, <span class="number">80</span>, <span class="number">14</span>&#125; ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> rit = myarray.rbegin(); rit &lt; myarray.rend(); ++rit)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *rit;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 14 80 26 4</span><br></pre></td></tr></table></figure><h4 id="array-rend"><a href="#array-rend" class="headerlink" title="array::rend"></a>array::rend</h4><p>返回一个反向迭代器，指向数组中第一个元素之前的理论元素（这被认为是它的反向结束）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">reverse_iterator <span class="title">rend</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function">const_reverse_iterator <span class="title">rend</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,4&gt; myarray = &#123;<span class="number">4</span>, <span class="number">26</span>, <span class="number">80</span>, <span class="number">14</span>&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> rit = myarray.rbegin(); rit &lt; myarray.rend(); ++rit)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *rit;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 14 80 26 4</span><br></pre></td></tr></table></figure><h4 id="array-cbegin"><a href="#array-cbegin" class="headerlink" title="array::cbegin"></a>array::cbegin</h4><p>返回指向数组容器中第一个元素的常量迭代器（const_iterator）；这个迭代器可以增加和减少，但是不能用来修改它指向的内容。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const_iterator cbegin（）<span class="keyword">const</span> <span class="keyword">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; myarray = &#123;<span class="number">2</span>, <span class="number">16</span>, <span class="number">77</span>, <span class="number">34</span>, <span class="number">50</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> it = myarray.cbegin(); it != myarray.cend(); ++it )</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;   <span class="comment">// cannot modify *it</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 2 16 77 34 50</span><br></pre></td></tr></table></figure><h4 id="array-cend"><a href="#array-cend" class="headerlink" title="array::cend"></a>array::cend</h4><p>返回指向数组容器中最后一个元素之后的理论元素的常量迭代器（const_iterator）。这个迭代器可以增加和减少，但是不能用来修改它指向的内容。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">const_iterator <span class="title">cend</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; myarray = &#123; <span class="number">15</span>, <span class="number">720</span>, <span class="number">801</span>, <span class="number">1002</span>, <span class="number">3502</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains:"</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> it = myarray.cbegin(); it != myarray.cend(); ++it )</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;   <span class="comment">// cannot modify *it</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 2 16 77 34 50</span><br></pre></td></tr></table></figure><h4 id="array-crbegin"><a href="#array-crbegin" class="headerlink" title="array::crbegin"></a>array::crbegin</h4><p>返回指向数组容器中最后一个元素的常量反向迭代器（const_reverse_iterator）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const_reverse_iterator crbegin（）<span class="keyword">const</span> <span class="keyword">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,6&gt; myarray = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>&#125; ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray backwards:"</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> rit=myarray.crbegin() ; rit &lt; myarray.crend(); ++rit )</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *rit;   <span class="comment">// cannot modify *rit</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray backwards: 60 50 40 30 20 10</span><br></pre></td></tr></table></figure><h4 id="array-crend"><a href="#array-crend" class="headerlink" title="array::crend"></a>array::crend</h4><p>返回指向数组中第一个元素之前的理论元素的常量反向迭代器（const_reverse_iterator），它被认为是其反向结束。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">const_reverse_iterator <span class="title">crend</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,6&gt; myarray = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>&#125; ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray backwards:"</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> rit=myarray.crbegin() ; rit &lt; myarray.crend(); ++rit )</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *rit;   <span class="comment">// cannot modify *rit</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray backwards: 60 50 40 30 20 10</span><br></pre></td></tr></table></figure><h4 id="array-size"><a href="#array-size" class="headerlink" title="array::size"></a>array::size</h4><p>返回数组容器中元素的数量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> size_type size（）<span class="keyword">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; myints;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"size of myints:"</span> &lt;&lt; myints.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof(myints):"</span> &lt;&lt; <span class="keyword">sizeof</span>(myints) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Possible Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size of myints: 5</span><br><span class="line">sizeof(myints): 20</span><br></pre></td></tr></table></figure><h4 id="array-max-size"><a href="#array-max-size" class="headerlink" title="array::max_size"></a>array::max_size</h4><p>返回数组容器可容纳的最大元素数。数组对象的max_size与其size一样，始终等于用于实例化数组模板类的第二个模板参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">max_size</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,10&gt; myints;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"size of myints: "</span> &lt;&lt; myints.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"max_size of myints: "</span> &lt;&lt; myints.max_size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size of myints: 10</span><br><span class="line">max_size of myints: 10</span><br></pre></td></tr></table></figure><h4 id="array-empty"><a href="#array-empty" class="headerlink" title="array::empty"></a>array::empty</h4><p>返回一个布尔值，指示数组容器是否为空，即它的size()是否为0。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,0&gt; first;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; second;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"first "</span> &lt;&lt; (first.empty() ? <span class="string">"is empty"</span> : <span class="string">"is not empty"</span>) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"second "</span> &lt;&lt; (second.empty() ? <span class="string">"is empty"</span> : <span class="string">"is not empty"</span>) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first is empty</span><br><span class="line">second is not empt</span><br></pre></td></tr></table></figure><h4 id="array-operator"><a href="#array-operator" class="headerlink" title="array::operator[]"></a>array::operator[]</h4><p>返回数组中第n个位置的元素的引用。与array::at相似，但array::at会检查数组边界并通过抛出一个out_of_range异常来判断n是否超出范围，而array::operator[]不检查边界。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      reference <span class="keyword">operator</span>[] (size_type n);</span><br><span class="line">const_reference <span class="keyword">operator</span>[] (size_type n) <span class="keyword">const</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,10&gt; myarray;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assign some values:</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">        myarray[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print content</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains:"</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; myarray[i];</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><h4 id="array-at"><a href="#array-at" class="headerlink" title="array::at"></a>array::at</h4><p>返回数组中第n个位置的元素的引用。与array::operator[]相似，但array::at会检查数组边界并通过抛出一个out_of_range异常来判断n是否超出范围，而array::operator[]不检查边界。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">reference <span class="title">at</span> <span class="params">( size_type n )</span></span>;</span><br><span class="line"><span class="function">const_reference <span class="title">at</span> <span class="params">( size_type n )</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>, 10&gt; myarray;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// assign some values:</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">myarray[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// print content</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains:"</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; myarray.at(i);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><h4 id="array-front"><a href="#array-front" class="headerlink" title="array::front"></a>array::front</h4><p>返回对数组容器中第一个元素的引用。array::begin返回的是迭代器，array::front返回的是直接引用。<br>在空容器上调用此函数会导致未定义的行为。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">reference <span class="title">front</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">const_reference <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,3&gt; myarray = &#123;<span class="number">2</span>, <span class="number">16</span>, <span class="number">77</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"front is: "</span> &lt;&lt; myarray.front() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;   <span class="comment">// 2</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"back is: "</span> &lt;&lt; myarray.back() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;     <span class="comment">// 77</span></span><br><span class="line"></span><br><span class="line">  myarray.front() = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray now contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">int</span>&amp; x : myarray ) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">front is: 2</span><br><span class="line">back is: 77</span><br><span class="line">myarray now contains: 100 16 77</span><br></pre></td></tr></table></figure><h4 id="array-back"><a href="#array-back" class="headerlink" title="array::back"></a>array::back</h4><p>返回对数组容器中最后一个元素的引用。array::end返回的是迭代器，array::back返回的是直接引用。<br>在空容器上调用此函数会导致未定义的行为。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">reference <span class="title">back</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">const_reference <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,3&gt; myarray = &#123;<span class="number">5</span>, <span class="number">19</span>, <span class="number">77</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"front is: "</span> &lt;&lt; myarray.front() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;   <span class="comment">// 5</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"back is: "</span> &lt;&lt; myarray.back() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;     <span class="comment">// 77</span></span><br><span class="line"></span><br><span class="line">  myarray.back() = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray now contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">int</span>&amp; x : myarray ) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">front is: 5</span><br><span class="line">back is: 77</span><br><span class="line">myarray now contains: 5 19 50</span><br></pre></td></tr></table></figure><h4 id="array-data"><a href="#array-data" class="headerlink" title="array::data"></a>array::data</h4><p>返回指向数组对象中第一个元素的指针。</p><p>由于数组中的元素存储在连续的存储位置，所以检索到的指针可以偏移以访问数组中的任何元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">value_type* <span class="title">data</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> value_type* <span class="title">data</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* cstr = <span class="string">"Test string"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">char</span>,12&gt; charray;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">memcpy</span> (charray.data(),cstr,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; charray.data() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test string</span><br></pre></td></tr></table></figure><h4 id="array-fill"><a href="#array-fill" class="headerlink" title="array::fill"></a>array::fill</h4><p>用val填充数组所有元素，将val设置为数组对象中所有元素的值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span> <span class="params">(<span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,6&gt; myarray;</span><br><span class="line"></span><br><span class="line">  myarray.fill(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">int</span>&amp; x : myarray) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 5 5 5 5 5 5</span><br></pre></td></tr></table></figure><h4 id="array-swap"><a href="#array-swap" class="headerlink" title="array::swap"></a>array::swap</h4><p>通过x的内容交换数组的内容，这是另一个相同类型的数组对象（包括相同的大小）。</p><p>与其他容器的交换成员函数不同，此成员函数通过在各个元素之间执行与其大小相同的单独交换操作，以线性时间运行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span> <span class="params">(<span class="built_in">array</span>&amp; x)</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(swap(declval&lt;value_type&amp;&gt;(),declval&lt;value_type&amp;&gt;())))</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; first = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; second = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line"></span><br><span class="line">  first.swap (second);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"first:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x : first) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"second:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x : second) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first: 11 22 33 44 55</span><br><span class="line">second: 10 20 30 40 50</span><br></pre></td></tr></table></figure><h4 id="get（array）"><a href="#get（array）" class="headerlink" title="get（array）"></a>get（array）</h4><p>形如：std::get&lt;0&gt;(myarray)；传入一个数组容器，返回指定位置元素的引用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">size_t</span> I，<span class="class"><span class="keyword">class</span> <span class="title">T</span>，<span class="title">size_t</span> <span class="title">N</span>&gt; <span class="title">T</span>＆<span class="title">get</span>（<span class="title">array</span> &lt;T，N&gt;＆<span class="title">arr</span>）<span class="title">noexcept</span>;</span> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">size_t</span> I，<span class="class"><span class="keyword">class</span> <span class="title">T</span>，<span class="title">size_t</span> <span class="title">N</span>&gt; <span class="title">T</span> &amp;&amp; <span class="title">get</span>（<span class="title">array</span> &lt;T，N&gt; &amp;&amp; <span class="title">arr</span>）<span class="title">noexcept</span>;</span> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">size_t</span> I，<span class="class"><span class="keyword">class</span> <span class="title">T</span>，<span class="title">size_t</span> <span class="title">N</span>&gt; <span class="title">const</span> <span class="title">T</span>＆<span class="title">get</span>（<span class="title">const</span> <span class="title">array</span> &lt;T，N&gt;＆<span class="title">arr</span>）<span class="title">noexcept</span>;</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,3&gt; myarray = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mytuple (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::tuple_element&lt;<span class="number">0</span>,<span class="keyword">decltype</span>(myarray)&gt;::type myelement;  <span class="comment">// int myelement</span></span><br><span class="line"></span><br><span class="line">  myelement = <span class="built_in">std</span>::get&lt;<span class="number">2</span>&gt;(myarray);</span><br><span class="line">  <span class="built_in">std</span>::get&lt;<span class="number">2</span>&gt;(myarray) = <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(myarray);</span><br><span class="line">  <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(myarray) = myelement;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"first element in myarray: "</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(myarray) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"first element in mytuple: "</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(mytuple) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first element in myarray: 30</span><br><span class="line">first element in mytuple: 10</span><br></pre></td></tr></table></figure><h4 id="relational-operators-array"><a href="#relational-operators-array" class="headerlink" title="relational operators (array)"></a>relational operators (array)</h4><p>形如：arrayA != arrayB、arrayA &gt; arrayB；依此比较数组每个元素的大小关系。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>，<span class="title">size_T</span> <span class="title">N</span>&gt; </span></span><br><span class="line"><span class="class">  <span class="title">bool</span> <span class="title">operator</span> ==（<span class="title">const</span> <span class="title">array</span> &lt;T，N&gt;＆<span class="title">lhs</span>，<span class="title">const</span> <span class="title">array</span> &lt;T，N&gt;＆<span class="title">rhs</span>）;</span></span><br><span class="line">（<span class="number">2</span>）</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>，<span class="title">size_T</span> <span class="title">N</span>&gt; </span></span><br><span class="line"><span class="class">  <span class="title">bool</span> <span class="title">operator</span>！=（<span class="title">const</span> <span class="title">array</span> &lt;T，N&gt;＆<span class="title">lhs</span>，<span class="title">const</span> <span class="title">array</span> &lt;T，N&gt;＆<span class="title">rhs</span>）;</span></span><br><span class="line">（<span class="number">3</span>）</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>，<span class="title">size_T</span> <span class="title">N</span>&gt; </span></span><br><span class="line"><span class="class">  <span class="title">bool</span> <span class="title">operator</span> &lt;（const array &lt;T，N&gt;＆lhs，const array &lt;T，N&gt;＆rhs）;</span></span><br><span class="line"><span class="class">（4）</span></span><br><span class="line"><span class="class">template &lt;class T，size_T N&gt; </span></span><br><span class="line"><span class="class">  bool operator &lt;=（const array &lt;T，N&gt;＆lhs，const array &lt;T，N&gt;＆rhs）;</span></span><br><span class="line"><span class="class">（5）</span></span><br><span class="line"><span class="class">template &lt;class T，size_T N&gt; </span></span><br><span class="line"><span class="class">  bool operator&gt;（const array &lt;T，N&gt;＆lhs，const array &lt;T，N&gt;＆rhs）;</span></span><br><span class="line"><span class="class">（6）</span></span><br><span class="line"><span class="class">template &lt;class T，size_T N&gt; </span></span><br><span class="line"><span class="class">  bool operator&gt; =（<span class="title">const</span> <span class="title">array</span> &lt;T，N&gt;＆<span class="title">lhs</span>，<span class="title">const</span> <span class="title">array</span> &lt;T，N&gt;＆<span class="title">rhs</span>）;</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; a = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; b = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; c = &#123;<span class="number">50</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (a==b) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a and b are equal\n"</span>;</span><br><span class="line">  <span class="keyword">if</span> (b!=c) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"b and c are not equal\n"</span>;</span><br><span class="line">  <span class="keyword">if</span> (b&lt;c) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"b is less than c\n"</span>;</span><br><span class="line">  <span class="keyword">if</span> (c&gt;b) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"c is greater than b\n"</span>;</span><br><span class="line">  <span class="keyword">if</span> (a&lt;=b) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a is less than or equal to b\n"</span>;</span><br><span class="line">  <span class="keyword">if</span> (a&gt;=b) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a is greater than or equal to b\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a and b are equal</span><br><span class="line">b and c are not equal</span><br><span class="line">b is less than c</span><br><span class="line">c is greater than b</span><br><span class="line">a is less than or equal to b</span><br><span class="line">a is greater than or equal to b</span><br></pre></td></tr></table></figure><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>vector是表示可以改变大小的数组的序列容器。</p><p>就像数组一样，vector为它们的元素使用连续的存储位置，这意味着它们的元素也可以使用到其元素的常规指针上的偏移来访问，而且和数组一样高效。但是与数组不同的是，它们的大小可以动态地改变，它们的存储由容器自动处理。</p><p>在内部，vector使用一个动态分配的数组来存储它们的元素。这个数组可能需要重新分配，以便在插入新元素时增加大小，这意味着分配一个新数组并将所有元素移动到其中。就处理时间而言，这是一个相对昂贵的任务，因此每次将元素添加到容器时矢量都不会重新分配。</p><p>相反，vector容器可以分配一些额外的存储以适应可能的增长，并且因此容器可以具有比严格需要包含其元素（即，其大小）的存储更大的实际容量。库可以实现不同的策略的增长到内存使用和重新分配之间的平衡，但在任何情况下，再分配应仅在对数生长的间隔发生尺寸，使得在所述载体的末端各个元件的插入可以与提供分期常量时间复杂性。</p><p>因此，与数组相比，载体消耗更多的内存来交换管理存储和以有效方式动态增长的能力。</p><p>与其他动态序列容器（deques，lists和 forward_lists ）相比，vector非常有效地访问其元素（就像数组一样），并相对有效地从元素末尾添加或移除元素。对于涉及插入或移除除了结尾之外的位置的元素的操作，它们执行比其他位置更差的操作，并且具有比列表和 forward_lists 更不一致的迭代器和引用。</p><p>针对 vector 的各种常见操作的复杂度（效率）如下： </p><ul><li>随机访问 - 常数 O(1) </li><li>在尾部增删元素 - 平摊（amortized）常数 O(1)}} </li><li>增删元素 - 至 vector 尾部的线性距离 O(n)}}</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">allocator</span>&lt;T&gt; &gt; <span class="title">class</span> <span class="title">vector</span>;</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20160406151211233" alt></p><h4 id="vector-vector"><a href="#vector-vector" class="headerlink" title="vector::vector"></a>vector::vector</h4><p>（1）empty容器构造函数（默认构造函数）<br>构造一个空的容器，没有元素。<br>（2）fill构造函数<br>用n个元素构造一个容器。每个元素都是val的副本（如果提供）。<br>（3）范围（range）构造器<br>使用与[ range，first，last]范围内的元素相同的顺序构造一个容器，其中的每个元素都是emplace -从该范围内相应的元素构造而成。<br>（4）复制（copy）构造函数（并用分配器复制）<br>按照相同的顺序构造一个包含x中每个元素的副本的容器。<br>（5）移动（move）构造函数（和分配器移动）<br>构造一个获取x元素的容器。<br>如果指定了alloc并且与x的分配器不同，那么元素将被移动。否则，没有构建元素（他们的所有权直接转移）。<br>x保持未指定但有效的状态。<br>（6）初始化列表构造函数<br>构造一个容器中的每个元件中的一个拷贝的IL，以相同的顺序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> (<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">vector</span> <span class="params">(<span class="keyword">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class="line">fill (<span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">vector</span> <span class="params">(size_type n)</span></span>;</span><br><span class="line">         <span class="built_in">vector</span> (size_type n, <span class="keyword">const</span> value_type&amp; val,</span><br><span class="line">                 <span class="keyword">const</span> allocator_type&amp; alloc = allocator_type());</span><br><span class="line">range (<span class="number">3</span>)</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">vector</span> (<span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>,</span></span><br><span class="line"><span class="class">          <span class="title">const</span> <span class="title">allocator_type</span>&amp; <span class="title">alloc</span> = <span class="title">allocator_type</span>());</span></span><br><span class="line">copy (<span class="number">4</span>)</span><br><span class="line"><span class="built_in">vector</span> (<span class="keyword">const</span> <span class="built_in">vector</span>&amp; x);</span><br><span class="line"><span class="built_in">vector</span> (<span class="keyword">const</span> <span class="built_in">vector</span>&amp; x, <span class="keyword">const</span> allocator_type&amp; alloc);</span><br><span class="line">move (<span class="number">5</span>)</span><br><span class="line"><span class="built_in">vector</span> (<span class="built_in">vector</span>&amp;&amp; x);</span><br><span class="line"><span class="built_in">vector</span> (<span class="built_in">vector</span>&amp;&amp; x, <span class="keyword">const</span> allocator_type&amp; alloc);</span><br><span class="line"><span class="function">initializer <span class="title">list</span> <span class="params">(<span class="number">6</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">vector</span> <span class="params">(<span class="built_in">initializer_list</span>&lt;value_type&gt; il,</span></span></span><br><span class="line"><span class="function"><span class="params">       <span class="keyword">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// constructors used in the same order as described above:</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; first;             <span class="comment">// empty vector of ints</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; second(<span class="number">4</span>, <span class="number">100</span>);    <span class="comment">// four ints with value 100</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; third(second.begin(), second.end());<span class="comment">// iterating through second</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fourth(third);     <span class="comment">// a copy of third</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// the iterator constructor can also be used to construct from arrays:</span></span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123;<span class="number">16</span>,<span class="number">2</span>,<span class="number">77</span>,<span class="number">29</span>&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fifth(myints, myints + <span class="keyword">sizeof</span>(myints) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The contents of fifth are:"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = fifth.begin(); it != fifth.end(); ++it)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The contents of fifth are: 16 2 77 29</span><br></pre></td></tr></table></figure><h4 id="vector-vector-1"><a href="#vector-vector-1" class="headerlink" title="vector::~vector"></a>vector::~vector</h4><p>销毁容器对象。这将在每个包含的元素上调用allocator_traits::destroy，并使用其分配器释放由矢量分配的所有存储容量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="built_in">vector</span>();</span><br></pre></td></tr></table></figure><h4 id="vector-operator"><a href="#vector-operator" class="headerlink" title="vector::operator="></a>vector::operator=</h4><p>将新内容分配给容器，替换其当前内容，并相应地修改其大小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">copy (<span class="number">1</span>)</span><br><span class="line"><span class="built_in">vector</span>&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> <span class="built_in">vector</span>&amp; x);</span><br><span class="line">move (<span class="number">2</span>)</span><br><span class="line"><span class="built_in">vector</span>&amp; <span class="keyword">operator</span>= (<span class="built_in">vector</span>&amp;&amp; x);</span><br><span class="line"><span class="function">initializer <span class="title">list</span> <span class="params">(<span class="number">3</span>)</span></span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&amp; <span class="keyword">operator</span></span>= (<span class="built_in">initializer_list</span>&lt;value_type&gt; il);</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">  std::vector&lt;int&gt; foo (3,0);</span><br><span class="line">  std::vector&lt;int&gt; bar (5,0);</span><br><span class="line"></span><br><span class="line">  bar = foo;</span><br><span class="line">  foo = std::vector&lt;int&gt;();</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; &quot;Size of foo: &quot; &lt;&lt; int(foo.size()) &lt;&lt; &apos;\n&apos;;</span><br><span class="line">  std::cout &lt;&lt; &quot;Size of bar: &quot; &lt;&lt; int(bar.size()) &lt;&lt; &apos;\n&apos;;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Size of foo: 0</span><br><span class="line">Size of bar: 3</span><br></pre></td></tr></table></figure><h4 id="vector-begin"><a href="#vector-begin" class="headerlink" title="vector::begin"></a>vector::begin</h4><h4 id="vector-end"><a href="#vector-end" class="headerlink" title="vector::end"></a>vector::end</h4><h4 id="vector-rbegin"><a href="#vector-rbegin" class="headerlink" title="vector::rbegin"></a>vector::rbegin</h4><h4 id="vector-rend"><a href="#vector-rend" class="headerlink" title="vector::rend"></a>vector::rend</h4><h4 id="vector-cbegin"><a href="#vector-cbegin" class="headerlink" title="vector::cbegin"></a>vector::cbegin</h4><h4 id="vector-cend"><a href="#vector-cend" class="headerlink" title="vector::cend"></a>vector::cend</h4><h4 id="vector-rcbegin"><a href="#vector-rcbegin" class="headerlink" title="vector::rcbegin"></a>vector::rcbegin</h4><h4 id="vector-rcend"><a href="#vector-rcend" class="headerlink" title="vector::rcend"></a>vector::rcend</h4><h4 id="vector-size"><a href="#vector-size" class="headerlink" title="vector::size"></a>vector::size</h4><p>返回vector中元素的数量。</p><p>这是vector中保存的实际对象的数量，不一定等于其存储容量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myints;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"0. size: "</span> &lt;&lt; myints.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) myints.push_back(i);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1. size: "</span> &lt;&lt; myints.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  myints.insert (myints.end(),<span class="number">10</span>,<span class="number">100</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2. size: "</span> &lt;&lt; myints.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  myints.pop_back();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"3. size: "</span> &lt;&lt; myints.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0. size: 0</span><br><span class="line">1. size: 10</span><br><span class="line">2. size: 20</span><br><span class="line">3. size: 19</span><br></pre></td></tr></table></figure><h4 id="vector-max-size"><a href="#vector-max-size" class="headerlink" title="vector::max_size"></a>vector::max_size</h4><p>返回该vector可容纳的元素的最大数量。由于已知的系统或库实现限制，</p><p>这是容器可以达到的最大潜在大小，但容器无法保证能够达到该大小：在达到该大小之前的任何时间，仍然无法分配存储。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">max_size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set some content in the vector:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) myvector.push_back(i);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"size: "</span> &lt;&lt; myvector.size() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"capacity: "</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"max_size: "</span> &lt;&lt; myvector.max_size() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A possible output for this program could be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">size: 100</span><br><span class="line">capacity: 128</span><br><span class="line">max_size: 1073741823</span><br></pre></td></tr></table></figure><h4 id="vector-resize"><a href="#vector-resize" class="headerlink" title="vector::resize"></a>vector::resize</h4><p>调整容器的大小，使其包含n个元素。</p><p>如果n小于当前的容器size，内容将被缩小到前n个元素，将其删除（并销毁它们）。</p><p>如果n大于当前容器size，则通过在末尾插入尽可能多的元素以达到大小n来扩展内容。如果指定了val，则新元素将初始化为val的副本，否则将进行值初始化。</p><p>如果n也大于当前的容器的capacity（容量），分配的存储空间将自动重新分配。</p><p>注意这个函数通过插入或者删除元素的内容来改变容器的实际内容。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span> <span class="params">(size_type n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span> <span class="params">(size_type n, <span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set some initial content:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++) myvector.push_back(i);</span><br><span class="line"></span><br><span class="line">  myvector.resize(<span class="number">5</span>);</span><br><span class="line">  myvector.resize(<span class="number">8</span>,<span class="number">100</span>);</span><br><span class="line">  myvector.resize(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myvector contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;myvector.size();i++)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; myvector[i];</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0</span><br></pre></td></tr></table></figure><h4 id="vector-capacity"><a href="#vector-capacity" class="headerlink" title="vector::capacity"></a>vector::capacity</h4><p>返回当前为vector分配的存储空间的大小，用元素表示。这个capacity(容量)不一定等于vector的size。它可以相等或更大，额外的空间允许适应增长，而不需要重新分配每个插入。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">capacity</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set some content in the vector:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) myvector.push_back(i);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"size: "</span> &lt;&lt; (<span class="keyword">int</span>) myvector.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"capacity: "</span> &lt;&lt; (<span class="keyword">int</span>) myvector.capacity() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"max_size: "</span> &lt;&lt; (<span class="keyword">int</span>) myvector.max_size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A possible output for this program could be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">size: 100</span><br><span class="line">capacity: 128</span><br><span class="line">max_size: 1073741823</span><br></pre></td></tr></table></figure><h4 id="vector-empty"><a href="#vector-empty" class="headerlink" title="vector::empty"></a>vector::empty</h4><p>返回vector是否为空（即，它的size是否为0）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">sum</span> <span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++) myvector.push_back(i);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!myvector.empty())</span><br><span class="line">  &#123;</span><br><span class="line">     sum += myvector.back();</span><br><span class="line">     myvector.pop_back();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"total: "</span> &lt;&lt; sum &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total: 55</span><br></pre></td></tr></table></figure><h4 id="vector-reserve"><a href="#vector-reserve" class="headerlink" title="vector::reserve"></a>vector::reserve</h4><p>请求vector容量至少足以包含n个元素。</p><p>如果n大于当前vector容量，则该函数使容器重新分配其存储容量，从而将其容量增加到n（或更大）。</p><p>在所有其他情况下，函数调用不会导致重新分配，并且vector容量不受影响。</p><p>这个函数对vector大小没有影响，也不能改变它的元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reserve</span> <span class="params">(size_type n)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type sz;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; foo;</span><br><span class="line">  sz = foo.capacity();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"making foo grow:\n"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; ++i) &#123;</span><br><span class="line">    foo.push_back(i);</span><br><span class="line">    <span class="keyword">if</span> (sz!=foo.capacity()) &#123;</span><br><span class="line">      sz = foo.capacity();</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"capacity changed: "</span> &lt;&lt; sz &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bar;</span><br><span class="line">  sz = bar.capacity();</span><br><span class="line">  bar.reserve(<span class="number">100</span>);   <span class="comment">// this is the only difference with foo above</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"making bar grow:\n"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; ++i) &#123;</span><br><span class="line">    bar.push_back(i);</span><br><span class="line">    <span class="keyword">if</span> (sz!=bar.capacity()) &#123;</span><br><span class="line">      sz = bar.capacity();</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"capacity changed: "</span> &lt;&lt; sz &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Possible output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">making foo grow:</span><br><span class="line">capacity changed: 1</span><br><span class="line">capacity changed: 2</span><br><span class="line">capacity changed: 4</span><br><span class="line">capacity changed: 8</span><br><span class="line">capacity changed: 16</span><br><span class="line">capacity changed: 32</span><br><span class="line">capacity changed: 64</span><br><span class="line">capacity changed: 128</span><br><span class="line">making bar grow:</span><br><span class="line">capacity changed: 100</span><br></pre></td></tr></table></figure><h4 id="vector-shrink-to-fit"><a href="#vector-shrink-to-fit" class="headerlink" title="vector::shrink_to_fit"></a>vector::shrink_to_fit</h4><p>要求容器减小其capacity(容量)以适应其尺寸。</p><p>该请求是非绑定的，并且容器实现可以自由地进行优化，并且保持capacity大于其size的vector。 这可能导致重新分配，但对矢量大小没有影响，并且不能改变其元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shrink_to_fit</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector (<span class="number">100</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1. capacity of myvector: "</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  myvector.resize(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2. capacity of myvector: "</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  myvector.shrink_to_fit();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"3. capacity of myvector: "</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Possible output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. capacity of myvector: 100</span><br><span class="line">2. capacity of myvector: 100</span><br><span class="line">3. capacity of myvector: 10</span><br></pre></td></tr></table></figure><h4 id="vector-operator-1"><a href="#vector-operator-1" class="headerlink" title="vector::operator[]"></a>vector::operator[]</h4><h4 id="vector-at"><a href="#vector-at" class="headerlink" title="vector::at"></a>vector::at</h4><h4 id="vector-front"><a href="#vector-front" class="headerlink" title="vector::front"></a>vector::front</h4><h4 id="vector-back"><a href="#vector-back" class="headerlink" title="vector::back"></a>vector::back</h4><h4 id="vector-data"><a href="#vector-data" class="headerlink" title="vector::data"></a>vector::data</h4><h4 id="vector-assign"><a href="#vector-assign" class="headerlink" title="vector::assign"></a>vector::assign</h4><p>将新内容分配给vector，替换其当前内容，并相应地修改其大小。</p><p>在范围版本（1）中，新内容是从第一个和最后一个范围内的每个元素按相同顺序构造的元素。</p><p>在填充版本（2）中，新内容是n个元素，每个元素都被初始化为一个val的副本。</p><p>在初始化列表版本（3）中，新内容是以相同顺序作为初始化列表传递的值的副本。</p><p>所述内部分配器被用于（通过其性状），以分配和解除分配存储器如果重新分配发生。它也习惯于摧毁所有现有的元素，并构建新的元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">range (<span class="number">1</span>)</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">assign</span> (<span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>);</span></span><br><span class="line">fill (<span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span> <span class="params">(size_type n, <span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br><span class="line"><span class="function">initializer <span class="title">list</span> <span class="params">(<span class="number">3</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span> <span class="params">(<span class="built_in">initializer_list</span>&lt;value_type&gt; il)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; first;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; second;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; third;</span><br><span class="line"></span><br><span class="line">  first.assign (<span class="number">7</span>,<span class="number">100</span>);             <span class="comment">// 7 ints with a value of 100</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">  it=first.begin()+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  second.assign (it,first.end()<span class="number">-1</span>); <span class="comment">// the 5 central values of first</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> myints[] = &#123;<span class="number">1776</span>,<span class="number">7</span>,<span class="number">4</span>&#125;;</span><br><span class="line">  third.assign (myints,myints+<span class="number">3</span>);   <span class="comment">// assigning from array.</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Size of first: "</span> &lt;&lt; <span class="keyword">int</span> (first.size()) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Size of second: "</span> &lt;&lt; <span class="keyword">int</span> (second.size()) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Size of third: "</span> &lt;&lt; <span class="keyword">int</span> (third.size()) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Size of first: 7</span><br><span class="line">Size of second: 5</span><br><span class="line">Size of third: 3</span><br></pre></td></tr></table></figure><p>补充：vector::assign 与 vector::operator= 的区别：</p><ol><li>vector::assign 实现源码</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(size_type __n, <span class="keyword">const</span> _Tp&amp; __val)</span> </span>&#123; _M_fill_assign(__n, __val); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">vector</span>&lt;_Tp, _Alloc&gt;:</span>:_M_fill_assign(<span class="keyword">size_t</span> __n, <span class="keyword">const</span> value_type&amp; __val) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (__n &gt; capacity()) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;_Tp, _Alloc&gt; __tmp(__n, __val, get_allocator());</span><br><span class="line">    __tmp.swap(*<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (__n &gt; size()) &#123;</span><br><span class="line">    fill(begin(), end(), __val);</span><br><span class="line">    _M_finish = uninitialized_fill_n(_M_finish, __n - size(), __val);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    erase(fill_n(begin(), __n, __val), end());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>vector::operator= 实现源码</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">vector</span>&lt;_Tp,_Alloc&gt;&amp; </span></span><br><span class="line"><span class="class"><span class="title">vector</span>&lt;_Tp,_Alloc&gt;:</span>:<span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;_Tp, _Alloc&gt;&amp; __x)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (&amp;__x != <span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> size_type __xlen = __x.size();</span><br><span class="line">    <span class="keyword">if</span> (__xlen &gt; capacity()) &#123;</span><br><span class="line">      iterator __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end());</span><br><span class="line">      destroy(_M_start, _M_finish);</span><br><span class="line">      _M_deallocate(_M_start, _M_end_of_storage - _M_start);</span><br><span class="line">      _M_start = __tmp;</span><br><span class="line">      _M_end_of_storage = _M_start + __xlen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (size() &gt;= __xlen) &#123;</span><br><span class="line">      iterator __i = copy(__x.begin(), __x.end(), begin());</span><br><span class="line">      destroy(__i, _M_finish);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      copy(__x.begin(), __x.begin() + size(), _M_start);</span><br><span class="line">      uninitialized_copy(__x.begin() + size(), __x.end(), _M_finish);</span><br><span class="line">    &#125;</span><br><span class="line">    _M_finish = _M_start + __xlen;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vector-push-back"><a href="#vector-push-back" class="headerlink" title="vector::push_back"></a>vector::push_back</h4><p>在vector的最后一个元素之后添加一个新元素。val的内容被复制（或移动）到新的元素。</p><p>这有效地将容器size增加了一个，如果新的矢量size超过了当前vector的capacity，则导致所分配的存储空间自动重新分配。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span> <span class="params">(<span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span> <span class="params">(value_type&amp;&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line">  <span class="keyword">int</span> myint;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter some integers (enter 0 to end):\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; myint;</span><br><span class="line">    myvector.push_back (myint);</span><br><span class="line">  &#125; <span class="keyword">while</span> (myint);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myvector stores "</span> &lt;&lt; <span class="keyword">int</span>(myvector.size()) &lt;&lt; <span class="string">" numbers.\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vector-pop-back"><a href="#vector-pop-back" class="headerlink" title="vector::pop_back"></a>vector::pop_back</h4><p>删除vector中的最后一个元素，有效地将容器size减少一个。</p><p>这破坏了被删除的元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">sum</span> <span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">  myvector.push_back (<span class="number">100</span>);</span><br><span class="line">  myvector.push_back (<span class="number">200</span>);</span><br><span class="line">  myvector.push_back (<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!myvector.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    sum+=myvector.back();</span><br><span class="line">    myvector.pop_back();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The elements of myvector add up to "</span> &lt;&lt; sum &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The elements of myvector add up to 600</span><br></pre></td></tr></table></figure><h4 id="vector-insert"><a href="#vector-insert" class="headerlink" title="vector::insert"></a>vector::insert</h4><p>通过在指定位置的元素之前插入新元素来扩展该vector，通过插入元素的数量有效地增加容器大小。 这会导致分配的存储空间自动重新分配，只有在新的vector的size超过当前的vector的capacity的情况下。 </p><p>由于vector使用数组作为其基础存储，因此除了将元素插入到vector末尾之后，或vector的begin之前，其他位置会导致容器重新定位位置之后的所有元素到他们的新位置。与其他种类的序列容器（例如list或forward_list）执行相同操作的操作相比，这通常是低效的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">single <span class="title">element</span> <span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span> <span class="params">(const_iterator position, <span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br><span class="line">fill (<span class="number">2</span>)</span><br><span class="line"><span class="function">iterator <span class="title">insert</span> <span class="params">(const_iterator position, size_type n, <span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br><span class="line">range (<span class="number">3</span>)</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">iterator</span> <span class="title">insert</span> (<span class="title">const_iterator</span> <span class="title">position</span>, <span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>);</span></span><br><span class="line">move (<span class="number">4</span>)</span><br><span class="line"><span class="function">iterator <span class="title">insert</span> <span class="params">(const_iterator position, value_type&amp;&amp; val)</span></span>;</span><br><span class="line"><span class="function">initializer <span class="title">list</span> <span class="params">(<span class="number">5</span>)</span></span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span> <span class="params">(const_iterator position, <span class="built_in">initializer_list</span>&lt;value_type&gt; il)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector (<span class="number">3</span>,<span class="number">100</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">  it = myvector.begin();</span><br><span class="line">  it = myvector.insert ( it , <span class="number">200</span> );</span><br><span class="line"></span><br><span class="line">  myvector.insert (it,<span class="number">2</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// "it" no longer valid, get a new one:</span></span><br><span class="line">  it = myvector.begin();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; anothervector (<span class="number">2</span>,<span class="number">400</span>);</span><br><span class="line">  myvector.insert (it+<span class="number">2</span>,anothervector.begin(),anothervector.end());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> myarray [] = &#123; <span class="number">501</span>,<span class="number">502</span>,<span class="number">503</span> &#125;;</span><br><span class="line">  myvector.insert (myvector.begin(), myarray, myarray+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myvector contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (it=myvector.begin(); it&lt;myvector.end(); it++)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvector contains: 501 502 503 300 300 400 400 200 100 100 100</span><br></pre></td></tr></table></figure><p>补充：insert 迭代器野指针错误：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator vi;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取vector第一个元素的迭代器</span></span><br><span class="line">vi = v.begin();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// push_back 插入元素之后可能会因为 push_back 的骚操作（创建一个新vector把旧vector的值复制到新vector），导致vector迭代器iterator的指针变成野指针，而导致insert出错</span></span><br><span class="line">v.push_back(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">v.insert(vi, <span class="number">2</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改正：应该把<code>vi = v.begin();</code>放到<code>v.push_back(10);</code>后面</p><h4 id="vector-erase"><a href="#vector-erase" class="headerlink" title="vector::erase"></a>vector::erase</h4><p>从vector中删除单个元素（position）或一系列元素（[first，last））。</p><p>这有效地减少了被去除的元素的数量，从而破坏了容器的大小。</p><p>由于vector使用一个数组作为其底层存储，所以删除除vector结束位置之后，或vector的begin之前的元素外，将导致容器将段被擦除后的所有元素重新定位到新的位置。与其他种类的序列容器（例如list或forward_list）执行相同操作的操作相比，这通常是低效的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">(const_iterator position)</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">(const_iterator first, const_iterator last)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set some values (from 1 to 10)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++) myvector.push_back(i);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// erase the 6th element</span></span><br><span class="line">  myvector.erase (myvector.begin()+<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// erase the first 3 elements:</span></span><br><span class="line">  myvector.erase (myvector.begin(),myvector.begin()+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myvector contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> i=<span class="number">0</span>; i&lt;myvector.size(); ++i)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; myvector[i];</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvector contains: 4 5 7 8 9 10</span><br></pre></td></tr></table></figure><h4 id="vector-swap"><a href="#vector-swap" class="headerlink" title="vector::swap"></a>vector::swap</h4><p>通过x的内容交换容器的内容，x是另一个相同类型的vector对象。尺寸可能不同。</p><p>在调用这个成员函数之后，这个容器中的元素是那些在调用之前在x中的元素，而x的元素是在这个元素中的元素。所有迭代器，引用和指针对交换对象保持有效。</p><p>请注意，非成员函数存在具有相同名称的交换，并使用与此成员函数相似的优化来重载该算法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span> <span class="params">(<span class="built_in">vector</span>&amp; x)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; foo (<span class="number">3</span>,<span class="number">100</span>);   <span class="comment">// three ints with a value of 100</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bar (<span class="number">5</span>,<span class="number">200</span>);   <span class="comment">// five ints with a value of 200</span></span><br><span class="line"></span><br><span class="line">  foo.swap(bar);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"foo contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> i=<span class="number">0</span>; i&lt;foo.size(); i++)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; foo[i];</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"bar contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> i=<span class="number">0</span>; i&lt;bar.size(); i++)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; bar[i];</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo contains: 200 200 200 200 200 </span><br><span class="line">bar contains: 100 100 100</span><br></pre></td></tr></table></figure><h4 id="vector-clear"><a href="#vector-clear" class="headerlink" title="vector::clear"></a>vector::clear</h4><p>从vector中删除所有的元素（被销毁），留下size为0的容器。</p><p>不保证重新分配，并且由于调用此函数， vector的capacity不保证发生变化。强制重新分配的典型替代方法是使用swap：<code>vector&lt;T&gt;().swap(x);   // clear x reallocating</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = v.begin(); it != v.end(); ++it)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1(<span class="number">5</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">printVector(v1);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"v1 size  = "</span> &lt;&lt; v1.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"v1 capacity  = "</span> &lt;&lt; v1.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">v1.clear();</span><br><span class="line"></span><br><span class="line">printVector(v1);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"v1 size  = "</span> &lt;&lt; v1.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"v1 capacity  = "</span> &lt;&lt; v1.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">v1.push_back(<span class="number">11</span>);</span><br><span class="line">v1.push_back(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">printVector(v1);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"v1 size  = "</span> &lt;&lt; v1.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"v1 capacity  = "</span> &lt;&lt; v1.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">50 50 50 50 50</span><br><span class="line">v1 size  = 5</span><br><span class="line">v1 capacity  = 5</span><br><span class="line"></span><br><span class="line">v1 size  = 0</span><br><span class="line">v1 capacity  = 5</span><br><span class="line">11 22</span><br><span class="line">v1 size  = 2</span><br><span class="line">v1 capacity  = 5</span><br></pre></td></tr></table></figure><h4 id="vector-emplace"><a href="#vector-emplace" class="headerlink" title="vector::emplace"></a>vector::emplace</h4><p>通过在position位置处插入新元素args来扩展容器。这个新元素是用args作为构建的参数来构建的。</p><p>这有效地增加了一个容器的大小。</p><p>分配存储空间的自动重新分配发生在新的vector的size超过当前向量容量的情况下。</p><p>由于vector使用数组作为其基础存储，因此除了将元素插入到vector末尾之后，或vector的begin之前，其他位置会导致容器重新定位位置之后的所有元素到他们的新位置。与其他种类的序列容器（例如list或forward_list）执行相同操作的操作相比，这通常是低效的操作。</p><p>该元素是通过调用allocator_traits::construct来转换args来创建的。插入一个类似的成员函数，将现有对象复制或移动到容器中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">iterator</span> <span class="title">emplace</span> (<span class="title">const_iterator</span> <span class="title">position</span>, <span class="title">Args</span>&amp;&amp;... <span class="title">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> it = myvector.emplace ( myvector.begin()+<span class="number">1</span>, <span class="number">100</span> );</span><br><span class="line">  myvector.emplace ( it, <span class="number">200</span> );</span><br><span class="line">  myvector.emplace ( myvector.end(), <span class="number">300</span> );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myvector contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x: myvector)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvector contains: 10 200 100 20 30 300</span><br></pre></td></tr></table></figure><h4 id="vector-emplace-back"><a href="#vector-emplace-back" class="headerlink" title="vector::emplace_back"></a>vector::emplace_back</h4><p>在vector的末尾插入一个新的元素，紧跟在当前的最后一个元素之后。这个新元素是用args作为构造函数的参数来构造的。</p><p>这有效地将容器大小增加了一个，如果新的矢量大小超过了当前的vector容量，则导致所分配的存储空间自动重新分配。</p><p>该元素是通过调用allocator_traits :: construct来转换args来创建的。</p><p>与push_back相比，emplace_back可以避免额外的复制和移动操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">emplace_back</span> (<span class="title">Args</span>&amp;&amp;... <span class="title">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">President</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> country;</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line"> </span><br><span class="line">    President(<span class="built_in">std</span>::<span class="built_in">string</span> p_name, <span class="built_in">std</span>::<span class="built_in">string</span> p_country, <span class="keyword">int</span> p_year)</span><br><span class="line">        : name(<span class="built_in">std</span>::move(p_name)), country(<span class="built_in">std</span>::move(p_country)), year(p_year)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"I am being constructed.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    President(President&amp;&amp; other)</span><br><span class="line">        : name(<span class="built_in">std</span>::move(other.name)), country(<span class="built_in">std</span>::move(other.country)), year(other.year)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"I am being moved.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    President&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> President&amp; other) = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;President&gt; elections;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"emplace_back:\n"</span>;</span><br><span class="line">    elections.emplace_back(<span class="string">"Nelson Mandela"</span>, <span class="string">"South Africa"</span>, <span class="number">1994</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;President&gt; reElections;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\npush_back:\n"</span>;</span><br><span class="line">    reElections.push_back(President(<span class="string">"Franklin Delano Roosevelt"</span>, <span class="string">"the USA"</span>, <span class="number">1936</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\nContents:\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (President <span class="keyword">const</span>&amp; president: elections) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; president.name &lt;&lt; <span class="string">" was elected president of "</span></span><br><span class="line">                  &lt;&lt; president.country &lt;&lt; <span class="string">" in "</span> &lt;&lt; president.year &lt;&lt; <span class="string">".\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (President <span class="keyword">const</span>&amp; president: reElections) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; president.name &lt;&lt; <span class="string">" was re-elected president of "</span></span><br><span class="line">                  &lt;&lt; president.country &lt;&lt; <span class="string">" in "</span> &lt;&lt; president.year &lt;&lt; <span class="string">".\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">emplace_back:</span><br><span class="line">I am being constructed.</span><br><span class="line"> </span><br><span class="line">push_back:</span><br><span class="line">I am being constructed.</span><br><span class="line">I am being moved.</span><br><span class="line"> </span><br><span class="line">Contents:</span><br><span class="line">Nelson Mandela was elected president of South Africa in 1994.</span><br><span class="line">Franklin Delano Roosevelt was re-elected president of the USA in 1936.</span><br></pre></td></tr></table></figure><h4 id="vector-get-allocator"><a href="#vector-get-allocator" class="headerlink" title="vector::get_allocator"></a>vector::get_allocator</h4><p>返回与vector关联的构造器对象的副本。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">allocator_type <span class="title">get_allocator</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line">  <span class="keyword">int</span> * p;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// allocate an array with space for 5 elements using vector's allocator:</span></span><br><span class="line">  p = myvector.get_allocator().allocate(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// construct values in-place on the array:</span></span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) myvector.get_allocator().construct(&amp;p[i],i);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The allocated array contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; p[i];</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// destroy and deallocate:</span></span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) myvector.get_allocator().destroy(&amp;p[i]);</span><br><span class="line">  myvector.get_allocator().deallocate(p,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The allocated array contains: 0 1 2 3 4</span><br></pre></td></tr></table></figure><p>注意：deallocate和destory的关系：</p><p>deallocate实现的源码：</p><pre><code>template &lt;class T&gt;inline void _deallocate(T* buffer){    ::operator delete(buffer);    //为什么不用 delete [] ?  ,operator delete 区别于 delete                                  //operator delete  是一个底层操作符}</code></pre><p>destory：</p><pre><code>template &lt;class T&gt;inline void _destory(T *ptr){    ptr-&gt;~T();}</code></pre><p>destory负责调用类型的析构函数，销毁相应内存上的内容（但销毁后内存地址仍保留）</p><p>deallocate负责释放内存（此时相应内存中的值在此之前应调用destory销毁，将内存地址返回给系统，代表这部分地址使用引用-1）</p><h4 id="relational-operators-vector"><a href="#relational-operators-vector" class="headerlink" title="relational operators (vector)"></a>relational operators (vector)</h4><h4 id="swap-vector"><a href="#swap-vector" class="headerlink" title="swap (vector)"></a>swap (vector)</h4><h4 id="vector-1"><a href="#vector-1" class="headerlink" title="vector "></a>vector <bool></bool></h4><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>deque（[‘dek]）（双端队列）是double-ended queue 的一个不规则缩写。deque是具有动态大小的序列容器，可以在两端（前端或后端）扩展或收缩。</p><p>特定的库可以以不同的方式实现deques，通常作为某种形式的动态数组。但是在任何情况下，它们都允许通过随机访问迭代器直接访问各个元素，通过根据需要扩展和收缩容器来自动处理存储。</p><p>因此，它们提供了类似于vector的功能，但是在序列的开始部分也可以高效地插入和删除元素，而不仅仅是在结尾。但是，与vector不同，deques并不保证将其所有元素存储在连续的存储位置：deque通过偏移指向另一个元素的指针访问元素会导致未定义的行为。</p><p>两个vector和deques提供了一个非常相似的接口，可以用于类似的目的，但内部工作方式完全不同：虽然vector使用单个数组需要偶尔重新分配以增长，但是deque的元素可以分散在不同的块的容器，容器在内部保存必要的信息以提供对其任何元素的持续时间和统一的顺序接口（通过迭代器）的直接访问。因此，deques在内部比vector更复杂一点，但是这使得他们在某些情况下更有效地增长，尤其是在重新分配变得更加昂贵的很长序列的情况下。</p><p>对于频繁插入或删除开始或结束位置以外的元素的操作，deques表现得更差，并且与列表和转发列表相比，迭代器和引用的一致性更低。</p><p>deque上常见操作的复杂性（效率）如下： </p><ul><li>随机访问 - 常数O(1) </li><li>在结尾或开头插入或移除元素 - 摊销不变O(1) </li><li>插入或移除元素 - 线性O(n)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">allocator</span>&lt;T&gt; &gt; <span class="title">class</span> <span class="title">deque</span>;</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="http://img.blog.csdn.net/20170727225856144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRlg2Nzc1ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br><img src="https://images0.cnblogs.com/blog/559453/201401/092150340824.png" alt></p><h4 id="deque-deque"><a href="#deque-deque" class="headerlink" title="deque::deque"></a>deque::deque</h4><p>构造一个deque容器对象，根据所使用的构造函数版本初始化它的内容：</p><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// constructors used in the same order as described above:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; first;                                <span class="comment">// empty deque of ints</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; second (<span class="number">4</span>,<span class="number">100</span>);                       <span class="comment">// four ints with value 100</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; third (second.begin(),second.end());  <span class="comment">// iterating through second</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; fourth (third);                       <span class="comment">// a copy of third</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// the iterator constructor can be used to copy arrays:</span></span><br><span class="line">  <span class="keyword">int</span> myints[] = &#123;<span class="number">16</span>,<span class="number">2</span>,<span class="number">77</span>,<span class="number">29</span>&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; fifth (myints, myints + <span class="keyword">sizeof</span>(myints) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>) );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The contents of fifth are:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator it = fifth.begin(); it!=fifth.end(); ++it)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The contents of fifth are: 16 2 77 29</span><br></pre></td></tr></table></figure><h4 id="deque-push-back"><a href="#deque-push-back" class="headerlink" title="deque::push_back"></a>deque::push_back</h4><p>在当前的最后一个元素之后 ，在deque容器的末尾添加一个新元素。val的内容被复制（或移动）到新的元素。</p><p>这有效地增加了一个容器的大小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span> <span class="params">(<span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span> <span class="params">(value_type&amp;&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; mydeque;</span><br><span class="line">  <span class="keyword">int</span> myint;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter some integers (enter 0 to end):\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; myint;</span><br><span class="line">    mydeque.push_back (myint);</span><br><span class="line">  &#125; <span class="keyword">while</span> (myint);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mydeque stores "</span> &lt;&lt; (<span class="keyword">int</span>) mydeque.size() &lt;&lt; <span class="string">" numbers.\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="deque-push-front"><a href="#deque-push-front" class="headerlink" title="deque::push_front"></a>deque::push_front</h4><p>在deque容器的开始位置插入一个新的元素，位于当前的第一个元素之前。val的内容被复制（或移动）到插入的元素。</p><p>这有效地增加了一个容器的大小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_front</span> <span class="params">(<span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_front</span> <span class="params">(value_type&amp;&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; mydeque (<span class="number">2</span>,<span class="number">100</span>);     <span class="comment">// two ints with a value of 100</span></span><br><span class="line">  mydeque.push_front (<span class="number">200</span>);</span><br><span class="line">  mydeque.push_front (<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mydeque contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator it = mydeque.begin(); it != mydeque.end(); ++it)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">300 200 100 100</span><br></pre></td></tr></table></figure><h4 id="deque-pop-back"><a href="#deque-pop-back" class="headerlink" title="deque::pop_back"></a>deque::pop_back</h4><p>删除deque容器中的最后一个元素，有效地将容器大小减少一个。</p><p>这破坏了被删除的元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; mydeque;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">sum</span> <span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">  mydeque.push_back (<span class="number">10</span>);</span><br><span class="line">  mydeque.push_back (<span class="number">20</span>);</span><br><span class="line">  mydeque.push_back (<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!mydeque.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    sum+=mydeque.back();</span><br><span class="line">    mydeque.pop_back();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The elements of mydeque add up to "</span> &lt;&lt; sum &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The elements of mydeque add up to 60</span><br></pre></td></tr></table></figure><h4 id="deque-pop-front"><a href="#deque-pop-front" class="headerlink" title="deque::pop_front"></a>deque::pop_front</h4><p>删除deque容器中的第一个元素，有效地减小其大小。</p><p>这破坏了被删除的元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_front</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; mydeque;</span><br><span class="line"></span><br><span class="line">  mydeque.push_back (<span class="number">100</span>);</span><br><span class="line">  mydeque.push_back (<span class="number">200</span>);</span><br><span class="line">  mydeque.push_back (<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Popping out the elements in mydeque:"</span>;</span><br><span class="line">  <span class="keyword">while</span> (!mydeque.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; mydeque.front();</span><br><span class="line">    mydeque.pop_front();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\nThe final size of mydeque is "</span> &lt;&lt; <span class="keyword">int</span>(mydeque.size()) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Popping out the elements in mydeque: 100 200 300</span><br><span class="line">The final size of mydeque is 0</span><br></pre></td></tr></table></figure><h4 id="deque-emplace-front"><a href="#deque-emplace-front" class="headerlink" title="deque::emplace_front"></a>deque::emplace_front</h4><p>在deque的开头插入一个新的元素，就在其当前的第一个元素之前。这个新的元素是用args作为构建的参数来构建的。</p><p>这有效地增加了一个容器的大小。</p><p>该元素是通过调用allocator_traits::construct来转换args来创建的。</p><p>存在一个类似的成员函数push_front，它可以将现有对象复制或移动到容器中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">emplace_front</span> (<span class="title">Args</span>&amp;&amp;... <span class="title">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; mydeque = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line">  mydeque.emplace_front (<span class="number">111</span>);</span><br><span class="line">  mydeque.emplace_front (<span class="number">222</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mydeque contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x: mydeque)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mydeque contains: 222 111 10 20 30</span><br></pre></td></tr></table></figure><h4 id="deque-emplace-back"><a href="#deque-emplace-back" class="headerlink" title="deque::emplace_back"></a>deque::emplace_back</h4><p>在deque的末尾插入一个新的元素，紧跟在当前的最后一个元素之后。这个新的元素是用args作为构建的参数来构建的。</p><p>这有效地增加了一个容器的大小。</p><p>该元素是通过调用allocator_traits::construct来转换args来创建的。</p><p>存在一个类似的成员函数push_back，它可以将现有对象复制或移动到容器中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">emplace_back</span> (<span class="title">Args</span>&amp;&amp;... <span class="title">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; mydeque = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line">  mydeque.emplace_back (<span class="number">100</span>);</span><br><span class="line">  mydeque.emplace_back (<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mydeque contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x: mydeque)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mydeque contains: 10 20 30 100 200</span><br></pre></td></tr></table></figure><h3 id="forward-list"><a href="#forward-list" class="headerlink" title="forward_list"></a>forward_list</h3><p>forward_list（单向链表）是序列容器，允许在序列中的任何地方进行恒定的时间插入和擦除操作。</p><p>forward_list（单向链表）被实现为单链表; 单链表可以将它们包含的每个元素存储在不同和不相关的存储位置中。通过关联到序列中下一个元素的链接的每个元素来保留排序。forward_list容器和列表</p><p>之间的主要设计区别容器是第一个内部只保留一个到下一个元素的链接，而后者每个元素保留两个链接：一个指向下一个元素，一个指向前一个元素，允许在两个方向上有效的迭代，但是每个元素消耗额外的存储空间并且插入和移除元件的时间开销略高。因此，forward_list对象比列表对象更有效率，尽管它们只能向前迭代。</p><p>与其他基本的标准序列容器（array，vector和deque），forward_list通常在插入，提取和移动容器内任何位置的元素方面效果更好，因此也适用于密集使用这些元素的算法，如排序算法。</p><p>的主要缺点修饰符Modifiers S和列表相比这些其它序列容器s是说，他们缺乏可以通过位置的元素的直接访问; 例如，要访问forward_list中的第六个元素，必须从开始位置迭代到该位置，这需要在这些位置之间的线性时间。它们还消耗一些额外的内存来保持与每个元素相关联的链接信息（这可能是大型小元素列表的重要因素）。</p><p>该修饰符Modifiersclass模板的设计考虑到效率：按照设计，它与简单的手写C型单链表一样高效，实际上是唯一的标准容器，为了效率的考虑故意缺少尺寸成员函数：由于其性质作为一个链表，具有一个需要一定时间的大小的成员将需要它保持一个内部计数器的大小（如列表所示）。这会消耗一些额外的存储空间，并使插入和删除操作效率稍低。要获取forward_list对象的大小，可以使用距离算法的开始和结束，这是一个需要线性时间的操作。</p><p><img src="http://img.blog.csdn.net/20160407212133266" alt></p><h4 id="forward-list-forward-list"><a href="#forward-list-forward-list" class="headerlink" title="forward_list::forward_list"></a>forward_list::forward_list</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> (<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">forward_list</span> <span class="params">(<span class="keyword">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class="line">fill (<span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">forward_list</span> <span class="params">(size_type n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">forward_list</span> <span class="params">(size_type n, <span class="keyword">const</span> value_type&amp; val,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class="line">range (<span class="number">3</span>)</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">forward_list</span> (<span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>,</span></span><br><span class="line"><span class="class">                <span class="title">const</span> <span class="title">allocator_type</span>&amp; <span class="title">alloc</span> = <span class="title">allocator_type</span>());</span></span><br><span class="line">copy (<span class="number">4</span>)</span><br><span class="line">forward_list (<span class="keyword">const</span> forward_list&amp; fwdlst);</span><br><span class="line">forward_list (<span class="keyword">const</span> forward_list&amp; fwdlst, <span class="keyword">const</span> allocator_type&amp; alloc);</span><br><span class="line">move (<span class="number">5</span>)</span><br><span class="line">forward_list (forward_list&amp;&amp; fwdlst);</span><br><span class="line">forward_list (forward_list&amp;&amp; fwdlst, <span class="keyword">const</span> allocator_type&amp; alloc);</span><br><span class="line"><span class="function">initializer <span class="title">list</span> <span class="params">(<span class="number">6</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">forward_list</span> <span class="params">(<span class="built_in">initializer_list</span>&lt;value_type&gt; il,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// constructors used in the same order as described above:</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; first;                      <span class="comment">// default: empty</span></span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; second (<span class="number">3</span>,<span class="number">77</span>);              <span class="comment">// fill: 3 seventy-sevens</span></span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; third (second.begin(), second.end()); <span class="comment">// range initialization</span></span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; fourth (third);            <span class="comment">// copy constructor</span></span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; fifth (<span class="built_in">std</span>::move(fourth));  <span class="comment">// move ctor. (fourth wasted)</span></span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; sixth = &#123;<span class="number">3</span>, <span class="number">52</span>, <span class="number">25</span>, <span class="number">90</span>&#125;;    <span class="comment">// initializer_list constructor</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"first:"</span> ; <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x: first)  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; x; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"second:"</span>; <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x: second) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; x; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"third:"</span>;  <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x: third)  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; x; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fourth:"</span>; <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x: fourth) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; x; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fifth:"</span>;  <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x: fifth)  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; x; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"sixth:"</span>;  <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x: sixth)  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; x; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Possible output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">forward_list constructor examples:</span><br><span class="line">first:</span><br><span class="line">second: 77 77 77</span><br><span class="line">third: 77 77 77</span><br><span class="line">fourth:</span><br><span class="line">fifth: 77 77 77</span><br><span class="line">sixth: 3 52 25 90</span><br></pre></td></tr></table></figure><h4 id="forward-list-forward-list-1"><a href="#forward-list-forward-list-1" class="headerlink" title="forward_list::~forward_list"></a>forward_list::~forward_list</h4><h4 id="forward-list-before-begin"><a href="#forward-list-before-begin" class="headerlink" title="forward_list::before_begin"></a>forward_list::before_begin</h4><p>返回指向容器中第一个元素之前的位置的迭代器。</p><p>返回的迭代器不应被解除引用：它是为了用作成员函数的参数emplace_after，insert_after，erase_after或splice_after，指定序列，其中执行该动作的位置的开始位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">iterator <span class="title">before_begin</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">before_begin</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; mylist = &#123;<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line">  mylist.insert_after ( mylist.before_begin(), <span class="number">11</span> );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mylist contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">int</span>&amp; x: mylist ) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mylist contains: 11 20 30 40 50</span><br></pre></td></tr></table></figure><h4 id="forward-list-cbefore-begin"><a href="#forward-list-cbefore-begin" class="headerlink" title="forward_list::cbefore_begin"></a>forward_list::cbefore_begin</h4><p>返回指向容器中第一个元素之前的位置的const_iterator。</p><p>一个常量性是指向常量内容的迭代器。这个迭代器可以增加和减少（除非它本身也是const），就像forward_list::before_begin返回的迭代器一样，但不能用来修改它指向的内容。</p><p>返回的价值不得解除引用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">const_iterator <span class="title">cbefore_begin</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; mylist = &#123;<span class="number">77</span>, <span class="number">2</span>, <span class="number">16</span>&#125;;</span><br><span class="line"></span><br><span class="line">  mylist.insert_after ( mylist.cbefore_begin(), <span class="number">19</span> );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mylist contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">int</span>&amp; x: mylist ) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mylist contains: 19 77 2 16</span><br></pre></td></tr></table></figure><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><h3 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h3><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map 是关联容器，按照特定顺序存储由 key value (键值) 和 mapped value (映射值) 组合形成的元素。</p><p>在映射中，键值通常用于对元素进行排序和唯一标识，而映射的值存储与此键关联的内容。该类型的键和映射的值可能不同，并且在部件类型被分组在一起VALUE_TYPE，这是一种对类型结合两种：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">const</span> Key, T&gt; value_type;</span><br></pre></td></tr></table></figure><p>在内部，映射中的元素总是按照由其内部比较对象（比较类型）指示的特定的严格弱排序标准按键排序。映射容器通常比unordered_map容器慢，以通过它们的键来访问各个元素，但是它们允许基于它们的顺序对子集进行直接迭代。 在该映射值地图可以直接通过使用其相应的键来访问括号运算符（（操作符[] ）。 映射通常如实施</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">Key</span>,                                     // <span class="title">map</span>:</span>:key_type</span><br><span class="line">           <span class="class"><span class="keyword">class</span> <span class="title">T</span>,                                       // <span class="title">map</span>:</span>:mapped_type</span><br><span class="line">           <span class="class"><span class="keyword">class</span> <span class="title">Compare</span> = <span class="title">less</span>&lt;Key&gt;,                     // <span class="title">map</span>:</span>:key_compare</span><br><span class="line">           <span class="class"><span class="keyword">class</span> <span class="title">Alloc</span> = <span class="title">allocator</span>&lt;pair&lt;const Key,T&gt; &gt;    // <span class="title">map</span>:</span>:allocator_type</span><br><span class="line">           &gt; <span class="class"><span class="keyword">class</span> <span class="title">map</span>;</span></span><br></pre></td></tr></table></figure><h4 id="map-map"><a href="#map-map" class="headerlink" title="map::map"></a>map::map</h4><p>构造一个映射容器对象，根据所使用的构造器版本初始化其内容：</p><p>（1）空容器构造函数（默认构造函数）</p><p>构造一个空的容器，没有元素。</p><p>（2）范围构造函数</p><p>构造具有一样多的元素的范围内的容器[第一，最后一个），其中每个元件布设构造的从在该范围内它的相应的元件。</p><p>（3）复制构造函数（并用分配器复制）</p><p>使用x中的每个元素的副本构造一个容器。</p><p>（4）移动构造函数（并与分配器一起移动）</p><p>构造一个获取x元素的容器。<br>如果指定了alloc并且与x的分配器不同，那么元素将被移动。否则，没有构建元素（他们的所有权直接转移）。<br>x保持未指定但有效的状态。</p><p>（5）初始化列表构造函数</p><p>用il中的每个元素的副本构造一个容器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">empty (<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">map</span> <span class="params">(<span class="keyword">const</span> key_compare&amp; comp = key_compare(),</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">map</span> <span class="params">(<span class="keyword">const</span> allocator_type&amp; alloc)</span></span>;</span><br><span class="line">range (<span class="number">2</span>)</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">map</span> (<span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>,</span></span><br><span class="line"><span class="class">       <span class="title">const</span> <span class="title">key_compare</span>&amp; <span class="title">comp</span> = <span class="title">key_compare</span>(),</span></span><br><span class="line"><span class="class">       <span class="title">const</span> <span class="title">allocator_type</span>&amp; = <span class="title">allocator_type</span>());</span></span><br><span class="line">copy (<span class="number">3</span>)</span><br><span class="line"><span class="built_in">map</span> (<span class="keyword">const</span> <span class="built_in">map</span>&amp; x);</span><br><span class="line"><span class="built_in">map</span> (<span class="keyword">const</span> <span class="built_in">map</span>&amp; x, <span class="keyword">const</span> allocator_type&amp; alloc);</span><br><span class="line">move (<span class="number">4</span>)</span><br><span class="line"><span class="built_in">map</span> (<span class="built_in">map</span>&amp;&amp; x);</span><br><span class="line"><span class="built_in">map</span> (<span class="built_in">map</span>&amp;&amp; x, <span class="keyword">const</span> allocator_type&amp; alloc);</span><br><span class="line"><span class="function">initializer <span class="title">list</span> <span class="params">(<span class="number">5</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">map</span> <span class="params">(<span class="built_in">initializer_list</span>&lt;value_type&gt; il,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">const</span> key_compare&amp; comp = key_compare(),</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fncomp</span> <span class="params">(<span class="keyword">char</span> lhs, <span class="keyword">char</span> rhs)</span> </span>&#123;<span class="keyword">return</span> lhs&lt;rhs;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">classcomp</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp; lhs, <span class="keyword">const</span> <span class="keyword">char</span>&amp; rhs)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;<span class="keyword">return</span> lhs&lt;rhs;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; first;</span><br><span class="line"></span><br><span class="line">  first[<span class="string">'a'</span>]=<span class="number">10</span>;</span><br><span class="line">  first[<span class="string">'b'</span>]=<span class="number">30</span>;</span><br><span class="line">  first[<span class="string">'c'</span>]=<span class="number">50</span>;</span><br><span class="line">  first[<span class="string">'d'</span>]=<span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; second (first.begin(),first.end());</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; third (second);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>,classcomp&gt; fourth;                 <span class="comment">// class as Compare</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span>(*fn_pt)(<span class="keyword">char</span>,<span class="keyword">char</span>) = fncomp;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>,<span class="keyword">bool</span>(*)(<span class="keyword">char</span>,<span class="keyword">char</span>)&gt; fifth (fn_pt); <span class="comment">// function pointer as Compare</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="map-begin"><a href="#map-begin" class="headerlink" title="map::begin"></a>map::begin</h4><p>返回引用map容器中第一个元素的迭代器。</p><p>由于map容器始终保持其元素的顺序，所以开始指向遵循容器排序标准的元素。</p><p>如果容器是空的，则返回的迭代器值不应被解除引用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">'b'</span>] = <span class="number">100</span>;</span><br><span class="line">  mymap[<span class="string">'a'</span>] = <span class="number">200</span>;</span><br><span class="line">  mymap[<span class="string">'c'</span>] = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// show content:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it=mymap.begin(); it!=mymap.end(); ++it)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" =&gt; "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a =&gt; 200</span><br><span class="line">b =&gt; 100</span><br><span class="line">c =&gt; 300</span><br></pre></td></tr></table></figure><h4 id="map-key-comp"><a href="#map-key-comp" class="headerlink" title="map::key_comp"></a>map::key_comp</h4><p>返回容器用于比较键的比较对象的副本。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">key_compare <span class="title">key_comp</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::key_compare mycomp = mymap.key_comp();</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">'a'</span>]=<span class="number">100</span>;</span><br><span class="line">  mymap[<span class="string">'b'</span>]=<span class="number">200</span>;</span><br><span class="line">  mymap[<span class="string">'c'</span>]=<span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mymap contains:\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> highest = mymap.rbegin()-&gt;first;     <span class="comment">// key value of last element</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it = mymap.begin();</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" =&gt; "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> ( mycomp((*it++).first, highest) );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mymap contains:</span><br><span class="line">a =&gt; 100</span><br><span class="line">b =&gt; 200</span><br><span class="line">c =&gt; 300</span><br></pre></td></tr></table></figure><h4 id="map-value-comp"><a href="#map-value-comp" class="headerlink" title="map::value_comp"></a>map::value_comp</h4><p>返回可用于比较两个元素的比较对象，以获取第一个元素的键是否在第二个元素之前。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">value_compare <span class="title">value_comp</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">'x'</span>]=<span class="number">1001</span>;</span><br><span class="line">  mymap[<span class="string">'y'</span>]=<span class="number">2002</span>;</span><br><span class="line">  mymap[<span class="string">'z'</span>]=<span class="number">3003</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mymap contains:\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::pair&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; highest = *mymap.rbegin();          <span class="comment">// last element</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it = mymap.begin();</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" =&gt; "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> ( mymap.value_comp()(*it++, highest) );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mymap contains:</span><br><span class="line">x =&gt; 1001</span><br><span class="line">y =&gt; 2002</span><br><span class="line">z =&gt; 3003</span><br></pre></td></tr></table></figure><h4 id="map-find"><a href="#map-find" class="headerlink" title="map::find"></a>map::find</h4><p>在容器中搜索具有等于k的键的元素，如果找到则返回一个迭代器，否则返回map::end的迭代器。</p><p>如果容器的比较对象自反地返回假（即，不管元素作为参数传递的顺序），则两个key被认为是等同的。 </p><p>另一个成员函数map::count可以用来检查一个特定的键是否存在。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">iterator <span class="title">find</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">find</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">'a'</span>]=<span class="number">50</span>;</span><br><span class="line">  mymap[<span class="string">'b'</span>]=<span class="number">100</span>;</span><br><span class="line">  mymap[<span class="string">'c'</span>]=<span class="number">150</span>;</span><br><span class="line">  mymap[<span class="string">'d'</span>]=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">  it = mymap.find(<span class="string">'b'</span>);</span><br><span class="line">  <span class="keyword">if</span> (it != mymap.end())</span><br><span class="line">    mymap.erase (it);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// print content:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"elements in mymap:"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a =&gt; "</span> &lt;&lt; mymap.find(<span class="string">'a'</span>)-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"c =&gt; "</span> &lt;&lt; mymap.find(<span class="string">'c'</span>)-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d =&gt; "</span> &lt;&lt; mymap.find(<span class="string">'d'</span>)-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">elements in mymap:</span><br><span class="line">a =&gt; 50</span><br><span class="line">c =&gt; 150</span><br><span class="line">d =&gt; 200</span><br></pre></td></tr></table></figure><h4 id="map-count"><a href="#map-count" class="headerlink" title="map::count"></a>map::count</h4><p>在容器中搜索具有等于k的键的元素，并返回匹配的数量。</p><p>由于地图容器中的所有元素都是唯一的，因此该函数只能返回1（如果找到该元素）或返回零（否则）。</p><p>如果容器的比较对象自反地返回错误（即，不管按键作为参数传递的顺序），则两个键被认为是等同的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">count</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">  mymap [<span class="string">'a'</span>]=<span class="number">101</span>;</span><br><span class="line">  mymap [<span class="string">'c'</span>]=<span class="number">202</span>;</span><br><span class="line">  mymap [<span class="string">'f'</span>]=<span class="number">303</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (c=<span class="string">'a'</span>; c&lt;<span class="string">'h'</span>; c++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">    <span class="keyword">if</span> (mymap.count(c)&gt;<span class="number">0</span>)</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" is an element of mymap.\n"</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" is not an element of mymap.\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a is an element of mymap.</span><br><span class="line">b is not an element of mymap.</span><br><span class="line">c is an element of mymap.</span><br><span class="line">d is not an element of mymap.</span><br><span class="line">e is not an element of mymap.</span><br><span class="line">f is an element of mymap.</span><br><span class="line">g is not an element of mymap.</span><br></pre></td></tr></table></figure><h4 id="map-lower-bound"><a href="#map-lower-bound" class="headerlink" title="map::lower_bound"></a>map::lower_bound</h4><p>将迭代器返回到下限</p><p>返回指向容器中第一个元素的迭代器，该元素的键不会在k之前出现（即，它是等价的或者在其后）。</p><p>该函数使用其内部比较对象（key_comp）来确定这一点，将迭代器返回到key_comp（element_key，k）将返回false的第一个元素。</p><p>如果map类用默认的比较类型（less）实例化，则函数返回一个迭代器到第一个元素，其键不小于k。</p><p>一个类似的成员函数upper_bound具有相同的行为lower_bound，除非映射包含一个key值等于k的元素：在这种情况下，lower_bound返回指向该元素的迭代器，而upper_bound返回指向下一个元素的迭代器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">iterator <span class="title">lower_bound</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">lower_bound</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator itlow,itup;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">'a'</span>]=<span class="number">20</span>;</span><br><span class="line">  mymap[<span class="string">'b'</span>]=<span class="number">40</span>;</span><br><span class="line">  mymap[<span class="string">'c'</span>]=<span class="number">60</span>;</span><br><span class="line">  mymap[<span class="string">'d'</span>]=<span class="number">80</span>;</span><br><span class="line">  mymap[<span class="string">'e'</span>]=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  itlow=mymap.lower_bound (<span class="string">'b'</span>);  <span class="comment">// itlow points to b</span></span><br><span class="line">  itup=mymap.upper_bound (<span class="string">'d'</span>);   <span class="comment">// itup points to e (not d!)</span></span><br><span class="line"></span><br><span class="line">  mymap.erase(itlow,itup);        <span class="comment">// erases [itlow,itup)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// print content:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it=mymap.begin(); it!=mymap.end(); ++it)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" =&gt; "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a =&gt; 20</span><br><span class="line">e =&gt; 100</span><br></pre></td></tr></table></figure><h4 id="map-upper-bound"><a href="#map-upper-bound" class="headerlink" title="map::upper_bound"></a>map::upper_bound</h4><p>将迭代器返回到上限</p><p>返回一个指向容器中第一个元素的迭代器，它的关键字被认为是在k之后。</p><p>该函数使用其内部比较对象（key_comp）来确定这一点，将迭代器返回到key_comp（k，element_key）将返回true的第一个元素。</p><p>如果map类用默认的比较类型（less）实例化，则函数返回一个迭代器到第一个元素，其键大于k。</p><p>类似的成员函数lower_bound具有与upper_bound相同的行为，除了map包含一个元素，其键值等于k：在这种情况下，lower_bound返回指向该元素的迭代器，而upper_bound返回指向下一个元素的迭代器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">iterator <span class="title">upper_bound</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">upper_bound</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator itlow,itup;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">'a'</span>]=<span class="number">20</span>;</span><br><span class="line">  mymap[<span class="string">'b'</span>]=<span class="number">40</span>;</span><br><span class="line">  mymap[<span class="string">'c'</span>]=<span class="number">60</span>;</span><br><span class="line">  mymap[<span class="string">'d'</span>]=<span class="number">80</span>;</span><br><span class="line">  mymap[<span class="string">'e'</span>]=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  itlow=mymap.lower_bound (<span class="string">'b'</span>);  <span class="comment">// itlow points to b</span></span><br><span class="line">  itup=mymap.upper_bound (<span class="string">'d'</span>);   <span class="comment">// itup points to e (not d!)</span></span><br><span class="line"></span><br><span class="line">  mymap.erase(itlow,itup);        <span class="comment">// erases [itlow,itup)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// print content:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it=mymap.begin(); it!=mymap.end(); ++it)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" =&gt; "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a =&gt; 20</span><br><span class="line">e =&gt; 100</span><br></pre></td></tr></table></figure><h4 id="map-equal-range"><a href="#map-equal-range" class="headerlink" title="map::equal_range"></a>map::equal_range</h4><p>获取相同元素的范围</p><p>返回包含容器中所有具有与k等价的键的元素的范围边界。 由于地图容器中的元素具有唯一键，所以返回的范围最多只包含一个元素。 </p><p>如果没有找到匹配，则返回的范围具有零的长度，与两个迭代器指向具有考虑去后一个密钥对所述第一元件ķ根据容器的内部比较对象（key_comp）。如果容器的比较对象返回false，则两个键被认为是等价的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;const_iterator,const_iterator&gt; equal_range (<span class="keyword">const</span> key_type&amp; k) <span class="keyword">const</span>;</span><br><span class="line">pair&lt;iterator,iterator&gt;             equal_range (<span class="keyword">const</span> key_type&amp; k);</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">'a'</span>]=<span class="number">10</span>;</span><br><span class="line">  mymap[<span class="string">'b'</span>]=<span class="number">20</span>;</span><br><span class="line">  mymap[<span class="string">'c'</span>]=<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::pair&lt;<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator,<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator&gt; ret;</span><br><span class="line">  ret = mymap.equal_range(<span class="string">'b'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"lower bound points to: "</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ret.first-&gt;first &lt;&lt; <span class="string">" =&gt; "</span> &lt;&lt; ret.first-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"upper bound points to: "</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ret.second-&gt;first &lt;&lt; <span class="string">" =&gt; "</span> &lt;&lt; ret.second-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lower bound points to: &apos;b&apos; =&gt; 20</span><br><span class="line">upper bound points to: &apos;c&apos; =&gt; 30</span><br></pre></td></tr></table></figure><h3 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h3><h3 id="无序容器（Unordered-Container）：unordered-set、unordered-multiset、unordered-map、unordered-multimap"><a href="#无序容器（Unordered-Container）：unordered-set、unordered-multiset、unordered-map、unordered-multimap" class="headerlink" title="无序容器（Unordered Container）：unordered_set、unordered_multiset、unordered_map、unordered_multimap"></a>无序容器（Unordered Container）：unordered_set、unordered_multiset、unordered_map、unordered_multimap</h3><p>包括：</p><ul><li>unordered_set</li><li>unordered_multiset</li><li>unordered_map</li><li>unordered_multimap</li></ul><p>都是以哈希表实现的。</p><p><img src="http://img.blog.csdn.net/20160410123436394" alt></p><p>unordered_set、unodered_multiset结构：</p><p><img src="http://img.blog.csdn.net/20160410123518692" alt></p><p>unordered_map、unodered_multimap结构：</p><p><img src="http://img.blog.csdn.net/20160410123525739" alt></p><h3 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a>unordered_set</h3><h3 id="unordered-multiset"><a href="#unordered-multiset" class="headerlink" title="unordered_multiset"></a>unordered_multiset</h3><h3 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h3><h3 id="unordered-multimap"><a href="#unordered-multimap" class="headerlink" title="unordered_multimap"></a>unordered_multimap</h3><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p>元组是一个能够容纳元素集合的对象。每个元素可以是不同的类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">Types</span>&gt; <span class="title">class</span> <span class="title">tuple</span>;</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     // std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;        // std::tuple, std::get, std::tie, std::ignore</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; foo (<span class="number">10</span>,<span class="string">'x'</span>);</span><br><span class="line">  <span class="keyword">auto</span> bar = <span class="built_in">std</span>::make_tuple (<span class="string">"test"</span>, <span class="number">3.1</span>, <span class="number">14</span>, <span class="string">'y'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::get&lt;<span class="number">2</span>&gt;(bar) = <span class="number">100</span>;                                    <span class="comment">// access element</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> myint; <span class="keyword">char</span> mychar;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::tie (myint, mychar) = foo;                            <span class="comment">// unpack elements</span></span><br><span class="line">  <span class="built_in">std</span>::tie (<span class="built_in">std</span>::ignore, <span class="built_in">std</span>::ignore, myint, mychar) = bar;  <span class="comment">// unpack (with ignore)</span></span><br><span class="line"></span><br><span class="line">  mychar = <span class="built_in">std</span>::get&lt;<span class="number">3</span>&gt;(bar);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(foo) = <span class="built_in">std</span>::get&lt;<span class="number">2</span>&gt;(bar);</span><br><span class="line">  <span class="built_in">std</span>::get&lt;<span class="number">1</span>&gt;(foo) = mychar;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"foo contains: "</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(foo) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">1</span>&gt;(foo) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo contains: 100 y</span><br></pre></td></tr></table></figure><h4 id="tuple-tuple"><a href="#tuple-tuple" class="headerlink" title="tuple::tuple"></a>tuple::tuple</h4><p>构建一个 tuple（元组）对象。</p><p>这涉及单独构建其元素，初始化取决于调用的构造函数形式：</p><p>（1）默认的构造函数</p><p>构建一个 元组对象的元素值初始化。</p><p>（2）复制/移动构造函数</p><p>该对象使用tpl的内容进行初始化 元组目的。tpl<br>的相应元素被传递给每个元素的构造函数。</p><p>（3）隐式转换构造函数</p><p>同上。tpl中的<br>所有类型都可以隐含地转换为构造中它们各自元素的类型元组 目的。</p><p>（4）初始化构造函数<br>用elems中的相应元素初始化每个元素。elems<br>的相应元素被传递给每个元素的构造函数。</p><p>（5）对转换构造函数</p><p>该对象有两个对应于pr.first和的元素pr.second。PR中的所有类型都应该隐含地转换为其中各自元素的类型元组 目的。</p><p>（6）分配器版本</p><p>和上面的版本一样，除了每个元素都是使用allocator alloc构造的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> (<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="title">tuple</span><span class="params">()</span></span>;</span><br><span class="line">copy / move (<span class="number">2</span>)</span><br><span class="line">tuple (<span class="keyword">const</span> tuple&amp; tpl) = <span class="keyword">default</span>;</span><br><span class="line">tuple (tuple&amp;&amp; tpl) = <span class="keyword">default</span>;</span><br><span class="line"><span class="function">implicit <span class="title">conversion</span> <span class="params">(<span class="number">3</span>)</span></span></span><br><span class="line">template &lt;class... UTypes&gt;</span><br><span class="line">  tuple (<span class="keyword">const</span> tuple&lt;UTypes...&gt;&amp; tpl);</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">UTypes</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">tuple</span>&lt;UTypes...&gt;&amp;&amp; <span class="title">tpl</span>);</span></span><br><span class="line">initialization (<span class="number">4</span>)</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">tuple</span> <span class="params">(<span class="keyword">const</span> Types&amp;... elems)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">UTypes</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">explicit</span> <span class="title">tuple</span> (<span class="title">UTypes</span>&amp;&amp;... <span class="title">elems</span>);</span></span><br><span class="line"><span class="function">conversion from <span class="title">pair</span> <span class="params">(<span class="number">5</span>)</span></span></span><br><span class="line">template &lt;class U1, class U2&gt;</span><br><span class="line">  tuple (<span class="keyword">const</span> pair&lt;U1,U2&gt;&amp; pr);</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">U1</span>, <span class="title">class</span> <span class="title">U2</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">pair</span>&lt;U1,U2&gt;&amp;&amp; <span class="title">pr</span>);</span></span><br><span class="line">allocator (<span class="number">6</span>)</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">const</span> <span class="title">tuple</span>&amp; <span class="title">tpl</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">tuple</span>&amp;&amp; <span class="title">tpl</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>,<span class="title">class</span>... <span class="title">UTypes</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">const</span> <span class="title">tuple</span>&lt;UTypes...&gt;&amp; <span class="title">tpl</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">class</span>... <span class="title">UTypes</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">tuple</span>&lt;UTypes...&gt;&amp;&amp; <span class="title">tpl</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">const</span> <span class="title">Types</span>&amp;... <span class="title">elems</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">class</span>... <span class="title">UTypes</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">UTypes</span>&amp;&amp;... <span class="title">elems</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">class</span> <span class="title">U1</span>, <span class="title">class</span> <span class="title">U2</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">const</span> <span class="title">pair</span>&lt;U1,U2&gt;&amp; <span class="title">pr</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">class</span> <span class="title">U1</span>, <span class="title">class</span> <span class="title">U2</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">pair</span>&lt;U1,U2&gt;&amp;&amp; <span class="title">pr</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     // std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;      // std::make_pair</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;        // std::tuple, std::make_tuple, std::get</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; first;                             <span class="comment">// default</span></span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; second (first);                    <span class="comment">// copy</span></span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; third (<span class="built_in">std</span>::make_tuple(<span class="number">20</span>,<span class="string">'b'</span>));   <span class="comment">// move</span></span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">long</span>,<span class="keyword">char</span>&gt; fourth (third);                   <span class="comment">// implicit conversion</span></span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; fifth (<span class="number">10</span>,<span class="string">'a'</span>);                    <span class="comment">// initialization</span></span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; sixth (<span class="built_in">std</span>::make_pair(<span class="number">30</span>,<span class="string">'c'</span>));    <span class="comment">// from pair / move</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"sixth contains: "</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(sixth);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" and "</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">1</span>&gt;(sixth) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sixth contains: 30 and c</span><br></pre></td></tr></table></figure><h3 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h3><p>这个类把一对值（values）结合在一起，这些值可能是不同的类型（T1 和 T2）。每个值可以被公有的成员变量first、second访问。</p><p>pair是tuple（元组）的一个特例。</p><p>pair的实现是一个结构体，主要的两个成员变量是first second 因为是使用struct不是class，所以可以直接使用pair的成员变量。</p><p>应用：</p><ul><li>可以将两个类型数据组合成一个如map&lt;key, value&gt;</li><li>当某个函数需要两个返回值时</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt; <span class="title">struct</span> <span class="title">pair</span>;</span></span><br></pre></td></tr></table></figure><h4 id="pair-pair"><a href="#pair-pair" class="headerlink" title="pair::pair"></a>pair::pair</h4><p>构建一个pair对象。</p><p>这涉及到单独构建它的两个组件对象，初始化依赖于调用的构造器形式：</p><p>（1）默认的构造函数</p><p>构建一个 对对象的元素值初始化。</p><p>（2）复制/移动构造函数（和隐式转换）</p><p>该对象被初始化为pr的内容 对目的。pr<br>的相应成员被传递给每个成员的构造函数。</p><p>（3）初始化构造函数</p><p>会员 第一是由一个和成员构建的第二与b。</p><p>（4）分段构造</p><p>构造成员 first  和 second  到位，传递元素first_args 作为参数的构造函数 first，和元素 second_args 到的构造函数 second 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> (<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="title">pair</span><span class="params">()</span></span>;</span><br><span class="line">copy / move (<span class="number">2</span>)</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>, <span class="title">class</span> <span class="title">V</span>&gt; <span class="title">pair</span> (<span class="title">const</span> <span class="title">pair</span>&lt;U,V&gt;&amp; <span class="title">pr</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>, <span class="title">class</span> <span class="title">V</span>&gt; <span class="title">pair</span> (<span class="title">pair</span>&lt;U,V&gt;&amp;&amp; <span class="title">pr</span>);</span></span><br><span class="line">pair (<span class="keyword">const</span> pair&amp; pr) = <span class="keyword">default</span>;</span><br><span class="line">pair (pair&amp;&amp; pr) = <span class="keyword">default</span>;</span><br><span class="line">initialization (<span class="number">3</span>)</span><br><span class="line">pair (<span class="keyword">const</span> first_type&amp; a, <span class="keyword">const</span> second_type&amp; b);</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>, <span class="title">class</span> <span class="title">V</span>&gt; <span class="title">pair</span> (<span class="title">U</span>&amp;&amp; <span class="title">a</span>, <span class="title">V</span>&amp;&amp; <span class="title">b</span>);</span></span><br><span class="line">piecewise (<span class="number">4</span>)</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">Args1</span>, <span class="title">class</span>... <span class="title">Args2</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">pair</span> (<span class="title">piecewise_construct_t</span> <span class="title">pwc</span>, <span class="title">tuple</span>&lt;Args1...&gt; <span class="title">first_args</span>,</span></span><br><span class="line"><span class="class">                                   <span class="title">tuple</span>&lt;Args2...&gt; <span class="title">second_args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;      // std::pair, std::make_pair</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;       // std::string</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     // std::cout</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::pair &lt;<span class="built_in">std</span>::<span class="built_in">string</span>,<span class="keyword">double</span>&gt; product1;                     <span class="comment">// default constructor</span></span><br><span class="line">  <span class="built_in">std</span>::pair &lt;<span class="built_in">std</span>::<span class="built_in">string</span>,<span class="keyword">double</span>&gt; product2 (<span class="string">"tomatoes"</span>,<span class="number">2.30</span>);   <span class="comment">// value init</span></span><br><span class="line">  <span class="built_in">std</span>::pair &lt;<span class="built_in">std</span>::<span class="built_in">string</span>,<span class="keyword">double</span>&gt; product3 (product2);          <span class="comment">// copy constructor</span></span><br><span class="line"></span><br><span class="line">  product1 = <span class="built_in">std</span>::make_pair(<span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"lightbulbs"</span>),<span class="number">0.99</span>);   <span class="comment">// using make_pair (move)</span></span><br><span class="line"></span><br><span class="line">  product2.first = <span class="string">"shoes"</span>;                  <span class="comment">// the type of first is string</span></span><br><span class="line">  product2.second = <span class="number">39.90</span>;                   <span class="comment">// the type of second is double</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The price of "</span> &lt;&lt; product1.first &lt;&lt; <span class="string">" is $"</span> &lt;&lt; product1.second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The price of "</span> &lt;&lt; product2.first &lt;&lt; <span class="string">" is $"</span> &lt;&lt; product2.second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The price of "</span> &lt;&lt; product3.first &lt;&lt; <span class="string">" is $"</span> &lt;&lt; product3.second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The price of lightbulbs is $0.99</span><br><span class="line">The price of shoes is $39.9</span><br><span class="line">The price of tomatoes is $2.3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;STL&quot;&gt;&lt;a href=&quot;#STL&quot; class=&quot;headerlink&quot; title=&quot;STL&quot;&gt;&lt;/a&gt;STL&lt;/h1&gt;&lt;h2 id=&quot;组成&quot;&gt;&lt;a href=&quot;#组成&quot; class=&quot;headerlink&quot; title=&quot;组成&quot;&gt;&lt;/a&gt;组成&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;容器（containers）&lt;/li&gt;
&lt;li&gt;算法（algorithms）&lt;/li&gt;
&lt;li&gt;迭代器（iterators）&lt;/li&gt;
&lt;li&gt;仿函数（functors）&lt;/li&gt;
&lt;li&gt;配接器（adapters）&lt;/li&gt;
&lt;li&gt;空间配置器（allocator）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;容器（containers）&quot;&gt;&lt;a href=&quot;#容器（containers）&quot; class=&quot;headerlink&quot; title=&quot;容器（containers）&quot;&gt;&lt;/a&gt;容器（containers）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;序列式容器（sequence containers）：元素都是可序（ordered），但未必是有序（sorted）&lt;/li&gt;
&lt;li&gt;关联式容器（associattive containers）
    
    </summary>
    
      <category term="C++" scheme="https://kaaier.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://kaaier.github.io/tags/C/"/>
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>C++容器及算法</title>
    <link href="https://kaaier.github.io/2019/06/15/C++/"/>
    <id>https://kaaier.github.io/2019/06/15/C++/</id>
    <published>2019-06-15T03:21:20.000Z</published>
    <updated>2019-08-06T16:11:36.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="容器（containers）"><a href="#容器（containers）" class="headerlink" title="容器（containers）"></a>容器（containers）</h1><h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><p>array 是固定大小的顺序容器，它们保存了一个以严格的线性顺序排列的特定数量的元素。</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>begin</td><td>返回指向数组容器中第一个元素的迭代器</td></tr><tr><td>end</td><td>返回指向数组容器中最后一个元素之后的理论元素的迭代器</td></tr><tr><td>rbegin</td><td>返回指向数组容器中最后一个元素的反向迭代器</td></tr><tr><td>rend</td><td>返回一个反向迭代器，指向数组中第一个元素之前的理论元素</td></tr><tr><td>cbegin</td><td>返回指向数组容器中第一个元素的常量迭代器（const_iterator）</td></tr><tr><td>cend</td><td>返回指向数组容器中最后一个元素之后的理论元素的常量迭代器（const_iterator）</td></tr><tr><td>crbegin</td><td>返回指向数组容器中最后一个元素的常量反向迭代器（const_reverse_iterator）</td></tr><tr><td>crend</td><td>返回指向数组中第一个元素之前的理论元素的常量反向迭代器（const_reverse_iterator）</td></tr><tr><td>size</td><td>返回数组容器中元素的数量</td></tr><tr><td>max_size</td><td>返回数组容器可容纳的最大元素数</td></tr><tr><td>empty</td><td>返回一个布尔值，指示数组容器是否为空</td></tr><tr><td>operator[]</td><td>返回容器中第 n（参数）个位置的元素的引用</td></tr><tr><td>at</td><td>返回容器中第 n（参数）个位置的元素的引用</td></tr><tr><td>front</td><td>返回对容器中第一个元素的引用</td></tr><tr><td>back</td><td>返回对容器中最后一个元素的引用</td></tr><tr><td>data</td><td>返回指向容器中第一个元素的指针</td></tr><tr><td>fill</td><td>用 val（参数）填充数组所有元素</td></tr><tr><td>swap</td><td>通过 x（参数）的内容交换数组的内容</td></tr><tr><td>get（array）</td><td>形如 <code>std::get&lt;0&gt;(myarray)</code>；传入一个数组容器，返回指定位置元素的引用</td></tr><tr><td>relational operators (array)</td><td>形如 <code>arrayA &gt; arrayB</code>；依此比较数组每个元素的大小关系</td></tr><tr><td><a id="more"></a></td><td></td></tr><tr><td>## vector</td><td></td></tr></tbody></table><p>vector 是表示可以改变大小的数组的序列容器。</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>vector</td><td>构造函数</td></tr><tr><td>~vector</td><td>析构函数，销毁容器对象</td></tr><tr><td>operator=</td><td>将新内容分配给容器，替换其当前内容，并相应地修改其大小</td></tr><tr><td>begin</td><td>返回指向容器中第一个元素的迭代器</td></tr><tr><td>end</td><td>返回指向容器中最后一个元素之后的理论元素的迭代器</td></tr><tr><td>rbegin</td><td>返回指向容器中最后一个元素的反向迭代器</td></tr><tr><td>rend</td><td>返回一个反向迭代器，指向中第一个元素之前的理论元素</td></tr><tr><td>cbegin</td><td>返回指向容器中第一个元素的常量迭代器（const_iterator）</td></tr><tr><td>cend</td><td>返回指向容器中最后一个元素之后的理论元素的常量迭代器（const_iterator）</td></tr><tr><td>crbegin</td><td>返回指向容器中最后一个元素的常量反向迭代器（const_reverse_iterator）</td></tr><tr><td>crend</td><td>返回指向容器中第一个元素之前的理论元素的常量反向迭代器（const_reverse_iterator）</td></tr><tr><td>size</td><td>返回容器中元素的数量</td></tr><tr><td>max_size</td><td>返回容器可容纳的最大元素数</td></tr><tr><td>resize</td><td>调整容器的大小，使其包含 n（参数）个元素</td></tr><tr><td>capacity</td><td>返回当前为 vector 分配的存储空间（容量）的大小</td></tr><tr><td>empty</td><td>返回 vector 是否为空</td></tr><tr><td>reserve</td><td>请求 vector 容量至少足以包含 n（参数）个元素</td></tr><tr><td>shrink_to_fit</td><td>要求容器减小其 capacity（容量）以适应其 size（元素数量）</td></tr><tr><td>operator[]</td><td>返回容器中第 n（参数）个位置的元素的引用</td></tr><tr><td>at</td><td>返回容器中第 n（参数）个位置的元素的引用</td></tr><tr><td>front</td><td>返回对容器中第一个元素的引用</td></tr><tr><td>back</td><td>返回对容器中最后一个元素的引用</td></tr><tr><td>data</td><td>返回指向容器中第一个元素的指针</td></tr><tr><td>assign</td><td>将新内容分配给 vector，替换其当前内容，并相应地修改其 size</td></tr><tr><td>push_back</td><td>在容器的最后一个元素之后添加一个新元素</td></tr><tr><td>pop_back</td><td>删除容器中的最后一个元素，有效地将容器 size 减少一个</td></tr><tr><td>insert</td><td>通过在指定位置的元素之前插入新元素来扩展该容器，通过插入元素的数量有效地增加容器大小</td></tr><tr><td>erase</td><td>从 vector 中删除单个元素（<code>position</code>）或一系列元素（<code>[first，last)</code>），这有效地减少了被去除的元素的数量，从而破坏了容器的大小</td></tr><tr><td>swap</td><td>通过 x（参数）的内容交换容器的内容，x 是另一个类型相同、size 可能不同的 vector 对象</td></tr><tr><td>clear</td><td>从 vector 中删除所有的元素（被销毁），留下 size 为 0 的容器</td></tr><tr><td>emplace</td><td>通过在 position（参数）位置处插入新元素 args（参数）来扩展容器</td></tr><tr><td>emplace_back</td><td>在 vector 的末尾插入一个新的元素，紧跟在当前的最后一个元素之后</td></tr><tr><td>get_allocator</td><td>返回与vector关联的构造器对象的副本</td></tr><tr><td>swap(vector)</td><td>容器 x（参数）的内容与容器 y（参数）的内容交换。两个容器对象都必须是相同的类型（相同的模板参数），尽管大小可能不同</td></tr><tr><td>relational operators (vector)</td><td>形如 <code>vectorA &gt; vectorB</code>；依此比较每个元素的大小关系</td></tr></tbody></table><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><p>deque（[‘dek]）（双端队列）是double-ended queue 的一个不规则缩写。deque是具有动态大小的序列容器，可以在两端（前端或后端）扩展或收缩。</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>deque</td><td>构造函数</td></tr><tr><td>push_back</td><td>在当前的最后一个元素之后 ，在 deque 容器的末尾添加一个新元素</td></tr><tr><td>push_front</td><td>在 deque 容器的开始位置插入一个新的元素，位于当前的第一个元素之前</td></tr><tr><td>pop_back</td><td>删除 deque 容器中的最后一个元素，有效地将容器大小减少一个</td></tr><tr><td>pop_front</td><td>删除 deque 容器中的第一个元素，有效地减小其大小</td></tr><tr><td>emplace_front</td><td>在 deque 的开头插入一个新的元素，就在其当前的第一个元素之前</td></tr><tr><td>emplace_back</td><td>在 deque 的末尾插入一个新的元素，紧跟在当前的最后一个元素之后</td></tr></tbody></table><h2 id="forward-list"><a href="#forward-list" class="headerlink" title="forward_list"></a>forward_list</h2><p>forward_list（单向链表）是序列容器，允许在序列中的任何地方进行恒定的时间插入和擦除操作。</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>forward_list</td><td>返回指向容器中第一个元素之前的位置的迭代器</td></tr><tr><td>cbefore_begin</td><td>返回指向容器中第一个元素之前的位置的 const_iterator</td></tr></tbody></table><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>list，双向链表，是序列容器，允许在序列中的任何地方进行常数时间插入和擦除操作，并在两个方向上进行迭代。</p><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>stack 是一种容器适配器，用于在LIFO（后进先出）的操作，其中元素仅从容器的一端插入和提取。</p><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p>queue 是一种容器适配器，用于在FIFO（先入先出）的操作，其中元素插入到容器的一端并从另一端提取。</p><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>set 是按照特定顺序存储唯一元素的容器。</p><h2 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h2><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map 是关联容器，按照特定顺序存储由 key value (键值) 和 mapped value (映射值) 组合形成的元素。</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>map</td><td>构造函数</td></tr><tr><td>begin</td><td>返回引用容器中第一个元素的迭代器</td></tr><tr><td>key_comp</td><td>返回容器用于比较键的比较对象的副本</td></tr><tr><td>value_comp</td><td>返回可用于比较两个元素的比较对象，以获取第一个元素的键是否在第二个元素之前</td></tr><tr><td>find</td><td>在容器中搜索具有等于 k（参数）的键的元素，如果找到则返回一个迭代器，否则返回 map::end 的迭代器</td></tr><tr><td>count</td><td>在容器中搜索具有等于 k（参数）的键的元素，并返回匹配的数量</td></tr><tr><td>lower_bound</td><td>返回一个非递减序列 <code>[first, last)</code>（参数）中的第一个大于等于值 val（参数）的位置的迭代器</td></tr><tr><td>upper_bound</td><td>返回一个非递减序列 <code>[first, last)</code>（参数）中第一个大于 val（参数）的位置的迭代器</td></tr><tr><td>equal_range</td><td>获取相同元素的范围，返回包含容器中所有具有与 k（参数）等价的键的元素的范围边界（<code>pair&lt; map&lt;char,int&gt;::iterator, map&lt;char,int&gt;::iterator &gt;</code>）</td></tr></tbody></table><h2 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h2><h2 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a>unordered_set</h2><h2 id="unordered-multiset"><a href="#unordered-multiset" class="headerlink" title="unordered_multiset"></a>unordered_multiset</h2><h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2><h2 id="unordered-multimap"><a href="#unordered-multimap" class="headerlink" title="unordered_multimap"></a>unordered_multimap</h2><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p>元组是一个能够容纳元素集合的对象。每个元素可以是不同的类型。</p><h2 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h2><p>这个类把一对值（values）结合在一起，这些值可能是不同的类型（T1 和 T2）。每个值可以被公有的成员变量first、second访问。</p><h1 id="算法（algorithms）"><a href="#算法（algorithms）" class="headerlink" title="算法（algorithms）"></a>算法（algorithms）</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单查找算法，要求输入迭代器（input iterator）</span></span><br><span class="line">find(beg, end, val); <span class="comment">// 返回一个迭代器，指向输入序列中第一个等于 val 的元素，未找到返回 end</span></span><br><span class="line">find_if(beg, end, unaryPred); <span class="comment">// 返回一个迭代器，指向第一个满足 unaryPred 的元素，未找到返回 end</span></span><br><span class="line">find_if_not(beg, end, unaryPred); <span class="comment">// 返回一个迭代器，指向第一个令 unaryPred 为 false 的元素，未找到返回 end</span></span><br><span class="line">count(beg, end, val); <span class="comment">// 返回一个计数器，指出 val 出现了多少次</span></span><br><span class="line">count_if(beg, end, unaryPred); <span class="comment">// 统计有多少个元素满足 unaryPred</span></span><br><span class="line">all_of(beg, end, unaryPred); <span class="comment">// 返回一个 bool 值，判断是否所有元素都满足 unaryPred</span></span><br><span class="line">any_of(beg, end, unaryPred); <span class="comment">// 返回一个 bool 值，判断是否任意（存在）一个元素满足 unaryPred</span></span><br><span class="line">none_of(beg, end, unaryPred); <span class="comment">// 返回一个 bool 值，判断是否所有元素都不满足 unaryPred</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找重复值的算法，传入向前迭代器（forward iterator）</span></span><br><span class="line">adjacent_find(beg, end); <span class="comment">// 返回指向第一对相邻重复元素的迭代器，无相邻元素则返回 end</span></span><br><span class="line">adjacent_find(beg, end, binaryPred); <span class="comment">// 返回指向第一对相邻重复元素的迭代器，无相邻元素则返回 end</span></span><br><span class="line">search_n(beg, end, count, val); <span class="comment">// 返回一个迭代器，从此位置开始有 count 个相等元素，不存在则返回 end</span></span><br><span class="line">search_n(beg, end, count, val, binaryPred); <span class="comment">// 返回一个迭代器，从此位置开始有 count 个相等元素，不存在则返回 end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找子序列算法，除 find_first_of（前两个输入迭代器，后两个前向迭代器） 外，都要求两个前向迭代器</span></span><br><span class="line">search(beg1, end1, beg2, end2); <span class="comment">// 返回第二个输入范围（子序列）在爹一个输入范围中第一次出现的位置，未找到则返回 end1</span></span><br><span class="line">search(beg1, end1, beg2, end2, binaryPred); <span class="comment">// 返回第二个输入范围（子序列）在爹一个输入范围中第一次出现的位置，未找到则返回 end1</span></span><br><span class="line">find_first_of(beg1, end1, beg2, end2); <span class="comment">// 返回一个迭代器，指向第二个输入范围中任意元素在第一个范围中首次出现的位置，未找到则返回end1</span></span><br><span class="line">find_first_of(beg1, end1, beg2, end2, binaryPred); <span class="comment">// 返回一个迭代器，指向第二个输入范围中任意元素在第一个范围中首次出现的位置，未找到则返回end1</span></span><br><span class="line">find_end(beg1, end1, beg2, end2); <span class="comment">// 类似 search，但返回的最后一次出现的位置。如果第二个输入范围为空，或者在第一个输入范围为空，或者在第一个输入范围中未找到它，则返回 end1</span></span><br><span class="line">find_end(beg1, end1, beg2, end2, binaryPred); <span class="comment">// 类似 search，但返回的最后一次出现的位置。如果第二个输入范围为空，或者在第一个输入范围为空，或者在第一个输入范围中未找到它，则返回 end1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他只读算法，传入输入迭代器</span></span><br><span class="line">for_each(beg, end, unaryOp); <span class="comment">// 对输入序列中的每个元素应用可调用对象 unaryOp，unaryOp 的返回值被忽略</span></span><br><span class="line">mismatch(beg1, end1, beg2); <span class="comment">// 比较两个序列中的元素。返回一个迭代器的 pair，表示两个序列中第一个不匹配的元素</span></span><br><span class="line">mismatch(beg1, end1, beg2, binaryPred); <span class="comment">// 比较两个序列中的元素。返回一个迭代器的 pair，表示两个序列中第一个不匹配的元素</span></span><br><span class="line">equal(beg1, end1, beg2); <span class="comment">// 比较每个元素，确定两个序列是否相等。</span></span><br><span class="line">equal(beg1, end1, beg2, binaryPred); <span class="comment">// 比较每个元素，确定两个序列是否相等。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分搜索算法，传入前向迭代器或随机访问迭代器（random-access iterator），要求序列中的元素已经是有序的。通过小于运算符（&lt;）或 comp 比较操作实现比较。</span></span><br><span class="line">lower_bound(beg, end, val); <span class="comment">// 返回一个非递减序列 [beg, end) 中的第一个大于等于值 val 的位置的迭代器，不存在则返回 end</span></span><br><span class="line">lower_bound(beg, end, val, comp); <span class="comment">// 返回一个非递减序列 [beg, end) 中的第一个大于等于值 val 的位置的迭代器，不存在则返回 end</span></span><br><span class="line">upper_bound(beg, end, val); <span class="comment">// 返回一个非递减序列 [beg, end) 中第一个大于 val 的位置的迭代器，不存在则返回 end</span></span><br><span class="line">upper_bound(beg, end, val, comp); <span class="comment">// 返回一个非递减序列 [beg, end) 中第一个大于 val 的位置的迭代器，不存在则返回 end</span></span><br><span class="line">equal_range(beg, end, val); <span class="comment">// 返回一个 pair，其 first 成员是 lower_bound 返回的迭代器，其 second 成员是 upper_bound 返回的迭代器</span></span><br><span class="line">binary_search(beg, end, val); <span class="comment">// 返回一个 bool 值，指出序列中是否包含等于 val 的元素。对于两个值 x 和 y，当 x 不小于 y 且 y 也不小于 x 时，认为它们相等。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只写不读算法，要求输出迭代器（output iterator）</span></span><br><span class="line">fill(beg, end, val); <span class="comment">// 将 val 赋予每个元素，返回 void</span></span><br><span class="line">fill_n(beg, cnt, val); <span class="comment">// 将 val 赋予 cnt 个元素，返回指向写入到输出序列最有一个元素之后位置的迭代器</span></span><br><span class="line">genetate(beg, end, Gen); <span class="comment">// 每次调用 Gen() 生成不同的值赋予每个序列，返回 void</span></span><br><span class="line">genetate_n(beg, cnt, Gen); <span class="comment">// 每次调用 Gen() 生成不同的值赋予 cnt 个序列，返回指向写入到输出序列最有一个元素之后位置的迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用输入迭代器的写算法，读取一个输入序列，将值写入到一个输出序列（dest）中</span></span><br><span class="line">copy(beg, end, dest); <span class="comment">// 从输入范围将元素拷贝所有元素到 dest 指定定的目的序列</span></span><br><span class="line">copy_if(beg, end, dest, unaryPred); <span class="comment">// 从输入范围将元素拷贝满足 unaryPred 的元素到 dest 指定定的目的序列</span></span><br><span class="line">copy_n(beg, n, dest); <span class="comment">// 从输入范围将元素拷贝前 n 个元素到 dest 指定定的目的序列</span></span><br><span class="line">move(beg, end, dest); <span class="comment">// 对输入序列中的每个元素调用 std::move，将其移动到迭代器 dest 开始始的序列中</span></span><br><span class="line">transform(beg, end, dest, unaryOp); <span class="comment">// 调用给定操作（一元操作），并将结果写到dest中</span></span><br><span class="line">transform(beg, end, beg2, dest, binaryOp); <span class="comment">// 调用给定操作（二元操作），并将结果写到dest中</span></span><br><span class="line">replace_copy(beg, end, dest, old_val, new_val); <span class="comment">// 将每个元素拷贝到 dest，将等于 old_val 的的元素替换为 new_val</span></span><br><span class="line">replace_copy_if(beg, end, dest, unaryPred, new_val); <span class="comment">// 将每个元素拷贝到 dest，将满足 unaryPred 的的元素替换为 new_val</span></span><br><span class="line">merge(beg1, end1, beg2, end2, dest); <span class="comment">// 两个输入序列必须都是有序的，用 &lt; 运算符将合并后的序列写入到 dest 中</span></span><br><span class="line">merge(beg1, end1, beg2, end2, dest, comp); <span class="comment">// 两个输入序列必须都是有序的，使用给定的比较操作（comp）将合并后的序列写入到 dest 中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用前向迭代器的写算法，要求前向迭代器</span></span><br><span class="line">iter_swap(iter1, iter2); <span class="comment">// 交换 iter1 和 iter2 所表示的元素，返回 void</span></span><br><span class="line">swap_ranges(beg1, end1, beg2); <span class="comment">// 将输入范围中所有元素与 beg2 开始的第二个序列中所有元素进行交换。返回递增后的的 beg2，指向最后一个交换元素之后的位置。</span></span><br><span class="line">replace(beg, end, old_val, new_val); <span class="comment">// 用 new_val 替换等于 old_val 的每个匹配元素</span></span><br><span class="line">replace_if(beg, end, unaryPred, new_val); <span class="comment">// 用 new_val 替换满足 unaryPred 的每个匹配元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用双向迭代器的写算法，要求双向选代器（bidirectional iterator）</span></span><br><span class="line">copy_backward(beg, end, dest); <span class="comment">// 从输入范围中拷贝元素到指定目的位置。如果范围为空,则返回值为 dest；否则，返回值表示从 *beg 中拷贝或移动的元素。</span></span><br><span class="line">move_backward(beg, end, dest);  <span class="comment">// 从输入范围中移动元素到指定目的位置。如果范围为空,则返回值为 dest；否则,返回值表示从 *beg 中拷贝或移动的元素。</span></span><br><span class="line">inplace_merge(beg, mid, end); <span class="comment">// 将同一个序列中的两个有序子序列合并为单一的有序序列。beg 到 mid 间的子序列和 mid 到 end 间的子序列被合并，并被写入到原序列中。使用 &lt; 比较元素。</span></span><br><span class="line">inplace_merge(beg, mid, end, comp); <span class="comment">// 将同一个序列中的两个有序子序列合并为单一的有序序列。beg 到 mid 间的子序列和 mid 到 end 间的子序列被合并，并被写入到原序列中。使用给定的 comp 操作。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 划分算法，要求双向选代器（bidirectional iterator）</span></span><br><span class="line">is_partitioned(beg, end, unaryPred); <span class="comment">// 如果所有满足谓词 unaryPred 的元素都在不满足 unarypred 的元素之前，则返回 true。若序列为空，也返回 true</span></span><br><span class="line">partition_copy(beg, end, dest1, dest2, unaryPred); <span class="comment">// 将满足 unaryPred 的元素拷贝到到 dest1，并将不满足 unaryPred 的元素拷贝到到 dest2。返回一个迭代器 pair，其 first 成员表示拷贝到 dest1 的的元素的末尾，second 表示拷贝到 dest2 的元素的末尾。</span></span><br><span class="line">partitioned_point(beg, end, unaryPred); <span class="comment">// 输入序列必须是已经用 unaryPred 划分过的。返回满足  unaryPred 的范围的尾后迭代器。如果返回的迭代器不是 end，则它指向的元素及其后的元素必须都不满足 unaryPred</span></span><br><span class="line">stable_partition(beg, end, unaryPred); <span class="comment">// 使用 unaryPred 划分输入序列。满足 unaryPred 的元素放置在序列开始，不满足的元素放在序列尾部。返回一个迭代器，指向最后一个满足 unaryPred 的元素之后的位置如果所有元素都不满足 unaryPred，则返回 beg</span></span><br><span class="line">partition(beg, end, unaryPred); <span class="comment">// 使用 unaryPred 划分输入序列。满足 unaryPred 的元素放置在序列开始，不满足的元素放在序列尾部。返回一个迭代器，指向最后一个满足 unaryPred 的元素之后的位置如果所有元素都不满足 unaryPred，则返回 beg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序算法，要求随机访问迭代器（random-access iterator）</span></span><br><span class="line">sort(beg, end); <span class="comment">// 排序整个范围</span></span><br><span class="line">stable_sort(beg, end); <span class="comment">// 排序整个范围（稳定排序）</span></span><br><span class="line">sort(beg, end, comp); <span class="comment">// 排序整个范围</span></span><br><span class="line">stable_sort(beg, end, comp); <span class="comment">// 排序整个范围（稳定排序）</span></span><br><span class="line">is_sorted(beg, end); <span class="comment">// 返回一个 bool 值，指出整个输入序列是否有序</span></span><br><span class="line">is_sorted(beg, end, comp); <span class="comment">// 返回一个 bool 值，指出整个输入序列是否有序</span></span><br><span class="line">is_sorted_until(beg, end); <span class="comment">// 在输入序列中査找最长初始有序子序列，并返回子序列的尾后迭代器</span></span><br><span class="line">is_sorted_until(beg, end, comp); <span class="comment">// 在输入序列中査找最长初始有序子序列，并返回子序列的尾后迭代器</span></span><br><span class="line">partial_sort(beg, mid, end); <span class="comment">// 排序 mid-beg 个元素。即，如果 mid-beg 等于 42，则此函数将值最小的 42 个元素有序放在序列前 42 个位置</span></span><br><span class="line">partial_sort(beg, mid, end, comp); <span class="comment">// 排序 mid-beg 个元素。即，如果 mid-beg 等于 42，则此函数将值最小的 42 个元素有序放在序列前 42 个位置</span></span><br><span class="line">partial_sort_copy(beg, end, destBeg, destEnd); <span class="comment">// 排序输入范围中的元素，并将足够多的已排序元素放到 destBeg 和 destEnd 所指示的序列中</span></span><br><span class="line">partial_sort_copy(beg, end, destBeg, destEnd, comp); <span class="comment">// 排序输入范围中的元素，并将足够多的已排序元素放到 destBeg 和 destEnd 所指示的序列中</span></span><br><span class="line">nth_element(beg, nth, end); <span class="comment">// nth 是一个迭代器，指向输入序列中第 n 大的元素。nth 之前的元素都小于等于它，而之后的元素都大于等于它</span></span><br><span class="line">nth_element(beg, nth, end, comp); <span class="comment">// nth 是一个迭代器，指向输入序列中第 n 大的元素。nth 之前的元素都小于等于它，而之后的元素都大于等于它</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用前向迭代器的重排算法。普通版本在输入序列自身内部重拍元素，_copy 版本完成重拍后写入到指定目的序列中，而不改变输入序列</span></span><br><span class="line">remove(beg, end, val); <span class="comment">// 通过用保留的元素覆盖要删除的元素实现删除 ==val 的元素，返回一个指向最后一个删除元素的尾后位置的迭代器</span></span><br><span class="line">remove_if(beg, end, unaryPred); <span class="comment">// 通过用保留的元素覆盖要删除的元素实现删除满足 unaryPred 的元素，返回一个指向最后一个删除元素的尾后位置的迭代器</span></span><br><span class="line">remove_copy(beg, end, dest, val); <span class="comment">// 通过用保留的元素覆盖要删除的元素实现删除 ==val 的元素，返回一个指向最后一个删除元素的尾后位置的迭代器</span></span><br><span class="line">remove_copy_if(beg, end, dest, unaryPred); <span class="comment">// 通过用保留的元素覆盖要删除的元素实现删除满足 unaryPred 的元素，返回一个指向最后一个删除元素的尾后位置的迭代器</span></span><br><span class="line">unique(beg, end); <span class="comment">// 通过对覆盖相邻的重复元素（用 == 确定是否相同）实现重排序列。返回一个迭代器，指向不重复元素的尾后位置</span></span><br><span class="line">unique (beg, end, binaryPred); <span class="comment">// 通过对覆盖相邻的重复元素（用 binaryPred 确定是否相同）实现重排序列。返回一个迭代器，指向不重复元素的尾后位置</span></span><br><span class="line">unique_copy(beg, end, dest); <span class="comment">// 通过对覆盖相邻的重复元素（用 == 确定是否相同）实现重排序列。返回一个迭代器，指向不重复元素的尾后位置</span></span><br><span class="line">unique_copy_if(beg, end, dest, binaryPred); <span class="comment">// 通过对覆盖相邻的重复元素（用 binaryPred 确定是否相同）实现重排序列。返回一个迭代器，指向不重复元素的尾后位置</span></span><br><span class="line">rotate(beg, mid, end); <span class="comment">// 围绕 mid 指向的元素进行元素转动。元素 mid 成为为首元素，随后是 mid+1 到到 end 之前的元素，再接着是 beg 到 mid 之前的元素。返回一个迭代器，指向原来在 beg 位置的元素</span></span><br><span class="line">rotate_copy(beg, mid, end, dest); <span class="comment">// 围绕 mid 指向的元素进行元素转动。元素 mid 成为为首元素，随后是 mid+1 到到 end 之前的元素，再接着是 beg 到 mid 之前的元素。返回一个迭代器，指向原来在 beg 位置的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用双向迭代器的重排算法</span></span><br><span class="line">reverse(beg, end); <span class="comment">// 翻转序列中的元素，返回 void</span></span><br><span class="line">reverse_copy(beg, end, dest);; <span class="comment">// 翻转序列中的元素，返回一个迭代器，指向拷贝到目的序列的元素的尾后位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用随机访问迭代器的重排算法</span></span><br><span class="line">random_shuffle(beg, end); <span class="comment">// 混洗输入序列中的元素，返回 void</span></span><br><span class="line">random_shuffle(beg, end, rand); <span class="comment">// 混洗输入序列中的元素，rand 接受一个正整数的随机对象，返回 void</span></span><br><span class="line">shuffle(beg, end, Uniform_rand); <span class="comment">// 混洗输入序列中的元素，Uniform_rand 必须满足均匀分布随机数生成器的要求，返回 void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最小值和最大值，使用 &lt; 运算符或给定的比较操作 comp 进行比较</span></span><br><span class="line">min(val1, va12); <span class="comment">// 返回 val1 和 val2 中的最小值，两个实参的类型必须完全一致。参数和返回类型都是 const的引引用，意味着对象不会被拷贝。下略</span></span><br><span class="line">min(val1, val2, comp);</span><br><span class="line">min(init_list);</span><br><span class="line">min(init_list, comp);</span><br><span class="line">max(val1, val2);</span><br><span class="line">max(val1, val2, comp);</span><br><span class="line">max(init_list);</span><br><span class="line">max(init_list, comp);</span><br><span class="line">minmax(val1, val2); <span class="comment">// 返回一个 pair，其 first 成员为提供的值中的较小者，second 成员为较大者。下略</span></span><br><span class="line">minmax(vall, val2, comp);</span><br><span class="line">minmax(init_list);</span><br><span class="line">minmax(init_list, comp);</span><br><span class="line">min_element(beg, end); <span class="comment">// 返回指向输入序列中最小元素的迭代器</span></span><br><span class="line">min_element(beg, end, comp); <span class="comment">// 返回指向输入序列中最小元素的迭代器</span></span><br><span class="line">max_element(beg, end); <span class="comment">// 返回指向输入序列中最大元素的迭代器</span></span><br><span class="line">max_element(beg, end, comp); <span class="comment">// 返回指向输入序列中最大元素的迭代器</span></span><br><span class="line">minmax_element(beg, end); <span class="comment">// 返回一个 pair，其中 first 成员为最小元素，second 成员为最大元素</span></span><br><span class="line">minmax_element(beg, end, comp); <span class="comment">// 返回一个 pair，其中 first 成员为最小元素，second 成员为最大元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字典序比较，根据第一对不相等的元素的相对大小来返回结果。如果第一个序列在字典序中小于第二个序列，则返回 true。否则，返回 fa1se。如果个序列比另一个短，且所有元素都与较长序列的对应元素相等，则较短序列在字典序中更小。如果序列长度相等，且对应元素都相等，则在字典序中任何一个都不大于另外一个。</span></span><br><span class="line">lexicographical_compare(beg1, end1, beg2, end2);</span><br><span class="line">lexicographical_compare(beg1, end1, beg2, end2, comp);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;容器（containers）&quot;&gt;&lt;a href=&quot;#容器（containers）&quot; class=&quot;headerlink&quot; title=&quot;容器（containers）&quot;&gt;&lt;/a&gt;容器（containers）&lt;/h1&gt;&lt;h2 id=&quot;array&quot;&gt;&lt;a href=&quot;#array&quot; class=&quot;headerlink&quot; title=&quot;array&quot;&gt;&lt;/a&gt;array&lt;/h2&gt;&lt;p&gt;array 是固定大小的顺序容器，它们保存了一个以严格的线性顺序排列的特定数量的元素。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;begin&lt;/td&gt;
&lt;td&gt;返回指向数组容器中第一个元素的迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;end&lt;/td&gt;
&lt;td&gt;返回指向数组容器中最后一个元素之后的理论元素的迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rbegin&lt;/td&gt;
&lt;td&gt;返回指向数组容器中最后一个元素的反向迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rend&lt;/td&gt;
&lt;td&gt;返回一个反向迭代器，指向数组中第一个元素之前的理论元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cbegin&lt;/td&gt;
&lt;td&gt;返回指向数组容器中第一个元素的常量迭代器（const_iterator）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cend&lt;/td&gt;
&lt;td&gt;返回指向数组容器中最后一个元素之后的理论元素的常量迭代器（const_iterator）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;crbegin&lt;/td&gt;
&lt;td&gt;返回指向数组容器中最后一个元素的常量反向迭代器（const_reverse_iterator）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;crend&lt;/td&gt;
&lt;td&gt;返回指向数组中第一个元素之前的理论元素的常量反向迭代器（const_reverse_iterator）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;返回数组容器中元素的数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max_size&lt;/td&gt;
&lt;td&gt;返回数组容器可容纳的最大元素数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;empty&lt;/td&gt;
&lt;td&gt;返回一个布尔值，指示数组容器是否为空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;operator[]&lt;/td&gt;
&lt;td&gt;返回容器中第 n（参数）个位置的元素的引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;at&lt;/td&gt;
&lt;td&gt;返回容器中第 n（参数）个位置的元素的引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;返回对容器中第一个元素的引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;back&lt;/td&gt;
&lt;td&gt;返回对容器中最后一个元素的引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;返回指向容器中第一个元素的指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fill&lt;/td&gt;
&lt;td&gt;用 val（参数）填充数组所有元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;swap&lt;/td&gt;
&lt;td&gt;通过 x（参数）的内容交换数组的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;get（array）&lt;/td&gt;
&lt;td&gt;形如 &lt;code&gt;std::get&amp;lt;0&amp;gt;(myarray)&lt;/code&gt;；传入一个数组容器，返回指定位置元素的引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;relational operators (array)&lt;/td&gt;
&lt;td&gt;形如 &lt;code&gt;arrayA &amp;gt; arrayB&lt;/code&gt;；依此比较数组每个元素的大小关系&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
    
    </summary>
    
      <category term="C++" scheme="https://kaaier.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://kaaier.github.io/tags/C/"/>
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>CVPR(Latest paper learning)</title>
    <link href="https://kaaier.github.io/2019/06/15/CVPR(Latest%20paper%20learning)/"/>
    <id>https://kaaier.github.io/2019/06/15/CVPR(Latest paper learning)/</id>
    <published>2019-06-15T03:21:20.000Z</published>
    <updated>2019-08-06T15:56:02.723Z</updated>
    
    <content type="html"><![CDATA[<h5 id="CVPR关于目标检测最新论文-2D目标检测、3D目标检测、视频目标检测"><a href="#CVPR关于目标检测最新论文-2D目标检测、3D目标检测、视频目标检测" class="headerlink" title="CVPR关于目标检测最新论文(2D目标检测、3D目标检测、视频目标检测)."></a>CVPR关于目标检测最新论文(2D目标检测、3D目标检测、视频目标检测).</h5><p>2019-07-24 Update 1 paper</p><p><strong>A Survey of Deep Learning-based Object Detection</strong></p><ul><li><p>intro：From Fast R-CNN to NAS-FPN</p></li><li><p>arXiv：<a href="https://arxiv.org/abs/1907.09408" target="_blank" rel="noopener">https://arxiv.org/abs/1907.09408</a></p></li></ul><p>2019-05-17 Update 1 paper</p> <a id="more"></a><p><strong>Object Detection in 20 Years: A Survey</strong></p><ul><li>intro：This work has been submitted to the IEEE TPAMI for possible publication</li><li>arXiv：<a href="https://arxiv.org/abs/1905.05055" target="_blank" rel="noopener">https://arxiv.org/abs/1905.05055</a></li></ul><p>2019-04-05 Update 1 paper</p><p><strong>Comparison Network for One-Shot Conditional Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1904.02317" target="_blank" rel="noopener">https://arxiv.org/abs/1904.02317</a></li></ul><p>2019-03-05 Update 1 paper</p><p><strong>Feature Selective Anchor-Free Module for Single-Shot Object Detection</strong></p><ul><li>intro: CVPR 2019</li><li>arXiv: <a href="https://arxiv.org/abs/1903.00621" target="_blank" rel="noopener">https://arxiv.org/abs/1903.00621</a></li></ul><p>2019-02-15 Update 3 detection toolbox</p><ul><li><p><a href="https://github.com/facebookresearch/Detectron" target="_blank" rel="noopener">Detectron(FAIR)</a>: Detectron is Facebook AI Research’s software system that implements state-of-the-art object detection algorithms, including <a href="https://arxiv.org/abs/1703.06870" target="_blank" rel="noopener">Mask R-CNN</a>. It is written in Python and powered by the <a href="https://github.com/caffe2/caffe2" target="_blank" rel="noopener">Caffe2</a> deep learning framework.</p></li><li><p><a href="https://github.com/facebookresearch/maskrcnn-benchmark" target="_blank" rel="noopener">maskrcnn-benchmark(FAIR)</a>: Fast, modular reference implementation of Instance Segmentation and Object Detection algorithms in PyTorch.</p></li><li><p><a href="https://github.com/open-mmlab/mmdetection" target="_blank" rel="noopener">mmdetection(SenseTime&amp;CUHK)</a>: mmdetection is an open source object detection toolbox based on PyTorch. It is a part of the open-mmlab project developed by <a href="http://mmlab.ie.cuhk.edu.hk/" target="_blank" rel="noopener">Multimedia Laboratory, CUHK</a>.</p></li></ul><p>2019-01-25 Update 5 papers</p><p><strong>3D Backbone Network for 3D Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1901.08373" target="_blank" rel="noopener">https://arxiv.org/abs/1901.08373</a></li></ul><p><strong>Object Detection based on Region Decomposition and Assembly</strong></p><ul><li><p>intro: AAAI 2019</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1901.08225" target="_blank" rel="noopener">https://arxiv.org/abs/1901.08225</a></p></li></ul><p><strong>Bottom-up Object Detection by Grouping Extreme and Center Points</strong></p><ul><li>intro: one stage 43.2% on COCO test-dev</li><li>arXiv: <a href="https://arxiv.org/abs/1901.08043" target="_blank" rel="noopener">https://arxiv.org/abs/1901.08043</a></li><li>github: <a href="https://github.com/xingyizhou/ExtremeNet" target="_blank" rel="noopener">https://github.com/xingyizhou/ExtremeNet</a></li></ul><p><strong>ORSIm Detector: A Novel Object Detection Framework in Optical Remote Sensing Imagery Using Spatial-Frequency Channel Features</strong></p><ul><li><p>intro: IEEE TRANSACTIONS ON GEOSCIENCE AND REMOTE SENSING</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1901.07925" target="_blank" rel="noopener">https://arxiv.org/abs/1901.07925</a></p></li></ul><p><strong>Consistent Optimization for Single-Shot Object Detection</strong></p><ul><li><p>intro: improves RetinaNet from 39.1 AP to 40.1 AP on COCO datase</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1901.06563" target="_blank" rel="noopener">https://arxiv.org/abs/1901.06563</a></p></li></ul><p>2019-01-15 Update 1 paper</p><p><strong>Learning Pairwise Relationship for Multi-object Detection in Crowded Scenes</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1901.03796" target="_blank" rel="noopener">https://arxiv.org/abs/1901.03796</a></li></ul><p>2019-01-14 Update 1 paper</p><p><strong>RetinaMask: Learning to predict masks improves state-of-the-art single-shot detection for free</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1901.03353" target="_blank" rel="noopener">https://arxiv.org/abs/1901.03353</a></li><li>github: <a href="https://github.com/chengyangfu/retinamask" target="_blank" rel="noopener">https://github.com/chengyangfu/retinamask</a></li></ul><p>2019-01-12 Update 1 paper</p><p><strong>Region Proposal by Guided Anchoring</strong></p><ul><li>intro: CUHK - SenseTime Joint Lab</li><li>arXiv: <a href="https://arxiv.org/abs/1901.03278" target="_blank" rel="noopener">https://arxiv.org/abs/1901.03278</a></li></ul><p>2019-01-08 Update 1 paper</p><p><strong>Scale-Aware Trident Networks for Object Detection</strong></p><ul><li>intro: mAP of <strong>48.4</strong> on the COCO dataset</li><li>arXiv: <a href="https://arxiv.org/abs/1901.01892" target="_blank" rel="noopener">https://arxiv.org/abs/1901.01892</a></li></ul><p>2019-01-04 Update 1 paper</p><p><strong>Large-Scale Object Detection of Images from Network Cameras in Variable Ambient Lighting Conditions</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.11901" target="_blank" rel="noopener">https://arxiv.org/abs/1812.11901</a></li></ul><p>2018-12-13 Update 1 paper</p><p><strong>Strong-Weak Distribution Alignment for Adaptive Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.04798" target="_blank" rel="noopener">https://arxiv.org/abs/1812.04798</a></li></ul><p>2018-12-05 Update 3 papers</p><p><strong>AutoFocus: Efficient Multi-Scale Inference</strong></p><ul><li>intro: AutoFocus obtains an <strong>mAP of 47.9%</strong> (68.3% at 50% overlap) on the <strong>COCO test-dev</strong> set while processing <strong>6.4 images per second on a Titan X (Pascal) GPU</strong> </li><li>arXiv: <a href="https://arxiv.org/abs/1812.01600" target="_blank" rel="noopener">https://arxiv.org/abs/1812.01600</a></li></ul><p><strong>NOTE-RCNN: NOise Tolerant Ensemble RCNN for Semi-Supervised Object Detection</strong></p><ul><li>intro: Google Could</li><li>arXiv: <a href="https://arxiv.org/abs/1812.00124" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00124</a></li></ul><p><strong>SPLAT: Semantic Pixel-Level Adaptation Transforms for Detection</strong></p><ul><li>intro: UC Berkeley</li><li>arXiv: <a href="https://arxiv.org/abs/1812.00929" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00929</a></li></ul><p>2018-12-04 Update 10 papers</p><p><strong>Grid R-CNN</strong></p><ul><li>intro: SenseTime</li><li>arXiv: <a href="https://arxiv.org/abs/1811.12030" target="_blank" rel="noopener">https://arxiv.org/abs/1811.12030</a></li></ul><p><strong>Deformable ConvNets v2: More Deformable, Better Results</strong></p><ul><li><p>intro: Microsoft Research Asia</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1811.11168" target="_blank" rel="noopener">https://arxiv.org/abs/1811.11168</a></p></li></ul><p><strong>Anchor Box Optimization for Object Detection</strong></p><ul><li>intro: Microsoft Research</li><li>arXiv: <a href="https://arxiv.org/abs/1812.00469" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00469</a></li></ul><p><strong>Efficient Coarse-to-Fine Non-Local Module for the Detection of Small Objects</strong></p><ul><li>intro: <a href="https://arxiv.org/abs/1811.12152" target="_blank" rel="noopener">https://arxiv.org/abs/1811.12152</a></li></ul><p><strong>NOTE-RCNN: NOise Tolerant Ensemble RCNN for Semi-Supervised Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.00124" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00124</a></li></ul><p><strong>Learning RoI Transformer for Detecting Oriented Objects in Aerial Images</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.00155" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00155</a></li></ul><p><strong>Integrated Object Detection and Tracking with Tracklet-Conditioned Detection</strong></p><ul><li>intro: Microsoft Research Asia</li><li>arXiv: <a href="https://arxiv.org/abs/1811.11167" target="_blank" rel="noopener">https://arxiv.org/abs/1811.11167</a></li></ul><p><strong>Deep Regionlets: Blended Representation and Deep Learning for Generic Object Detection</strong></p><ul><li><p>arXiv: <a href="https://arxiv.org/abs/1811.11318" target="_blank" rel="noopener">https://arxiv.org/abs/1811.11318</a></p><p><strong>Gradient Harmonized Single-stage Detector</strong></p></li><li><p>intro: AAAI 2019</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1811.05181" target="_blank" rel="noopener">https://arxiv.org/abs/1811.05181</a></p></li></ul><p><strong>CFENet: Object Detection with Comprehensive Feature Enhancement Module</strong></p><ul><li>intro: ACCV 2018</li><li>github: <a href="https://github.com/qijiezhao/CFENet" target="_blank" rel="noopener">https://github.com/qijiezhao/CFENet</a></li></ul><p>2018-11-19</p><p><strong>DeRPN: Taking a further step toward more general object detection</strong></p><ul><li>intro: AAAI 2019</li><li>arXiv: <a href="https://arxiv.org/abs/1811.06700" target="_blank" rel="noopener">https://arxiv.org/abs/1811.06700</a></li><li>github: <a href="https://github.com/HCIILAB/DeRPN" target="_blank" rel="noopener">https://github.com/HCIILAB/DeRPN</a></li></ul><p>2018-11-14</p><p><strong>M2Det: A Single-Shot Object Detector based on Multi-Level Feature Pyramid Network</strong></p><ul><li>intro: AAAI 2019</li><li>arXiv: <a href="https://arxiv.org/abs/1811.04533" target="_blank" rel="noopener">https://arxiv.org/abs/1811.04533</a></li><li>github: <a href="https://github.com/qijiezhao/M2Det" target="_blank" rel="noopener">https://github.com/qijiezhao/M2Det</a></li></ul><p>2018-10-31</p><p><strong>Hybrid Knowledge Routed Modules for Large-scale Object Detection</strong></p><ul><li>intro: Sun Yat-Sen University &amp; Huawei Noah’s Ark Lab</li><li>arXiv: <a href="https://arxiv.org/abs/1810.12681" target="_blank" rel="noopener">https://arxiv.org/abs/1810.12681</a></li><li>github: <a href="https://github.com/chanyn/HKRM" target="_blank" rel="noopener">https://github.com/chanyn/HKRM</a></li></ul><p>2018-10-08</p><p><strong>Weakly Supervised Object Detection in Artworks</strong></p><ul><li>intro: ECCV 2018 Workshop Computer Vision for Art Analysis</li><li>arXiv: <a href="https://arxiv.org/abs/1810.02569" target="_blank" rel="noopener">https://arxiv.org/abs/1810.02569</a></li><li>Datasets: <a href="https://wsoda.telecom-paristech.fr/downloads/dataset/IconArt_v1.zip" target="_blank" rel="noopener">https://wsoda.telecom-paristech.fr/downloads/dataset/IconArt_v1.zip</a></li></ul><p><strong>Cross-Domain Weakly-Supervised Object Detection through Progressive Domain Adaptation</strong></p><ul><li>intro: CVPR 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1803.11365" target="_blank" rel="noopener">https://arxiv.org/abs/1803.11365</a></li><li>homepage: <a href="https://naoto0804.github.io/cross_domain_detection/" target="_blank" rel="noopener">https://naoto0804.github.io/cross_domain_detection/</a></li><li>paper: <a href="http://openaccess.thecvf.com/content_cvpr_2018/html/Inoue_Cross-Domain_Weakly-Supervised_Object_CVPR_2018_paper.html" target="_blank" rel="noopener">http://openaccess.thecvf.com/content_cvpr_2018/html/Inoue_Cross-Domain_Weakly-Supervised_Object_CVPR_2018_paper.html</a></li><li>github: <a href="https://github.com/naoto0804/cross-domain-detection" target="_blank" rel="noopener">https://github.com/naoto0804/cross-domain-detection</a></li></ul><p>2018-09-26</p><p><strong>Object Detection from Scratch with Deep Supervision</strong></p><ul><li>intro: This is an extended version of DSOD</li><li>arXiv: <a href="https://arxiv.org/abs/1809.09294" target="_blank" rel="noopener">https://arxiv.org/abs/1809.09294</a></li></ul><p>2018-09-25</p><p><strong>《Softer-NMS: Rethinking Bounding Box Regression for Accurate Object Detection》</strong></p><ul><li>intro: CMU &amp; Face++</li><li>arXiv: <a href="https://arxiv.org/abs/1809.08545" target="_blank" rel="noopener">https://arxiv.org/abs/1809.08545</a></li><li>github: <a href="https://github.com/yihui-he/softer-NMS" target="_blank" rel="noopener">https://github.com/yihui-he/softer-NMS</a></li></ul><p>2018-09-21</p><p><strong>《Receptive Field Block Net for Accurate and Fast Object Detection》</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1711.07767" target="_blank" rel="noopener">https://arxiv.org/abs/1711.07767</a></li><li>github: <a href="https://github.com/ruinmessi/RFBNet" target="_blank" rel="noopener">https://github.com/ruinmessi/RFBNet</a></li></ul><p>2018-09-11</p><p><strong>《Recent Advances in Object Detection in the Age of Deep Convolutional Neural Networks》</strong></p><ul><li>intro: awesome</li></ul><ul><li>arXiv: <a href="https://arxiv.org/abs/1809.03193" target="_blank" rel="noopener">https://arxiv.org/abs/1809.03193</a></li></ul><p>2018-09-10</p><p><strong>《Deep Learning for Generic Object Detection: A Survey》</strong></p><ul><li>intro: Submitted to IJCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1809.02165" target="_blank" rel="noopener">https://arxiv.org/abs/1809.02165</a></li></ul><p>2018-08-27</p><p><strong>Deep Feature Pyramid Reconfiguration for Object Detection</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1808.07993" target="_blank" rel="noopener">https://arxiv.org/abs/1808.07993</a></li></ul><p>2018-08-17</p><p><strong>R3-Net: A Deep Network for Multi-oriented Vehicle Detection in Aerial Images and Videos</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1808.05560" target="_blank" rel="noopener">https://arxiv.org/abs/1808.05560</a></li><li>youtube: <a href="https://youtu.be/xCYD-tYudN0" target="_blank" rel="noopener">https://youtu.be/xCYD-tYudN0</a></li></ul><p>2018-08-14</p><p><strong>《Unsupervised Hard Example Mining from Videos for Improved Object Detection》</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1808.04285" target="_blank" rel="noopener">https://arxiv.org/abs/1808.04285</a></li></ul><p>2018-08-10</p><p><strong>CornerNet: Detecting Objects as Paired Keypoints</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1808.01244" target="_blank" rel="noopener">https://arxiv.org/abs/1808.01244</a></li></ul><p>2018-07-30</p><p><strong>Acquisition of Localization Confidence for Accurate Object Detection</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1807.11590" target="_blank" rel="noopener">https://arxiv.org/abs/1807.11590</a></li><li>github: <a href="https://github.com/vacancy/PreciseRoIPooling" target="_blank" rel="noopener">https://github.com/vacancy/PreciseRoIPooling</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;CVPR关于目标检测最新论文-2D目标检测、3D目标检测、视频目标检测&quot;&gt;&lt;a href=&quot;#CVPR关于目标检测最新论文-2D目标检测、3D目标检测、视频目标检测&quot; class=&quot;headerlink&quot; title=&quot;CVPR关于目标检测最新论文(2D目标检测、3D目标检测、视频目标检测).&quot;&gt;&lt;/a&gt;CVPR关于目标检测最新论文(2D目标检测、3D目标检测、视频目标检测).&lt;/h5&gt;&lt;p&gt;2019-07-24 Update 1 paper&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Survey of Deep Learning-based Object Detection&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;intro：From Fast R-CNN to NAS-FPN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;arXiv：&lt;a href=&quot;https://arxiv.org/abs/1907.09408&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://arxiv.org/abs/1907.09408&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2019-05-17 Update 1 paper&lt;/p&gt;
    
    </summary>
    
      <category term="Computer-Vision" scheme="https://kaaier.github.io/categories/Computer-Vision/"/>
    
    
      <category term="CV" scheme="https://kaaier.github.io/tags/CV/"/>
    
      <category term="Object-Detection" scheme="https://kaaier.github.io/tags/Object-Detection/"/>
    
  </entry>
  
  <entry>
    <title>Non-Maximum-Suppression</title>
    <link href="https://kaaier.github.io/2019/05/25/NMS/"/>
    <id>https://kaaier.github.io/2019/05/25/NMS/</id>
    <published>2019-05-24T17:22:11.000Z</published>
    <updated>2019-08-06T16:13:58.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Non-Maximum-Suppression"><a href="#Non-Maximum-Suppression" class="headerlink" title="Non-Maximum-Suppression"></a>Non-Maximum-Suppression</h1><p><strong>非极大值抑制（Non-Maximum-Suppression，NMS）</strong>是抑制非极大值的元素，可以理解为局部最大搜索。NMS算法在计算机视觉中有广泛应用，特别是目标检测领域。本文将以目标检测举例，讨论NMS算法的实现过程。</p><p>TODO:</p><p>记录关于NMS的相关实现以及SoftNMS等目标检测后处理方法</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.vision.ee.ethz.ch/publications/papers/proceedings/eth_biwi_00446.pdf" target="_blank" rel="noopener">《Efficient Non-Maximum Suppression》</a></li><li><a href="https://www.cnblogs.com/makefile/p/nms.html" target="_blank" rel="noopener">非极大值抑制（Non-Maximum Suppression，NMS）</a></li><li><a href="https://blog.csdn.net/shuzfan/article/details/52711706" target="_blank" rel="noopener">NMS——非极大值抑制</a></li><li><a href="https://blog.csdn.net/danieljianfeng/article/details/43084875" target="_blank" rel="noopener">非极大抑制（Non-Maximum Suppression）</a></li><li><a href="https://zh.coursera.org/lecture/convolutional-neural-networks/non-max-suppression-dvrjH" target="_blank" rel="noopener">吴恩达（Non-max Suppression）视频</a></li><li><a href="https://www.pyimagesearch.com/2014/11/17/non-maximum-suppression-object-detection-python/" target="_blank" rel="noopener">Non-Maximum Suppression for Object Detection in Python</a></li><li><a href="http://noahsnail.com/2017/12/13/2017-12-13-非极大值抑制(Non-Maximum%20Suppression)/" target="_blank" rel="noopener">非极大值抑制(Non-Maximum Suppression)</a></li><li><a href="https://github.com/watersink/nonMaximumSuppression" target="_blank" rel="noopener">nonMaximumSuppression</a>：非极大值抑制，包含了matlab，c,，c++，3种实现的代码</li><li><a href="https://github.com/Nuzhny007/Non-Maximum-Suppression" target="_blank" rel="noopener">Non-Maximum-Suppression</a>：C++实现</li><li><a href="https://github.com/SnailTyan/deep-learning-tools" target="_blank" rel="noopener">deep-learning-tools</a>：Python实现</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Non-Maximum-Suppression&quot;&gt;&lt;a href=&quot;#Non-Maximum-Suppression&quot; class=&quot;headerlink&quot; title=&quot;Non-Maximum-Suppression&quot;&gt;&lt;/a&gt;Non-Maximum-Suppr
      
    
    </summary>
    
      <category term="Computer-Vision" scheme="https://kaaier.github.io/categories/Computer-Vision/"/>
    
    
      <category term="Object-Detection" scheme="https://kaaier.github.io/tags/Object-Detection/"/>
    
      <category term="Computer-Vision" scheme="https://kaaier.github.io/tags/Computer-Vision/"/>
    
  </entry>
  
  <entry>
    <title>Reinforcement Learning  Tutorila</title>
    <link href="https://kaaier.github.io/2019/04/15/Reinforcement-learning/"/>
    <id>https://kaaier.github.io/2019/04/15/Reinforcement-learning/</id>
    <published>2019-04-15T02:24:10.000Z</published>
    <updated>2019-08-06T16:10:57.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reinforcement-Learning-Methods-and-Tutorials"><a href="#Reinforcement-Learning-Methods-and-Tutorials" class="headerlink" title="Reinforcement Learning Methods and Tutorials"></a>Reinforcement Learning Methods and Tutorials</h1><h5 id="转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files"><a href="#转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files" class="headerlink" title="转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接 liufuyang’s notebook files"></a>转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接 <a href="https://github.com/liufuyang" target="_blank" rel="noopener">liufuyang’s</a> <a href="https://github.com/MorvanZhou/PyTorch-Tutorial/tree/master/tutorial-contents-notebooks" target="_blank" rel="noopener"><strong>notebook files</strong></a></h5><h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul><li>Tutorials<ul><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/1_command_line_reinforcement_learning" target="_blank" rel="noopener">Simple entry example</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/2_Q_Learning_maze" target="_blank" rel="noopener">Q-learning</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/3_Sarsa_maze" target="_blank" rel="noopener">Sarsa</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/4_Sarsa_lambda_maze" target="_blank" rel="noopener">Sarsa(lambda)</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5_Deep_Q_Network" target="_blank" rel="noopener">Deep Q Network (DQN)</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/6_OpenAI_gym" target="_blank" rel="noopener">Using OpenAI Gym</a><a id="more"></a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.1_Double_DQN" target="_blank" rel="noopener">Double DQN</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.2_Prioritized_Replay_DQN" target="_blank" rel="noopener">DQN with Prioitized Experience Replay</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.3_Dueling_DQN" target="_blank" rel="noopener">Dueling DQN</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/7_Policy_gradient_softmax" target="_blank" rel="noopener">Policy Gradients</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/8_Actor_Critic_Advantage" target="_blank" rel="noopener">Actor-Critic</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/9_Deep_Deterministic_Policy_Gradient_DDPG" target="_blank" rel="noopener">Deep Deterministic Policy Gradient (DDPG)</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/10_A3C" target="_blank" rel="noopener">A3C</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/11_Dyna_Q" target="_blank" rel="noopener">Dyna-Q</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/12_Proximal_Policy_Optimization" target="_blank" rel="noopener">Proximal Policy Optimization (PPO)</a></li><li><a href="/contents/Curiosity_Model">Curiosity Model</a>, <a href="/contents/Curiosity_Model/Random_Network_Distillation.py">Random Network Distillation (RND)</a></li></ul></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/experiments" target="_blank" rel="noopener">Some of my experiments</a><ul><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/experiments/2D_car" target="_blank" rel="noopener">2D Car</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/experiments/Robot_arm" target="_blank" rel="noopener">Robot arm</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/experiments/Solve_BipedalWalker" target="_blank" rel="noopener">BipedalWalker</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/experiments/Solve_LunarLander" target="_blank" rel="noopener">LunarLander</a></li></ul></li></ul><h1 id="Some-RL-Networks"><a href="#Some-RL-Networks" class="headerlink" title="Some RL Networks"></a>Some RL Networks</h1><h3 id="Deep-Q-Network"><a href="#Deep-Q-Network" class="headerlink" title="Deep Q Network"></a><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5_Deep_Q_Network" target="_blank" rel="noopener">Deep Q Network</a></h3><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5_Deep_Q_Network" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/reinforcement-learning/4-3-2.png"></a><h3 id="Double-DQN"><a href="#Double-DQN" class="headerlink" title="Double DQN"></a><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.1_Double_DQN" target="_blank" rel="noopener">Double DQN</a></h3><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.1_Double_DQN" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/reinforcement-learning/4-5-3.png"></a><h3 id="Dueling-DQN"><a href="#Dueling-DQN" class="headerlink" title="Dueling DQN"></a><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.3_Dueling_DQN" target="_blank" rel="noopener">Dueling DQN</a></h3><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.3_Dueling_DQN" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/reinforcement-learning/4-7-4.png"></a><h3 id="Actor-Critic"><a href="#Actor-Critic" class="headerlink" title="Actor Critic"></a><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/8_Actor_Critic_Advantage" target="_blank" rel="noopener">Actor Critic</a></h3><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/8_Actor_Critic_Advantage" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/reinforcement-learning/6-1-1.png"></a><h3 id="Deep-Deterministic-Policy-Gradient"><a href="#Deep-Deterministic-Policy-Gradient" class="headerlink" title="Deep Deterministic Policy Gradient"></a><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/9_Deep_Deterministic_Policy_Gradient_DDPG" target="_blank" rel="noopener">Deep Deterministic Policy Gradient</a></h3><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/9_Deep_Deterministic_Policy_Gradient_DDPG" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/reinforcement-learning/6-2-2.png"></a><h3 id="A3C"><a href="#A3C" class="headerlink" title="A3C"></a><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/10_A3C" target="_blank" rel="noopener">A3C</a></h3><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/10_A3C" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/reinforcement-learning/6-3-2.png"></a><h3 id="Proximal-Policy-Optimization-PPO"><a href="#Proximal-Policy-Optimization-PPO" class="headerlink" title="Proximal Policy Optimization (PPO)"></a><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/12_Proximal_Policy_Optimization" target="_blank" rel="noopener">Proximal Policy Optimization (PPO)</a></h3><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/12_Proximal_Policy_Optimization" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/reinforcement-learning/6-4-3.png"></a><h3 id="Curiosity-Model"><a href="#Curiosity-Model" class="headerlink" title="Curiosity Model"></a><a href="/contents/Curiosity_Model">Curiosity Model</a></h3><a href="/contents/Curiosity_Model">    <img class="course-image" src="/contents/Curiosity_Model/Curiosity.png"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Reinforcement-Learning-Methods-and-Tutorials&quot;&gt;&lt;a href=&quot;#Reinforcement-Learning-Methods-and-Tutorials&quot; class=&quot;headerlink&quot; title=&quot;Reinforcement Learning Methods and Tutorials&quot;&gt;&lt;/a&gt;Reinforcement Learning Methods and Tutorials&lt;/h1&gt;&lt;h5 id=&quot;转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files&quot;&gt;&lt;a href=&quot;#转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files&quot; class=&quot;headerlink&quot; title=&quot;转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接 liufuyang’s notebook files&quot;&gt;&lt;/a&gt;转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接 &lt;a href=&quot;https://github.com/liufuyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;liufuyang’s&lt;/a&gt; &lt;a href=&quot;https://github.com/MorvanZhou/PyTorch-Tutorial/tree/master/tutorial-contents-notebooks&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;notebook files&lt;/strong&gt;&lt;/a&gt;&lt;/h5&gt;&lt;h1 id=&quot;Table-of-Contents&quot;&gt;&lt;a href=&quot;#Table-of-Contents&quot; class=&quot;headerlink&quot; title=&quot;Table of Contents&quot;&gt;&lt;/a&gt;Table of Contents&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Tutorials&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/1_command_line_reinforcement_learning&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Simple entry example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/2_Q_Learning_maze&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Q-learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/3_Sarsa_maze&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sarsa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/4_Sarsa_lambda_maze&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sarsa(lambda)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5_Deep_Q_Network&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Deep Q Network (DQN)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/6_OpenAI_gym&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Using OpenAI Gym&lt;/a&gt;
    
    </summary>
    
      <category term="Deep-Learning" scheme="https://kaaier.github.io/categories/Deep-Learning/"/>
    
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
      <category term="Deep-Learning" scheme="https://kaaier.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow Tutorials</title>
    <link href="https://kaaier.github.io/2019/03/16/Tensorflow%20Tutorila/"/>
    <id>https://kaaier.github.io/2019/03/16/Tensorflow Tutorila/</id>
    <published>2019-03-16T03:21:20.000Z</published>
    <updated>2019-08-06T16:08:12.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tensorflow-Tutorials"><a href="#Tensorflow-Tutorials" class="headerlink" title="Tensorflow Tutorials"></a>Tensorflow Tutorials</h1><h5 id="转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files"><a href="#转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files" class="headerlink" title="转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接 liufuyang’s notebook files"></a>转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接 <a href="https://github.com/liufuyang" target="_blank" rel="noopener">liufuyang’s</a> <a href="https://github.com/MorvanZhou/PyTorch-Tutorial/tree/master/tutorial-contents-notebooks" target="_blank" rel="noopener"><strong>notebook files</strong></a></h5><ul><li>Tensorflow basic<ul><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/201_session.py" target="_blank" rel="noopener">Session</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/202_placeholder.py" target="_blank" rel="noopener">Placeholder</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/203_variable.py" target="_blank" rel="noopener">Variable</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/204_activation.py" target="_blank" rel="noopener">Activation</a></li></ul></li><li>Build your first network<ul><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/301_simple_regression.py" target="_blank" rel="noopener">Regression</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/302_simple_classification.py" target="_blank" rel="noopener">Classification</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/303_save_reload.py" target="_blank" rel="noopener">Save and reload</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/304_optimizer.py" target="_blank" rel="noopener">Optimizers</a><a id="more"></a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/305_tensorboard.py" target="_blank" rel="noopener">Tensorboard</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/306_dataset.py" target="_blank" rel="noopener">Dataset</a></li></ul></li><li>Advanced neural network<ul><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/401_CNN.py" target="_blank" rel="noopener">CNN</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/402_RNN_classification.py" target="_blank" rel="noopener">RNN-Classification</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/403_RNN_regression.py" target="_blank" rel="noopener">RNN-Regression</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/404_AutoEncoder.py" target="_blank" rel="noopener">AutoEncoder</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/405_DQN_reinforcement_learning.py" target="_blank" rel="noopener">DQN Reinforcement Learning</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/406_GAN.py" target="_blank" rel="noopener">GAN (Generative Adversarial Nets)</a> / <a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/406_conditional_GAN.py" target="_blank" rel="noopener">Conditional GAN</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/407_transfer_learning.py" target="_blank" rel="noopener">Transfer Learning</a></li></ul></li><li>Others (WIP)<ul><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/501_dropout.py" target="_blank" rel="noopener">Dropout</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/502_batch_normalization.py" target="_blank" rel="noopener">Batch Normalization</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/503_visualize_gradient_descent.py" target="_blank" rel="noopener">Visualize Gradient Descent</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/504_distributed_training.py" target="_blank" rel="noopener">Distributed training</a></li></ul></li></ul><h3 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/301_simple_regression.py" target="_blank" rel="noopener">Regression</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/301_simple_regression.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/1-1-2.gif"></a><h3 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/302_simple_classification.py" target="_blank" rel="noopener">Classification</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/302_simple_classification.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/1-1-3.gif"></a><h3 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/401_CNN.py" target="_blank" rel="noopener">CNN</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/401_CNN.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-1-2.gif"></a><h3 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/403_RNN_regression.py" target="_blank" rel="noopener">RNN</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/403_RNN_regression.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-3-1.gif"></a><h3 id="Autoencoder"><a href="#Autoencoder" class="headerlink" title="Autoencoder"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/404_AutoEncoder.py" target="_blank" rel="noopener">Autoencoder</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/404_AutoEncoder.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-4-1.gif"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/404_AutoEncoder.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-4-2.gif"></a><h3 id="GAN-Generative-Adversarial-Nets"><a href="#GAN-Generative-Adversarial-Nets" class="headerlink" title="GAN (Generative Adversarial Nets)"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/406_GAN.py" target="_blank" rel="noopener">GAN (Generative Adversarial Nets)</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/406_GAN.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-6-1.gif"></a><h3 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/501_dropout.py" target="_blank" rel="noopener">Dropout</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/501_dropout.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/5-3-1.gif"></a><h3 id="Batch-Normalization"><a href="#Batch-Normalization" class="headerlink" title="Batch Normalization"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/502_batch_normalization.py" target="_blank" rel="noopener">Batch Normalization</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/502_batch_normalization.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/5-4-2.gif"></a><h3 id="Visualize-Gradient-Descent"><a href="#Visualize-Gradient-Descent" class="headerlink" title="Visualize Gradient Descent"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/503_visualize_gradient_descent.py" target="_blank" rel="noopener">Visualize Gradient Descent</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/503_visualize_gradient_descent.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/tensorflow/5_15_01.gif"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Tensorflow-Tutorials&quot;&gt;&lt;a href=&quot;#Tensorflow-Tutorials&quot; class=&quot;headerlink&quot; title=&quot;Tensorflow Tutorials&quot;&gt;&lt;/a&gt;Tensorflow Tutorials&lt;/h1&gt;&lt;h5 id=&quot;转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files&quot;&gt;&lt;a href=&quot;#转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files&quot; class=&quot;headerlink&quot; title=&quot;转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接 liufuyang’s notebook files&quot;&gt;&lt;/a&gt;转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接 &lt;a href=&quot;https://github.com/liufuyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;liufuyang’s&lt;/a&gt; &lt;a href=&quot;https://github.com/MorvanZhou/PyTorch-Tutorial/tree/master/tutorial-contents-notebooks&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;notebook files&lt;/strong&gt;&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Tensorflow basic&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/201_session.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/202_placeholder.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Placeholder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/203_variable.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/204_activation.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Activation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Build your first network&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/301_simple_regression.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/302_simple_classification.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Classification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/303_save_reload.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Save and reload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/304_optimizer.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Optimizers&lt;/a&gt;
    
    </summary>
    
      <category term="Deep-Learning" scheme="https://kaaier.github.io/categories/Deep-Learning/"/>
    
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
      <category term="Deep-Learning" scheme="https://kaaier.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch Tutorila</title>
    <link href="https://kaaier.github.io/2019/03/15/Pytorch%20Tutorila/"/>
    <id>https://kaaier.github.io/2019/03/15/Pytorch Tutorila/</id>
    <published>2019-03-15T03:21:20.000Z</published>
    <updated>2019-08-06T16:02:55.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyTorch-Tutorials"><a href="#pyTorch-Tutorials" class="headerlink" title="pyTorch Tutorials"></a>pyTorch Tutorials</h1><h5 id="转自莫烦大佬Pytorch学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files"><a href="#转自莫烦大佬Pytorch学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files" class="headerlink" title="转自莫烦大佬Pytorch学习教程，方便自己后期知识巩固。感谢！教程链接 liufuyang’s notebook files"></a>转自莫烦大佬Pytorch学习教程，方便自己后期知识巩固。感谢！教程链接 <a href="https://github.com/liufuyang" target="_blank" rel="noopener">liufuyang’s</a> <a href="https://github.com/MorvanZhou/PyTorch-Tutorial/tree/master/tutorial-contents-notebooks" target="_blank" rel="noopener"><strong>notebook files</strong></a></h5><ul><li>pyTorch basic<ul><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/201_torch_numpy.py" target="_blank" rel="noopener">torch and numpy</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/202_variable.py" target="_blank" rel="noopener">Variable</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/203_activation.py" target="_blank" rel="noopener">Activation</a></li></ul></li><li>Build your first network<ul><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/301_regression.py" target="_blank" rel="noopener">Regression</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/302_classification.py" target="_blank" rel="noopener">Classification</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/303_build_nn_quickly.py" target="_blank" rel="noopener">An easy way</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/304_save_reload.py" target="_blank" rel="noopener">Save and reload</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/305_batch_train.py" target="_blank" rel="noopener">Train on batch</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/306_optimizer.py" target="_blank" rel="noopener">Optimizers</a></li></ul></li><li>Advanced neural network<ul><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/401_CNN.py" target="_blank" rel="noopener">CNN</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/402_RNN_classifier.py" target="_blank" rel="noopener">RNN-Classification</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/403_RNN_regressor.py" target="_blank" rel="noopener">RNN-Regression</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/404_autoencoder.py" target="_blank" rel="noopener">AutoEncoder</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/405_DQN_Reinforcement_learning.py" target="_blank" rel="noopener">DQN Reinforcement Learning</a></li><li><a href="https://github.com/MorvanZhou/pytorch-A3C" target="_blank" rel="noopener">A3C Reinforcement Learning</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/406_GAN.py" target="_blank" rel="noopener">GAN (Generative Adversarial Nets)</a> / <a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/406_conditional_GAN.py" target="_blank" rel="noopener">Conditional GAN</a></li></ul></li><li>Others (WIP)<ul><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/501_why_torch_dynamic_graph.py" target="_blank" rel="noopener">Why torch dynamic</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/502_GPU.py" target="_blank" rel="noopener">Train on GPU</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/503_dropout.py" target="_blank" rel="noopener">Dropout</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/504_batch_normalization.py" target="_blank" rel="noopener">Batch Normalization</a></li></ul></li></ul><p><strong>For Chinese speakers: All methods mentioned below have their video and text tutorial in Chinese.<br>Visit <a href="https://morvanzhou.github.io/tutorials/" target="_blank" rel="noopener">莫烦 Python</a> for more.<br>You can watch my <a href="https://www.youtube.com/channel/UCdyjiB5H8Pu7aDTNVXTTpcg" target="_blank" rel="noopener">Youtube channel</a> as well.</strong></p><h3 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/301_regression.py" target="_blank" rel="noopener">Regression</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/301_regression.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/1-1-2.gif"></a><h3 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/302_classification.py" target="_blank" rel="noopener">Classification</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/302_classification.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/1-1-3.gif"></a><h3 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/401_CNN.py" target="_blank" rel="noopener">CNN</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/401_CNN.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-1-2.gif"></a><h3 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/403_RNN_regressor.py" target="_blank" rel="noopener">RNN</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/403_RNN_regressor.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-3-1.gif"></a><h3 id="Autoencoder"><a href="#Autoencoder" class="headerlink" title="Autoencoder"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/404_autoencoder.py" target="_blank" rel="noopener">Autoencoder</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/403_RNN_regressor.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-4-1.gif"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/403_RNN_regressor.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-4-2.gif"></a><h3 id="GAN-Generative-Adversarial-Nets"><a href="#GAN-Generative-Adversarial-Nets" class="headerlink" title="GAN (Generative Adversarial Nets)"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/406_GAN.py" target="_blank" rel="noopener">GAN (Generative Adversarial Nets)</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/406_GAN.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-6-1.gif"></a><h3 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/503_dropout.py" target="_blank" rel="noopener">Dropout</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/503_dropout.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/5-3-1.gif"></a><h3 id="Batch-Normalization"><a href="#Batch-Normalization" class="headerlink" title="Batch Normalization"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/504_batch_normalization.py" target="_blank" rel="noopener">Batch Normalization</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/504_batch_normalization.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/5-4-2.gif"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pyTorch-Tutorials&quot;&gt;&lt;a href=&quot;#pyTorch-Tutorials&quot; class=&quot;headerlink&quot; title=&quot;pyTorch Tutorials&quot;&gt;&lt;/a&gt;pyTorch Tutorials&lt;/h1&gt;&lt;h5 id=&quot;转自莫烦大
      
    
    </summary>
    
      <category term="Deep-Learning" scheme="https://kaaier.github.io/categories/Deep-Learning/"/>
    
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
      <category term="Deep-Learning" scheme="https://kaaier.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>图像处理知识点——(1)</title>
    <link href="https://kaaier.github.io/2018/07/30/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E2%80%94%E2%80%94-1/"/>
    <id>https://kaaier.github.io/2018/07/30/图像处理知识点——-1/</id>
    <published>2018-07-30T03:21:20.000Z</published>
    <updated>2019-08-05T05:14:13.829Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/image.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/image.jpg&quot;&gt;


      
    
    </summary>
    
      <category term="Computer-Vision" scheme="https://kaaier.github.io/categories/Computer-Vision/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux相关总结</title>
    <link href="https://kaaier.github.io/2018/05/13/Linux%E5%B7%A5%E5%85%B7/"/>
    <id>https://kaaier.github.io/2018/05/13/Linux工具/</id>
    <published>2018-05-13T04:11:21.000Z</published>
    <updated>2019-08-06T16:16:21.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux工具"><a href="#Linux工具" class="headerlink" title="Linux工具"></a><a href="http://man.linuxde.net/par/2" target="_blank" rel="noopener">Linux工具</a></h1><blockquote><p>Linux下还是有很多超棒的开发工具的。</p></blockquote><p>在Linux日常使用中，最常用的命令自然是sudo, ls, cp, mv, cat等，但作为后台开发者，上述命令远远不够。从我的理解来看，合格的C/C++开发者至少需要从开发及调试工具、文件处理、性能分析、网络工具四个方面针对性使用一些开发工具。这里我罗列了一些，大部分都是开发中经常需要使用的命令，有些功能比较简单的命令我会给出一些基本用法，有些本身自带体系（比如vim, gdb等）的命令只能附上链接了。</p><p>开发及调试工具介绍了从“编辑 -&gt; 编译 -&gt; 分析目标文件 -&gt; 追踪调用过程”的全套命令，文件处理部分介绍了查找、统计、替换等基本文本操作命令，性能分析介绍了查看进程信息、CPU负载、I/O负载、内存使用情况等基本命令，网络工具介绍了可以查看“链路层 -&gt; 网络层 -&gt; 传输层 -&gt; 应用层”信息的工具。除此以外，其他命令中也列出了开发者经常会用到的一些命令，基本可以满足日常开发需要。</p><hr>  <a id="more"></a><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><table><thead><tr><th align="center">Chapter 1</th><th align="center">Chapter 2</th><th align="center">Chapter 3</th><th align="center">Chapter 4</th><th align="center">Chapter 5</th></tr></thead><tbody><tr><td align="center"><a href="#pro">开发及调试</a></td><td align="center"><a href="#file">文件处理</a></td><td align="center"><a href="#sysinfo">性能分析</a></td><td align="center"><a href="#net">网络工具</a></td><td align="center"><a href="#other">其他</a></td></tr></tbody></table><ul><li><p>开发及调试</p><ul><li>编辑器：vim</li><li>编译器：gcc/g++</li><li>调试工具：gdb</li><li>查看依赖库：ldd</li><li>二进制文件分析：objdump</li><li>ELF文件格式分析：readelf</li><li>跟踪进程中系统调用：strace</li><li>跟踪进程栈：pstack</li><li>进程内存映射：pmap</li></ul></li><li><p>文件处理</p><ul><li>文件查找：find</li><li>文本搜索：grep</li><li>排序：sort</li><li>转换：tr</li><li>按列切分文本：cut</li><li>按列拼接文本：paste</li><li>统计行和字符：wc</li><li>文本替换：sed</li><li>数据流处理：awk</li></ul></li><li><p>性能分析</p><ul><li>进程查询：ps</li><li>进程监控：top</li><li>打开文件查询：lsof</li><li>内存使用量：free</li><li>监控性能指标：sar</li></ul></li><li><p>网络工具</p><ul><li>网卡配置：ifconfig </li><li>查看当前网络连接：netstat</li><li>查看路由表：route</li><li>检查网络连通性：ping</li><li>转发路径：traceroute</li><li>网络Debug分析：nc</li><li>命令行抓包：tcpdump</li><li>域名解析工具：dig</li><li>网络请求：curl</li></ul></li><li><p>其他</p><ul><li>终止进程：kill</li><li>修改文件权限：chmod</li><li>创建链接：ln</li><li>显示文件尾：tail</li><li>版本控制：git</li><li>设置别名：alias</li></ul></li></ul><hr><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h3 id="开发及调试"><a href="#开发及调试" class="headerlink" title="开发及调试"></a><span id="pro">开发及调试</span></h3><blockquote><p>开发工具大部分都提供了完善的功能，所以这里不一一列举用法。从技术层面来说，调试工具比开发工具更考验一个人的工程能力。</p></blockquote><ol><li><p>编辑器：vim</p><ul><li>服务器端开发必知必会，功能强大，这里不一一列举，但基本的打开文件、保存退出要会。</li><li><a href="http://coolshell.cn/articles/5426.html" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>编译器：gcc/g++</p><ul><li>C/C++编译器，必知必会，除此以外需要了解预处理-&gt; 编译 -&gt; 汇编 -&gt; 链接等一系列流程。</li><li><a href="http://www.cnblogs.com/lidan/archive/2011/05/25/2239517.html" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>调试工具：gdb</p><ul><li>服务器端调试必备。</li><li><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>查看依赖库：ldd</p><ul><li>程序依赖库查询<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ldd后接可执行文件</span><br><span class="line"><span class="meta">#</span> 第一列为程序依赖什么库，第二列为系统提供的与程序需要的库所对应的库，第三列为库加载的开始地址</span><br><span class="line"><span class="meta">#</span> 前两列可以判断系统提供的库和需要的库是否匹配，第三列可以知道当前库在进程地址空间中对应的开始位置</span><br><span class="line"></span><br><span class="line">ldd a.out</span><br></pre></td></tr></table></figure></li></ul></li><li><p>二进制文件分析：objdump</p><ul><li>反汇编，需要理解汇编语言</li><li><a href="http://man.linuxde.net/objdump" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>ELF文件格式分析：readelf</p><ul><li>可以得到ELF文件各段内容，分析链接、符号表等需要用到</li><li><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/readelf.html" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>跟踪进程中系统调用：strace</p><ul><li><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/strace.html" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>跟踪进程栈：pstack</p><ul><li><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/pstack.html#" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>进程内存映射：pmap</p><ul><li>显示进程内存映射<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -x显示扩展信息，后接进程pid</span><br><span class="line"><span class="meta">#</span> Address: 内存开始地址</span><br><span class="line"><span class="meta">#</span> 显示信息：</span><br><span class="line">    Kbytes: 占用内存的字节数</span><br><span class="line">    RSS: 保留内存的字节数</span><br><span class="line">    Dirty: 脏页的字节数（包括共享和私有的）</span><br><span class="line">    Mode: 内存的权限：read、write、execute、shared、private</span><br><span class="line">    Mapping: 占用内存的文件、或[anon]（分配的内存）、或[stack]（堆栈）</span><br><span class="line">    Device: 设备名 (major:minor)</span><br><span class="line"></span><br><span class="line">pmap -x 12345</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a><span id="file">文件处理</span></h3><blockquote><p>Everything is file. 在Linux环境下，对文本处理相当频繁，所以有些命令的参数还是需要记忆的。另外其他很多命令的输出信息都需要通过文件处理命令来筛选有用信息。</p></blockquote><ol><li><p>文件查找：find</p><p> 按名查找：</p><ul><li><p>查找具体文件（一般方式）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name *.cpp</span><br></pre></td></tr></table></figure></li><li><p>查找具体文件（正则方式）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -regex为正则查找，-iregex为忽略大小写的正则查找 </span><br><span class="line"></span><br><span class="line">find -regex ".*.cpp$"</span><br></pre></td></tr></table></figure><p>定制查找：</p></li><li><p>按类型查找</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> f(file)为文件，d(dictionary)为目录，l(link)为链接</span><br><span class="line"></span><br><span class="line">find . -type f</span><br></pre></td></tr></table></figure></li><li><p>按时间查找</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> atime为访问时间，x天内加参数"-atime -x"，超过x天加"-atime -x"</span><br><span class="line"><span class="meta">#</span> mtime为修改时间</span><br><span class="line"></span><br><span class="line">find . -type f -atime -7</span><br></pre></td></tr></table></figure></li><li><p>按大小查找</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -size后接文件大小，单位可以为k(kb)，m(MB)，g(GB)</span><br><span class="line"></span><br><span class="line">find . -type f -size -1k</span><br></pre></td></tr></table></figure></li><li><p>按权限查询</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -perm后接权限</span><br><span class="line"></span><br><span class="line">find . -type -perm 644</span><br></pre></td></tr></table></figure></li></ul></li><li><p>文本搜索：grep</p><ul><li><p>模式匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 匹配test.cpp文件中含有"iostream"串的内容</span><br><span class="line"></span><br><span class="line">grep "iostream" test.cpp</span><br></pre></td></tr></table></figure></li><li><p>多个模式匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 匹配test.cpp文件中含有"iostream"和"using"串的内容</span><br><span class="line"></span><br><span class="line">grep -e "using" -e "iostream" test.cpp</span><br></pre></td></tr></table></figure></li><li><p>输出信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -n为打印匹配的行号；-i搜索时忽略大小写；-c统计包含文本次数</span><br><span class="line"></span><br><span class="line">grep -n "iostream" test.cpp</span><br></pre></td></tr></table></figure></li></ul></li><li><p>排序：sort</p><ul><li>文件内容行排序<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 排序在内存进行，不改变文件</span><br><span class="line"><span class="meta">#</span> -n(number)表示按数字排序，-d(dictionary)表示按字典序</span><br><span class="line"><span class="meta">#</span> -k N表示按各行第N列进行排序</span><br><span class="line"><span class="meta">#</span> -r(reverse)为逆序排序</span><br><span class="line"></span><br><span class="line">sort -n -k 1 test</span><br></pre></td></tr></table></figure></li></ul></li><li><p>转换：tr</p><ul><li><p>字符替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 转换在内存进行，不改变文件</span><br><span class="line"><span class="meta">#</span> 将打开文件中所有目标字符替换</span><br><span class="line"></span><br><span class="line">cat test | tr '1' '2'</span><br></pre></td></tr></table></figure></li><li><p>字符删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 转换在内存进行，不改变文件</span><br><span class="line"><span class="meta">#</span> -d删除(delete)</span><br><span class="line"></span><br><span class="line">cat test | tr -d '1'</span><br></pre></td></tr></table></figure></li><li><p>字符压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 转换在内存进行，不改变文件</span><br><span class="line"><span class="meta">#</span> -s位于后部</span><br><span class="line"></span><br><span class="line">cat test | tr ' ' -s</span><br></pre></td></tr></table></figure></li></ul></li><li><p>按列切分文本：cut</p><ul><li><p>截取特定列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 截取的内存进行，不改变文件</span><br><span class="line"><span class="meta">#</span> -b(byte)以字节为单位，-c(character)以字符为单位，-f以字段为单位</span><br><span class="line"><span class="meta">#</span> 数字为具体列范围</span><br><span class="line"></span><br><span class="line">cut -f 1,2 test</span><br></pre></td></tr></table></figure></li><li><p>指定界定符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 截取的内存进行，不改变文件</span><br><span class="line"><span class="meta">#</span> -d后接界定符</span><br><span class="line"></span><br><span class="line">cut -f 2 -d ',' new</span><br></pre></td></tr></table></figure></li></ul></li><li><p>按列拼接文本：paste</p><ul><li><p>按列拼接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在内存中拼接，不改变文件</span><br><span class="line"><span class="meta">#</span> 将两个文件按对应列拼接</span><br><span class="line"><span class="meta">#</span> 最后加上-d "x"会将x作为指定分隔符（paste test1 test2 -d ","）</span><br><span class="line"><span class="meta">#</span> 两文件列数可以不同 </span><br><span class="line"></span><br><span class="line">paste test1 test2</span><br></pre></td></tr></table></figure></li><li><p>指定界定符拼接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在内存中拼接，不改变文件</span><br><span class="line"><span class="meta">#</span> 按照-d之后给出的界定符拼接</span><br><span class="line"></span><br><span class="line">paste test1 test2 -d ","</span><br></pre></td></tr></table></figure></li></ul></li><li><p>统计行和字符：wc</p><ul><li>基本统计<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -l统计行数(line)，-w统计单词数(word)，-c统计字符数(character)</span><br><span class="line"></span><br><span class="line">wc -l test</span><br></pre></td></tr></table></figure></li></ul></li><li><p>文本替换：sed</p><ul><li>区别于上面的命令，sed是可以直接改变被编辑文件内容的。</li><li><a href="http://coolshell.cn/articles/9104.html" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>数据流处理：awk</p><ul><li>区别于上面的命令，awk是可以直接改变被编辑文件内容的。</li><li><a href="http://coolshell.cn/articles/9070.html" target="_blank" rel="noopener">详见</a></li></ul></li></ol><hr><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a><span id="sysinfo">系统信息</span></h3><blockquote><p>性能监视工具对于程序员的作用就像是听诊器对于医生的作用一样。系统信息主要针对于服务器性能较低时的排查工作，主要包括CPU信息，文件I/O和内存使用情况，通过进程为纽带得到系统运行的瓶颈。</p></blockquote><ol><li><p>进程查询：ps</p><ul><li><p>查看正在运行进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 常结合grep筛选信息(e.g, ps -ef | grep xxx)</span><br><span class="line"></span><br><span class="line">ps -ef</span><br></pre></td></tr></table></figure></li><li><p>以完整格式显示所有进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 常结合grep筛选信息</span><br><span class="line"></span><br><span class="line">ps -ajx</span><br></pre></td></tr></table></figure></li></ul></li><li><p>进程监控：top</p><ul><li>显示实时进程信息<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 这是个大招，都不带参数的，具体信息通过grep筛选</span><br><span class="line"><span class="meta">#</span> 交互模式下键入M进程列表按内存使用大小降序排列，键入P进程列表按CPU使用大小降序排列</span><br><span class="line"><span class="meta">#</span> %id表示CPU空闲率，过低表示可能存在CPU存在瓶颈</span><br><span class="line"><span class="meta">#</span> %wa表示等待I/O的CPU时间百分比，过高则I/O存在瓶颈 &gt; 用iostat进一步分析</span><br><span class="line"></span><br><span class="line">top</span><br></pre></td></tr></table></figure></li></ul></li><li><p>打开文件查询：lsof</p><ul><li><p>查看占用某端口的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 最常见的就是mysql端口被占用使用(lsof i:3307)</span><br><span class="line"><span class="meta">#</span> 周知端口(ftp:20/21, ssh:22, telnet:23, smtp:25, dns:53, http:80, pop3:110, https:443)</span><br><span class="line"></span><br><span class="line">lsof -i:53</span><br></pre></td></tr></table></figure><ul><li><p>查看某用户打开的文件 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -u(user)为用户，后接用户名</span><br><span class="line"></span><br><span class="line">lsof -u inx</span><br></pre></td></tr></table></figure></li><li><p>查看指定进程打开的文件 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -p(process)为进程，后接进程PID</span><br><span class="line"></span><br><span class="line">lsof -p 12345</span><br></pre></td></tr></table></figure></li><li><p>查看指定目录下被进程打开的文件 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 这里是"+d"，需要注意，使用"+D"递归目录</span><br><span class="line"></span><br><span class="line">lsof +d /test</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>内存使用量：free</p><ul><li>内存使用量<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 可获得内存及交换区的总量，已使用量，空闲量等信息</span><br><span class="line"></span><br><span class="line">free</span><br></pre></td></tr></table></figure></li></ul></li><li><p>监控性能指标：sar</p><p> 监控CPU</p><ul><li><p>监控CPU负载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 加上-q可以查看运行队列中进程数，系统上进程大小，平均负载等</span><br><span class="line"><span class="meta">#</span> 这里"1"表示采样时间间隔是1秒，这里"2"表示采样次数为2</span><br><span class="line"></span><br><span class="line">sar -q 1 2</span><br></pre></td></tr></table></figure></li><li><p>监控CPU使用率</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 可以显示CPU使用情况</span><br><span class="line"><span class="meta">#</span> 参数意义同上</span><br><span class="line"></span><br><span class="line">sar -u 1 2</span><br></pre></td></tr></table></figure><p>监控内存</p></li><li><p>查询内存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 可以显示内存使用情况</span><br><span class="line"><span class="meta">#</span> 参数意义同上 </span><br><span class="line"></span><br><span class="line">sar -r 1 2</span><br></pre></td></tr></table></figure></li><li><p>页面交换查询</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> #</span> 可以查看是否发生大量页面交换，吞吐率大幅下降时可用</span><br><span class="line"><span class="meta"> #</span> 参数意义同上</span><br><span class="line"></span><br><span class="line">sar -W 1 2</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="网络工具"><a href="#网络工具" class="headerlink" title="网络工具"></a><span id="net">网络工具</span></h3><blockquote><p>网络工具部分只介绍基本功能，参数部分一笔带过。这部分重点不在于工具的使用而是对反馈的数据进行解读，并且这部分命令功能的重合度还是比较高的。</p></blockquote><ol><li><p>网卡配置（链路层）：ifconfig </p><ul><li><p>显示设备信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 可以显示已激活的网络设备信息</span><br><span class="line"></span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure></li><li><p>启动关闭指定网卡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 前一个参数为具体网卡，后一个为开关信息</span><br><span class="line"><span class="meta">#</span> up为打开，down为关闭</span><br><span class="line"></span><br><span class="line">ifconfig eth0 up</span><br></pre></td></tr></table></figure></li><li><p>配置IP地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 前一个参数为具体网卡，后一个为配置的IP地址</span><br><span class="line"></span><br><span class="line">ifconfig eth0 192.168.1.1</span><br></pre></td></tr></table></figure></li><li><p>设置最大传输单元</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前一个参数为具体网卡，后面为MTU的大小</span><br><span class="line"><span class="meta">#</span> 设置链路层MTU值，通常为1500</span><br><span class="line"></span><br><span class="line">ifconfig eth0 mtu 1500</span><br></pre></td></tr></table></figure></li><li><p>启用和关闭ARP协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 开启arp如下，若关闭则-arp</span><br><span class="line"></span><br><span class="line">ifconfig eth0 arp</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="2"><li><p>查看当前网络连接（链路层/网络层/传输层）：netstat</p><ul><li><p>网络接口信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 显示网卡信息，可结合ifconfig学习</span><br><span class="line"></span><br><span class="line">netstat -i</span><br></pre></td></tr></table></figure></li><li><p>列出端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -a(all)表示所有端口，-t(tcp)表示所有使用中的TCP端口</span><br><span class="line"><span class="meta">#</span> -l(listening)表示正在监听的端口</span><br><span class="line"></span><br><span class="line">netstat -at</span><br></pre></td></tr></table></figure></li><li><p>显示端口统计信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -s(status)显示各协议信息</span><br><span class="line"><span class="meta">#</span> -加上-t(tcp)显示tcp协议信息，加上-u(udp)显示udp协议信息</span><br><span class="line"></span><br><span class="line">netstat -s</span><br></pre></td></tr></table></figure></li><li><p>显示使用某协议的应用名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -p(progress)表示程序，可以显示使用tcp/udp协议的应用的名称</span><br><span class="line"></span><br><span class="line">netstat -pt</span><br></pre></td></tr></table></figure></li><li><p>查找指定进程、端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 互逆操作第一个显示某程序使用的端口号，第二个显示某端口号的使用进程</span><br><span class="line"><span class="meta">#</span> 第二个操作可以用lsof替代</span><br><span class="line"></span><br><span class="line">netstat -ap | grep ssh</span><br><span class="line">netstat -an | grep ':80'</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看路由表（网络层IP协议）：route</p><ul><li>查看路由信息<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 得到路由表信息，具体分析路由表工作需要网络知识</span><br><span class="line"><span class="meta">#</span> 可以通过netstat -r(route)得到同样的路由表</span><br><span class="line"></span><br><span class="line">route</span><br></pre></td></tr></table></figure></li></ul></li><li><p>检查网络连通性（网络层ICMP协议）：ping</p><ul><li>检查是否连通<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 主要功能是检测网络连通性</span><br><span class="line"><span class="meta">#</span> 可以额外得到网站的ip地址和连接最大/最小/平均耗时。</span><br><span class="line"></span><br><span class="line">ping baidu.com</span><br></pre></td></tr></table></figure></li></ul></li><li><p>转发路径（网络层ICMP协议）：traceroute</p><ul><li>文件包途径的IP<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> </span><br><span class="line"><span class="meta">#</span> 可以打印从沿途经过的路由器IP地址</span><br><span class="line"></span><br><span class="line">traceroute baidu.com</span><br></pre></td></tr></table></figure></li></ul></li><li><p>网络Debug分析（网络层/传输层）：nc</p><ul><li><p>端口扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 黑客很喜欢</span><br><span class="line"><span class="meta">#</span> 扫描某服务器端口使用情况</span><br><span class="line"><span class="meta">#</span> -v(view)显示指令执行过程，-w(wait)设置超时时长</span><br><span class="line"><span class="meta">#</span> -z使用输入输出模式（只在端口扫描时使用）</span><br><span class="line"><span class="meta">#</span> 数字为扫描的端口范围 </span><br><span class="line"></span><br><span class="line">nc -v -w 1 baidu.com  -z 75-1000</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.oschina.net/translate/linux-netcat-command" target="_blank" rel="noopener">其他详见</a></p></li></ul></li><li><p>命令行抓包（网络层/传输层）：tcpdump</p><ul><li>抓包利器，没有什么比数据更值得信赖。可以跟踪整个传输过程。</li><li><a href="http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>域名解析工具（应用层DNS协议）：dig</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 应用层，DNS</span><br><span class="line"><span class="meta">#</span> 打印域名解析结果</span><br><span class="line"><span class="meta">#</span> 打印域名解析过程中涉及的各级DNS服务器地址</span><br><span class="line"></span><br><span class="line">dig baidu.com</span><br></pre></td></tr></table></figure></li><li><p>网络请求（应用层）：curl</p><ul><li><a href="http://www.cnblogs.com/gbyukg/p/3326825.html" target="_blank" rel="noopener">详见</a></li></ul></li></ol><hr><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a><span id="other">其他</span></h3><blockquote><p>这里都是日常开发中高频命令。</p></blockquote><ol><li><p>终止进程：kill</p><ul><li><p>杀死具体进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 加具体进程PID</span><br><span class="line"></span><br><span class="line">kill 12345</span><br></pre></td></tr></table></figure></li><li><p>杀死某进程相关进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 加上"-9"杀死某进程相关进程</span><br><span class="line"></span><br><span class="line">kill -9 12345</span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改文件权限：chmod</p><ul><li>更改文件权限<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 可以对三种使用者设置权限，u(user, owner)，g(group)，o(other)</span><br><span class="line"><span class="meta">#</span> 文件可以有三种权限，r(read)，w(write)，x(execute)</span><br><span class="line"><span class="meta">#</span> 这里u+r表示文件所有者在原有基础上增加文件读取权限</span><br><span class="line"><span class="meta">#</span> 这里777分别对应，u=7，g=7，o=7，具体数字含义自行google</span><br><span class="line"></span><br><span class="line">chmod u+r file</span><br><span class="line">chmod 777 file</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建链接：ln</p><ul><li><p>创建硬链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 文件inode中链接数会增加，只有链接数减为0时文件才真正被删除</span><br><span class="line"></span><br><span class="line">ln file1 file2</span><br></pre></td></tr></table></figure></li><li><p>创建软（符号链接）链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -s(symbol)为符号链接，仅仅是引用路径</span><br><span class="line"><span class="meta">#</span> 相比于硬链接最大特点是可以跨文件系统</span><br><span class="line"><span class="meta">#</span> 类似于Windows创建快捷方式，实际文件删除则链接失效</span><br><span class="line"></span><br><span class="line">ln -s file1 file2</span><br></pre></td></tr></table></figure></li></ul></li><li><p>显示文件尾：tail</p><ul><li>查看文件尾部<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -f参数可以不立即回传结束信号，当文件有新写入数据时会及时更新</span><br><span class="line"><span class="meta">#</span> 查看日志时常用</span><br><span class="line"></span><br><span class="line">tail -f test</span><br></pre></td></tr></table></figure></li></ul></li><li><p>版本控制：git</p><ul><li>版本控制最好用的软件，没有之一。至少要知道”git init”，”git add”，”git commit”，”git pull”，”git push”几个命令。</li><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>设置别名：alias</p><ul><li>常用命令添加别名<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ".bashrc"文件中配置常用命令别名，生效后在命令行只需要使用别名即可代替原先很长的命令</span><br><span class="line"></span><br><span class="line">alias rm='rm -i'</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>假设已经通过vim编辑，gcc编译得到可执行文件server，这时就可以使用一些开发者常用的工具来进行后期调试。这里都是给出最简单的用法，意在快速掌握一些基本开发工具。</p><p>先clone这个项目，然后使用src_code下代码编译通过后通过下面命令调试。<a href="https://github.com/linw7/TKeed" target="_blank" rel="noopener">代码</a></p><ol><li>单步调试：gdb</li></ol><ul><li>运行得不到正确结果可以通过gdb设置断点来查看每个中间变量值，以此来确定哪里出了问题。因为gdb调试内容较多，这里不详细说明。另外，gdb出了可以单步查看变量值，还可以分析coredump文件来排查错误。</li></ul><ol start="2"><li>动态库依赖：ldd</li></ol><ul><li><p>命令：ldd ./server</p></li><li><p>可以查看可执行文件server所需的所有动态库，动态库所在目录及其被映射到的虚拟地址空间。</p></li></ul><ol start="3"><li>性能分析：top</li></ol><ul><li>top可以查看当前系统很多信息，比如1,5,15分钟内负载，运行、休眠、僵尸进程数，用户、内核程序占CPU百分比，存储信息等。top可以定位具体哪个进程CPU占用率高和内存使用率高。我们可以以此定位性能问题出在什么程序上（比如你后台执行TKeed server之后，可以看到CPU占用率为99%，这时候我们就需要从这个程序入手了）。</li></ul><ol start="4"><li>系统调用：strace</li></ol><ul><li><p>命令：strace ./server</p></li><li><p>上面已经提到TKeed server的CPU占用率为99%，那么问题通常一定是出在了死循环上。我们接下来在代码中找到死循环位置。因为程序中epoll_wait需要阻塞进程，我们怀疑是不是这里没有阻塞，这时就可以通过上面的方式运行server程序。此时可以打印出没次系统调用及其参数等，我们也可以加-o filename将系统调用信息保存下来。</p></li></ul><ol start="5"><li>打印进程：ps</li></ol><ul><li><p>命令：ps -ejH</p></li><li><p>我们在命令行下打开的程序的父进程是shell程序，之前用strace打开server程序，strace也是server的父进程。我们有时候需要知道进程间的层级关系就需要打印进程树，上面的ps命令可以做到。当出现僵尸进程时就可以通过进程树定位具体是哪个进程出了问题。另外当想要知道进程pid时，ps -el | grep XXX也是很常用的。</p></li></ul><ol start="6"><li>打开文件：lsof</li></ol><ul><li><p>lsof -i:3000</p></li><li><p>比如在运行server时发现端口被占用了，可以通过lsof -i:port来查看对应端口号正在被哪个进程所占用。端口占用是非常常见的问题，比如3306被占用我遇到过好几次，要么是某个程序正好占用了要么是之前没能结束进程，这些都可以借助lsof帮助查看端口。</p></li></ul><ol start="7"><li>修改权限：chmod</li></ol><ul><li><p>chmod 000 ./index.html</p></li><li><p>可以修改文件权限，这里设为000，这样任何人都无法访问，重新在浏览器请求127.0.0.1:3000/index.html就会因为文件权限不够而无法展示，服务器返回状态码为403，符合我们预期。修改权限后再请求一次可得到状态码200。</p></li></ul><ol start="8"><li>网卡信息：ifconfig</li></ol><ul><li><p>ifconfig</p></li><li><p>如果想看一下整个传输过程，可以使用tcpdump来抓包，但是抓包时参数需要加上网卡信息，这时候可以通过ifconfig来获得网卡信息。</p></li></ul><ol start="9"><li>抓包分析：tcpdump</li></ol><ul><li><p>tcpdump -i eth0 port 3000</p></li><li><p>可以用tcpdump来抓包分析三次握手及数据传输过程，-i之后加上上一步得到的网卡地址，port可以指定监听的端口号。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux工具&quot;&gt;&lt;a href=&quot;#Linux工具&quot; class=&quot;headerlink&quot; title=&quot;Linux工具&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://man.linuxde.net/par/2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linux工具&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Linux下还是有很多超棒的开发工具的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Linux日常使用中，最常用的命令自然是sudo, ls, cp, mv, cat等，但作为后台开发者，上述命令远远不够。从我的理解来看，合格的C/C++开发者至少需要从开发及调试工具、文件处理、性能分析、网络工具四个方面针对性使用一些开发工具。这里我罗列了一些，大部分都是开发中经常需要使用的命令，有些功能比较简单的命令我会给出一些基本用法，有些本身自带体系（比如vim, gdb等）的命令只能附上链接了。&lt;/p&gt;
&lt;p&gt;开发及调试工具介绍了从“编辑 -&amp;gt; 编译 -&amp;gt; 分析目标文件 -&amp;gt; 追踪调用过程”的全套命令，文件处理部分介绍了查找、统计、替换等基本文本操作命令，性能分析介绍了查看进程信息、CPU负载、I/O负载、内存使用情况等基本命令，网络工具介绍了可以查看“链路层 -&amp;gt; 网络层 -&amp;gt; 传输层 -&amp;gt; 应用层”信息的工具。除此以外，其他命令中也列出了开发者经常会用到的一些命令，基本可以满足日常开发需要。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://kaaier.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://kaaier.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
