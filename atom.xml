<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kaiaier&#39;s    Blog</title>
  <icon>https://www.gravatar.com/avatar/2917627e1dc7f4b7645f9313f29aa11f</icon>
  <subtitle>Stay Hungry, Stay Foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kaaier.github.io/"/>
  <updated>2019-08-06T15:55:48.886Z</updated>
  <id>https://kaaier.github.io/</id>
  
  <author>
    <name>张旭</name>
    <email>15993096663@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Object-Detection</title>
    <link href="https://kaaier.github.io/2019/08/25/Object-Detection/"/>
    <id>https://kaaier.github.io/2019/08/25/Object-Detection/</id>
    <published>2019-08-25T01:52:48.000Z</published>
    <updated>2019-08-06T15:55:48.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object-Detection"><a href="#Object-Detection" class="headerlink" title="Object-Detection"></a>Object-Detection</h1><p>[TOC]</p><h5 id="记录关于object-detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转CVPR-Latest-paper-learning"><a href="#记录关于object-detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转CVPR-Latest-paper-learning" class="headerlink" title="记录关于object detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转CVPR(Latest paper learning)."></a>记录关于object detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转<a href="https://github.com/facebookresearch/Detectron" target="_blank" rel="noopener">CVPR(Latest paper learning)</a>.</h5><ul><li><p>R-CNN</p></li><li><p>Fast R-CNN</p></li><li><p>Faster R-CNN</p></li><li><p>Mask R-CNN</p><a id="more"></a></li><li><p>Light-Head R-CNN</p></li><li><p>Cascade R-CNN</p></li><li><p>SPP-Net</p></li><li><p>YOLO</p></li><li><p>YOLOv2</p></li><li><p>YOLOv3</p></li><li><p>YOLT</p></li><li><p>SSD</p></li><li><p>DSSD</p></li><li><p>FSSD</p></li><li><p>ESSD</p></li><li><p>MDSSD</p></li><li><p>Pelee</p></li><li><p>Fire SSD</p></li><li><p>R-FCN</p></li><li><p>FPN</p></li><li><p>DSOD</p></li><li><p>RetinaNet</p></li><li><p>MegDet</p></li><li><p>RefineNet</p></li><li><p>DetNet</p></li><li><p>SSOD</p></li><li><p>CornerNet</p></li><li><p>M2Det</p></li><li><p>3D Object Detection</p></li><li><p>ZSD（Zero-Shot Object Detection）</p></li><li><p>OSD（One-Shot object Detection）</p></li><li><p>Weakly Supervised Object Detection</p></li><li><p>Softer-NMS</p></li><li><p>2018</p></li><li><p>2019</p></li><li><p>Other</p></li></ul><h1 id="Survey"><a href="#Survey" class="headerlink" title="Survey"></a>Survey</h1><p><strong>A Survey of Deep Learning-based Object Detection</strong></p><ul><li><p>intro：From Fast R-CNN to NAS-FPN</p></li><li><p>arXiv：<a href="https://arxiv.org/abs/1907.09408" target="_blank" rel="noopener">https://arxiv.org/abs/1907.09408</a></p></li></ul><p><strong>Object Detection in 20 Years: A Survey</strong></p><ul><li>intro：This work has been submitted to the IEEE TPAMI for possible publication</li><li>arXiv：<a href="https://arxiv.org/abs/1905.05055" target="_blank" rel="noopener">https://arxiv.org/abs/1905.05055</a></li></ul><p><strong>《Recent Advances in Object Detection in the Age of Deep Convolutional Neural Networks》</strong></p><ul><li>intro: awesome</li></ul><ul><li>arXiv: <a href="https://arxiv.org/abs/1809.03193" target="_blank" rel="noopener">https://arxiv.org/abs/1809.03193</a></li></ul><p><strong>《Deep Learning for Generic Object Detection: A Survey》</strong></p><ul><li>intro: Submitted to IJCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1809.02165" target="_blank" rel="noopener">https://arxiv.org/abs/1809.02165</a></li></ul><h1 id="Papers-amp-Codes"><a href="#Papers-amp-Codes" class="headerlink" title="Papers&amp;Codes"></a>Papers&amp;Codes</h1><h2 id="R-CNN"><a href="#R-CNN" class="headerlink" title="R-CNN"></a>R-CNN</h2><p><strong>Rich feature hierarchies for accurate object detection and semantic segmentation</strong></p><ul><li>intro: R-CNN</li><li>arxiv: <a href="http://arxiv.org/abs/1311.2524" target="_blank" rel="noopener">http://arxiv.org/abs/1311.2524</a></li><li>supp: <a href="http://people.eecs.berkeley.edu/~rbg/papers/r-cnn-cvpr-supp.pdf" target="_blank" rel="noopener">http://people.eecs.berkeley.edu/~rbg/papers/r-cnn-cvpr-supp.pdf</a></li><li>slides: <a href="http://www.image-net.org/challenges/LSVRC/2013/slides/r-cnn-ilsvrc2013-workshop.pdf" target="_blank" rel="noopener">http://www.image-net.org/challenges/LSVRC/2013/slides/r-cnn-ilsvrc2013-workshop.pdf</a></li><li>slides: <a href="http://www.cs.berkeley.edu/~rbg/slides/rcnn-cvpr14-slides.pdf" target="_blank" rel="noopener">http://www.cs.berkeley.edu/~rbg/slides/rcnn-cvpr14-slides.pdf</a></li><li>github: <a href="https://github.com/rbgirshick/rcnn" target="_blank" rel="noopener">https://github.com/rbgirshick/rcnn</a></li><li>notes: <a href="http://zhangliliang.com/2014/07/23/paper-note-rcnn/" target="_blank" rel="noopener">http://zhangliliang.com/2014/07/23/paper-note-rcnn/</a></li><li>caffe-pr(“Make R-CNN the Caffe detection example”): <a href="https://github.com/BVLC/caffe/pull/482" target="_blank" rel="noopener">https://github.com/BVLC/caffe/pull/482</a></li></ul><h2 id="Fast-R-CNN"><a href="#Fast-R-CNN" class="headerlink" title="Fast R-CNN"></a>Fast R-CNN</h2><p><strong>Fast R-CNN</strong></p><ul><li>arxiv: <a href="http://arxiv.org/abs/1504.08083" target="_blank" rel="noopener">http://arxiv.org/abs/1504.08083</a></li><li>slides: <a href="http://tutorial.caffe.berkeleyvision.org/caffe-cvpr15-detection.pdf" target="_blank" rel="noopener">http://tutorial.caffe.berkeleyvision.org/caffe-cvpr15-detection.pdf</a></li><li>github: <a href="https://github.com/rbgirshick/fast-rcnn" target="_blank" rel="noopener">https://github.com/rbgirshick/fast-rcnn</a></li><li>github(COCO-branch): <a href="https://github.com/rbgirshick/fast-rcnn/tree/coco" target="_blank" rel="noopener">https://github.com/rbgirshick/fast-rcnn/tree/coco</a></li><li>webcam demo: <a href="https://github.com/rbgirshick/fast-rcnn/pull/29" target="_blank" rel="noopener">https://github.com/rbgirshick/fast-rcnn/pull/29</a></li><li>notes: <a href="http://zhangliliang.com/2015/05/17/paper-note-fast-rcnn/" target="_blank" rel="noopener">http://zhangliliang.com/2015/05/17/paper-note-fast-rcnn/</a></li><li>notes: <a href="http://blog.csdn.net/linj_m/article/details/48930179" target="_blank" rel="noopener">http://blog.csdn.net/linj_m/article/details/48930179</a></li><li>github(“Fast R-CNN in MXNet”): <a href="https://github.com/precedenceguo/mx-rcnn" target="_blank" rel="noopener">https://github.com/precedenceguo/mx-rcnn</a></li><li>github: <a href="https://github.com/mahyarnajibi/fast-rcnn-torch" target="_blank" rel="noopener">https://github.com/mahyarnajibi/fast-rcnn-torch</a></li><li>github: <a href="https://github.com/apple2373/chainer-simple-fast-rnn" target="_blank" rel="noopener">https://github.com/apple2373/chainer-simple-fast-rnn</a></li><li>github: <a href="https://github.com/zplizzi/tensorflow-fast-rcnn" target="_blank" rel="noopener">https://github.com/zplizzi/tensorflow-fast-rcnn</a></li></ul><p><strong>A-Fast-RCNN: Hard Positive Generation via Adversary for Object Detection</strong></p><ul><li>intro: CVPR 2017</li><li>arxiv: <a href="https://arxiv.org/abs/1704.03414" target="_blank" rel="noopener">https://arxiv.org/abs/1704.03414</a></li><li>paper: <a href="http://abhinavsh.info/papers/pdfs/adversarial_object_detection.pdf" target="_blank" rel="noopener">http://abhinavsh.info/papers/pdfs/adversarial_object_detection.pdf</a></li><li>github(Caffe): <a href="https://github.com/xiaolonw/adversarial-frcnn" target="_blank" rel="noopener">https://github.com/xiaolonw/adversarial-frcnn</a></li></ul><h2 id="Faster-R-CNN"><a href="#Faster-R-CNN" class="headerlink" title="Faster R-CNN"></a>Faster R-CNN</h2><p><strong>Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks</strong></p><ul><li>intro: NIPS 2015</li><li>arxiv: <a href="http://arxiv.org/abs/1506.01497" target="_blank" rel="noopener">http://arxiv.org/abs/1506.01497</a></li><li>gitxiv: <a href="http://www.gitxiv.com/posts/8pfpcvefDYn2gSgXk/faster-r-cnn-towards-real-time-object-detection-with-region" target="_blank" rel="noopener">http://www.gitxiv.com/posts/8pfpcvefDYn2gSgXk/faster-r-cnn-towards-real-time-object-detection-with-region</a></li><li>slides: <a href="http://web.cs.hacettepe.edu.tr/~aykut/classes/spring2016/bil722/slides/w05-FasterR-CNN.pdf" target="_blank" rel="noopener">http://web.cs.hacettepe.edu.tr/~aykut/classes/spring2016/bil722/slides/w05-FasterR-CNN.pdf</a></li><li>github(official, Matlab): <a href="https://github.com/ShaoqingRen/faster_rcnn" target="_blank" rel="noopener">https://github.com/ShaoqingRen/faster_rcnn</a></li><li>github(Caffe): <a href="https://github.com/rbgirshick/py-faster-rcnn" target="_blank" rel="noopener">https://github.com/rbgirshick/py-faster-rcnn</a></li><li>github(MXNet): <a href="https://github.com/msracver/Deformable-ConvNets/tree/master/faster_rcnn" target="_blank" rel="noopener">https://github.com/msracver/Deformable-ConvNets/tree/master/faster_rcnn</a></li><li>github(PyTorch–recommend): <a href="https://github.com//jwyang/faster-rcnn.pytorch" target="_blank" rel="noopener">https://github.com//jwyang/faster-rcnn.pytorch</a></li><li>github: <a href="https://github.com/mitmul/chainer-faster-rcnn" target="_blank" rel="noopener">https://github.com/mitmul/chainer-faster-rcnn</a></li><li>github(Torch):: <a href="https://github.com/andreaskoepf/faster-rcnn.torch" target="_blank" rel="noopener">https://github.com/andreaskoepf/faster-rcnn.torch</a></li><li>github(Torch):: <a href="https://github.com/ruotianluo/Faster-RCNN-Densecap-torch" target="_blank" rel="noopener">https://github.com/ruotianluo/Faster-RCNN-Densecap-torch</a></li><li>github(TensorFlow): <a href="https://github.com/smallcorgi/Faster-RCNN_TF" target="_blank" rel="noopener">https://github.com/smallcorgi/Faster-RCNN_TF</a></li><li>github(TensorFlow): <a href="https://github.com/CharlesShang/TFFRCNN" target="_blank" rel="noopener">https://github.com/CharlesShang/TFFRCNN</a></li><li>github(C++ demo): <a href="https://github.com/YihangLou/FasterRCNN-Encapsulation-Cplusplus" target="_blank" rel="noopener">https://github.com/YihangLou/FasterRCNN-Encapsulation-Cplusplus</a></li><li>github(Keras): <a href="https://github.com/yhenon/keras-frcnn" target="_blank" rel="noopener">https://github.com/yhenon/keras-frcnn</a></li><li>github: <a href="https://github.com/Eniac-Xie/faster-rcnn-resnet" target="_blank" rel="noopener">https://github.com/Eniac-Xie/faster-rcnn-resnet</a></li><li>github(C++): <a href="https://github.com/D-X-Y/caffe-faster-rcnn/tree/dev" target="_blank" rel="noopener">https://github.com/D-X-Y/caffe-faster-rcnn/tree/dev</a></li></ul><p><strong>R-CNN minus R</strong></p><ul><li>intro: BMVC 2015</li><li>arxiv: <a href="http://arxiv.org/abs/1506.06981" target="_blank" rel="noopener">http://arxiv.org/abs/1506.06981</a></li></ul><p><strong>Faster R-CNN in MXNet with distributed implementation and data parallelization</strong></p><ul><li>github: <a href="https://github.com/dmlc/mxnet/tree/master/example/rcnn" target="_blank" rel="noopener">https://github.com/dmlc/mxnet/tree/master/example/rcnn</a></li></ul><p><strong>Contextual Priming and Feedback for Faster R-CNN</strong></p><ul><li>intro: ECCV 2016. Carnegie Mellon University</li><li>paper: <a href="http://abhinavsh.info/context_priming_feedback.pdf" target="_blank" rel="noopener">http://abhinavsh.info/context_priming_feedback.pdf</a></li><li>poster: <a href="http://www.eccv2016.org/files/posters/P-1A-20.pdf" target="_blank" rel="noopener">http://www.eccv2016.org/files/posters/P-1A-20.pdf</a></li></ul><p><strong>An Implementation of Faster RCNN with Study for Region Sampling</strong></p><ul><li>intro: Technical Report, 3 pages. CMU</li><li>arxiv: <a href="https://arxiv.org/abs/1702.02138" target="_blank" rel="noopener">https://arxiv.org/abs/1702.02138</a></li><li>github: <a href="https://github.com/endernewton/tf-faster-rcnn" target="_blank" rel="noopener">https://github.com/endernewton/tf-faster-rcnn</a></li><li>github: <a href="https://github.com/ruotianluo/pytorch-faster-rcnn" target="_blank" rel="noopener">https://github.com/ruotianluo/pytorch-faster-rcnn</a></li></ul><p><strong>Interpretable R-CNN</strong></p><ul><li>intro: North Carolina State University &amp; Alibaba</li><li>keywords: AND-OR Graph (AOG)</li><li>arxiv: <a href="https://arxiv.org/abs/1711.05226" target="_blank" rel="noopener">https://arxiv.org/abs/1711.05226</a></li></ul><p><strong>Domain Adaptive Faster R-CNN for Object Detection in the Wild</strong></p><ul><li>intro: CVPR 2018. ETH Zurich &amp; ESAT/PSI</li><li>arxiv: <a href="https://arxiv.org/abs/1803.03243" target="_blank" rel="noopener">https://arxiv.org/abs/1803.03243</a></li></ul><h2 id="Mask-R-CNN"><a href="#Mask-R-CNN" class="headerlink" title="Mask R-CNN"></a>Mask R-CNN</h2><ul><li>arxiv: <a href="http://arxiv.org/abs/1703.06870" target="_blank" rel="noopener">http://arxiv.org/abs/1703.06870</a></li><li>github(Keras): <a href="https://github.com/matterport/Mask_RCNN" target="_blank" rel="noopener">https://github.com/matterport/Mask_RCNN</a></li><li>github(Caffe2): <a href="https://github.com/facebookresearch/Detectron" target="_blank" rel="noopener">https://github.com/facebookresearch/Detectron</a></li><li>github(Pytorch): <a href="https://github.com/wannabeOG/Mask-RCNN" target="_blank" rel="noopener">https://github.com/wannabeOG/Mask-RCNN</a></li><li>github(MXNet): <a href="https://github.com/TuSimple/mx-maskrcnn" target="_blank" rel="noopener">https://github.com/TuSimple/mx-maskrcnn</a></li><li>github(Chainer): <a href="https://github.com/DeNA/Chainer_Mask_R-CNN" target="_blank" rel="noopener">https://github.com/DeNA/Chainer_Mask_R-CNN</a></li></ul><h2 id="Light-Head-R-CNN"><a href="#Light-Head-R-CNN" class="headerlink" title="Light-Head R-CNN"></a>Light-Head R-CNN</h2><p><strong>Light-Head R-CNN: In Defense of Two-Stage Object Detector</strong></p><ul><li>intro: Tsinghua University &amp; Megvii Inc</li><li>arxiv: <a href="https://arxiv.org/abs/1711.07264" target="_blank" rel="noopener">https://arxiv.org/abs/1711.07264</a></li><li>github(offical): <a href="https://github.com/zengarden/light_head_rcnn" target="_blank" rel="noopener">https://github.com/zengarden/light_head_rcnn</a></li><li>github: <a href="https://github.com/terrychenism/Deformable-ConvNets/blob/master/rfcn/symbols/resnet_v1_101_rfcn_light.py#L784" target="_blank" rel="noopener">https://github.com/terrychenism/Deformable-ConvNets/blob/master/rfcn/symbols/resnet_v1_101_rfcn_light.py#L784</a></li></ul><h2 id="Cascade-R-CNN"><a href="#Cascade-R-CNN" class="headerlink" title="Cascade R-CNN"></a>Cascade R-CNN</h2><p><strong>Cascade R-CNN: Delving into High Quality Object Detection</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1712.00726" target="_blank" rel="noopener">https://arxiv.org/abs/1712.00726</a></li><li>github: <a href="https://github.com/zhaoweicai/cascade-rcnn" target="_blank" rel="noopener">https://github.com/zhaoweicai/cascade-rcnn</a></li></ul><h2 id="SPP-Net"><a href="#SPP-Net" class="headerlink" title="SPP-Net"></a>SPP-Net</h2><p><strong>Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition</strong></p><ul><li>intro: ECCV 2014 / TPAMI 2015</li><li>arxiv: <a href="http://arxiv.org/abs/1406.4729" target="_blank" rel="noopener">http://arxiv.org/abs/1406.4729</a></li><li>github: <a href="https://github.com/ShaoqingRen/SPP_net" target="_blank" rel="noopener">https://github.com/ShaoqingRen/SPP_net</a></li><li>notes: <a href="http://zhangliliang.com/2014/09/13/paper-note-sppnet/" target="_blank" rel="noopener">http://zhangliliang.com/2014/09/13/paper-note-sppnet/</a></li></ul><p><strong>DeepID-Net: Deformable Deep Convolutional Neural Networks for Object Detection</strong></p><ul><li>intro: PAMI 2016</li><li>intro: an extension of R-CNN. box pre-training, cascade on region proposals, deformation layers and context representations</li><li>project page: <a href="http://www.ee.cuhk.edu.hk/%CB%9Cwlouyang/projects/imagenetDeepId/index.html" target="_blank" rel="noopener">http://www.ee.cuhk.edu.hk/%CB%9Cwlouyang/projects/imagenetDeepId/index.html</a></li><li>arxiv: <a href="http://arxiv.org/abs/1412.5661" target="_blank" rel="noopener">http://arxiv.org/abs/1412.5661</a></li></ul><p><strong>Object Detectors Emerge in Deep Scene CNNs</strong></p><ul><li>intro: ICLR 2015</li><li>arxiv: <a href="http://arxiv.org/abs/1412.6856" target="_blank" rel="noopener">http://arxiv.org/abs/1412.6856</a></li><li>paper: <a href="https://www.robots.ox.ac.uk/~vgg/rg/papers/zhou_iclr15.pdf" target="_blank" rel="noopener">https://www.robots.ox.ac.uk/~vgg/rg/papers/zhou_iclr15.pdf</a></li><li>paper: <a href="https://people.csail.mit.edu/khosla/papers/iclr2015_zhou.pdf" target="_blank" rel="noopener">https://people.csail.mit.edu/khosla/papers/iclr2015_zhou.pdf</a></li><li>slides: <a href="http://places.csail.mit.edu/slide_iclr2015.pdf" target="_blank" rel="noopener">http://places.csail.mit.edu/slide_iclr2015.pdf</a></li></ul><p><strong>segDeepM: Exploiting Segmentation and Context in Deep Neural Networks for Object Detection</strong></p><ul><li>intro: CVPR 2015</li><li>project(code+data): <a href="https://www.cs.toronto.edu/~yukun/segdeepm.html" target="_blank" rel="noopener">https://www.cs.toronto.edu/~yukun/segdeepm.html</a></li><li>arxiv: <a href="https://arxiv.org/abs/1502.04275" target="_blank" rel="noopener">https://arxiv.org/abs/1502.04275</a></li><li>github: <a href="https://github.com/YknZhu/segDeepM" target="_blank" rel="noopener">https://github.com/YknZhu/segDeepM</a></li></ul><p><strong>Object Detection Networks on Convolutional Feature Maps</strong></p><ul><li>intro: TPAMI 2015</li><li>keywords: NoC</li><li>arxiv: <a href="http://arxiv.org/abs/1504.06066" target="_blank" rel="noopener">http://arxiv.org/abs/1504.06066</a></li></ul><p><strong>Improving Object Detection with Deep Convolutional Networks via Bayesian Optimization and Structured Prediction</strong></p><ul><li>arxiv: <a href="http://arxiv.org/abs/1504.03293" target="_blank" rel="noopener">http://arxiv.org/abs/1504.03293</a></li><li>slides: <a href="http://www.ytzhang.net/files/publications/2015-cvpr-det-slides.pdf" target="_blank" rel="noopener">http://www.ytzhang.net/files/publications/2015-cvpr-det-slides.pdf</a></li><li>github: <a href="https://github.com/YutingZhang/fgs-obj" target="_blank" rel="noopener">https://github.com/YutingZhang/fgs-obj</a></li></ul><p><strong>DeepBox: Learning Objectness with Convolutional Networks</strong></p><ul><li>keywords: DeepBox</li><li>arxiv: <a href="http://arxiv.org/abs/1505.02146" target="_blank" rel="noopener">http://arxiv.org/abs/1505.02146</a></li><li>github: <a href="https://github.com/weichengkuo/DeepBox" target="_blank" rel="noopener">https://github.com/weichengkuo/DeepBox</a></li></ul><h2 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a>YOLO</h2><p><strong>You Only Look Once: Unified, Real-Time Object Detection</strong></p><p><a href="https://camo.githubusercontent.com/e69d4118b20a42de4e23b9549f9a6ec6dbbb0814/687474703a2f2f706a7265646469652e636f6d2f6d656469612f66696c65732f6461726b6e65742d626c61636b2d736d616c6c2e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/e69d4118b20a42de4e23b9549f9a6ec6dbbb0814/687474703a2f2f706a7265646469652e636f6d2f6d656469612f66696c65732f6461726b6e65742d626c61636b2d736d616c6c2e706e67" alt="img"></a></p><ul><li>arxiv: <a href="http://arxiv.org/abs/1506.02640" target="_blank" rel="noopener">http://arxiv.org/abs/1506.02640</a></li><li>code: <a href="https://pjreddie.com/darknet/yolov1/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolov1/</a></li><li>github: <a href="https://github.com/pjreddie/darknet" target="_blank" rel="noopener">https://github.com/pjreddie/darknet</a></li><li>blog: <a href="https://pjreddie.com/darknet/yolov1/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolov1/</a></li><li>slides: <a href="https://docs.google.com/presentation/d/1aeRvtKG21KHdD5lg6Hgyhx5rPq_ZOsGjG5rJ1HP7BbA/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1aeRvtKG21KHdD5lg6Hgyhx5rPq_ZOsGjG5rJ1HP7BbA/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p</a></li><li>reddit: <a href="https://www.reddit.com/r/MachineLearning/comments/3a3m0o/realtime_object_detection_with_yolo/" target="_blank" rel="noopener">https://www.reddit.com/r/MachineLearning/comments/3a3m0o/realtime_object_detection_with_yolo/</a></li><li>github: <a href="https://github.com/gliese581gg/YOLO_tensorflow" target="_blank" rel="noopener">https://github.com/gliese581gg/YOLO_tensorflow</a></li><li>github: <a href="https://github.com/xingwangsfu/caffe-yolo" target="_blank" rel="noopener">https://github.com/xingwangsfu/caffe-yolo</a></li><li>github: <a href="https://github.com/frankzhangrui/Darknet-Yolo" target="_blank" rel="noopener">https://github.com/frankzhangrui/Darknet-Yolo</a></li><li>github: <a href="https://github.com/BriSkyHekun/py-darknet-yolo" target="_blank" rel="noopener">https://github.com/BriSkyHekun/py-darknet-yolo</a></li><li>github: <a href="https://github.com/tommy-qichang/yolo.torch" target="_blank" rel="noopener">https://github.com/tommy-qichang/yolo.torch</a></li><li>github: <a href="https://github.com/frischzenger/yolo-windows" target="_blank" rel="noopener">https://github.com/frischzenger/yolo-windows</a></li><li>github: <a href="https://github.com/AlexeyAB/yolo-windows" target="_blank" rel="noopener">https://github.com/AlexeyAB/yolo-windows</a></li><li>github: <a href="https://github.com/nilboy/tensorflow-yolo" target="_blank" rel="noopener">https://github.com/nilboy/tensorflow-yolo</a></li></ul><p><strong>darkflow - translate darknet to tensorflow. Load trained weights, retrain/fine-tune them using tensorflow, export constant graph def to C++</strong></p><ul><li>blog: <a href="https://thtrieu.github.io/notes/yolo-tensorflow-graph-buffer-cpp" target="_blank" rel="noopener">https://thtrieu.github.io/notes/yolo-tensorflow-graph-buffer-cpp</a></li><li>github: <a href="https://github.com/thtrieu/darkflow" target="_blank" rel="noopener">https://github.com/thtrieu/darkflow</a></li></ul><p><strong>Start Training YOLO with Our Own Data</strong></p><p><a href="https://camo.githubusercontent.com/2f99b692dd7ce47d7832385f3e8a6654e680d92a/687474703a2f2f6775616e6768616e2e696e666f2f626c6f672f656e2f77702d636f6e74656e742f75706c6f6164732f323031352f31322f696d616765732d34302e6a7067" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/2f99b692dd7ce47d7832385f3e8a6654e680d92a/687474703a2f2f6775616e6768616e2e696e666f2f626c6f672f656e2f77702d636f6e74656e742f75706c6f6164732f323031352f31322f696d616765732d34302e6a7067" alt="img"></a></p><ul><li>intro: train with customized data and class numbers/labels. Linux / Windows version for darknet.</li><li>blog: <a href="http://guanghan.info/blog/en/my-works/train-yolo/" target="_blank" rel="noopener">http://guanghan.info/blog/en/my-works/train-yolo/</a></li><li>github: <a href="https://github.com/Guanghan/darknet" target="_blank" rel="noopener">https://github.com/Guanghan/darknet</a></li></ul><p><strong>YOLO: Core ML versus MPSNNGraph</strong></p><ul><li>intro: Tiny YOLO for iOS implemented using CoreML but also using the new MPS graph API.</li><li>blog: <a href="http://machinethink.net/blog/yolo-coreml-versus-mps-graph/" target="_blank" rel="noopener">http://machinethink.net/blog/yolo-coreml-versus-mps-graph/</a></li><li>github: <a href="https://github.com/hollance/YOLO-CoreML-MPSNNGraph" target="_blank" rel="noopener">https://github.com/hollance/YOLO-CoreML-MPSNNGraph</a></li></ul><p><strong>TensorFlow YOLO object detection on Android</strong></p><ul><li>intro: Real-time object detection on Android using the YOLO network with TensorFlow</li><li>github: <a href="https://github.com/natanielruiz/android-yolo" target="_blank" rel="noopener">https://github.com/natanielruiz/android-yolo</a></li></ul><p><strong>Computer Vision in iOS – Object Detection</strong></p><ul><li>blog: <a href="https://sriraghu.com/2017/07/12/computer-vision-in-ios-object-detection/" target="_blank" rel="noopener">https://sriraghu.com/2017/07/12/computer-vision-in-ios-object-detection/</a></li><li>github:<a href="https://github.com/r4ghu/iOS-CoreML-Yolo" target="_blank" rel="noopener">https://github.com/r4ghu/iOS-CoreML-Yolo</a></li></ul><h2 id="YOLOv2"><a href="#YOLOv2" class="headerlink" title="YOLOv2"></a>YOLOv2</h2><p><strong>YOLO9000: Better, Faster, Stronger</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1612.08242" target="_blank" rel="noopener">https://arxiv.org/abs/1612.08242</a></li><li>code: <a href="http://pjreddie.com/yolo9000/" target="_blank" rel="noopener">http://pjreddie.com/yolo9000/</a>    <a href="https://pjreddie.com/darknet/yolov2/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolov2/</a></li><li>github(Chainer): <a href="https://github.com/leetenki/YOLOv2" target="_blank" rel="noopener">https://github.com/leetenki/YOLOv2</a></li><li>github(Keras): <a href="https://github.com/allanzelener/YAD2K" target="_blank" rel="noopener">https://github.com/allanzelener/YAD2K</a></li><li>github(PyTorch): <a href="https://github.com/longcw/yolo2-pytorch" target="_blank" rel="noopener">https://github.com/longcw/yolo2-pytorch</a></li><li>github(Tensorflow): <a href="https://github.com/hizhangp/yolo_tensorflow" target="_blank" rel="noopener">https://github.com/hizhangp/yolo_tensorflow</a></li><li>github(Windows): <a href="https://github.com/AlexeyAB/darknet" target="_blank" rel="noopener">https://github.com/AlexeyAB/darknet</a></li><li>github: <a href="https://github.com/choasUp/caffe-yolo9000" target="_blank" rel="noopener">https://github.com/choasUp/caffe-yolo9000</a></li><li>github: <a href="https://github.com/philipperemy/yolo-9000" target="_blank" rel="noopener">https://github.com/philipperemy/yolo-9000</a></li><li>github(TensorFlow): <a href="https://github.com/KOD-Chen/YOLOv2-Tensorflow" target="_blank" rel="noopener">https://github.com/KOD-Chen/YOLOv2-Tensorflow</a></li><li>github(Keras): <a href="https://github.com/yhcc/yolo2" target="_blank" rel="noopener">https://github.com/yhcc/yolo2</a></li><li>github(Keras): <a href="https://github.com/experiencor/keras-yolo2" target="_blank" rel="noopener">https://github.com/experiencor/keras-yolo2</a></li><li>github(TensorFlow): <a href="https://github.com/WojciechMormul/yolo2" target="_blank" rel="noopener">https://github.com/WojciechMormul/yolo2</a></li></ul><p><strong>darknet_scripts</strong></p><ul><li>intro: Auxilary scripts to work with (YOLO) darknet deep learning famework. AKA -&gt; How to generate YOLO anchors?</li><li>github: <a href="https://github.com/Jumabek/darknet_scripts" target="_blank" rel="noopener">https://github.com/Jumabek/darknet_scripts</a></li></ul><p><strong>Yolo_mark: GUI for marking bounded boxes of objects in images for training Yolo v2</strong></p><ul><li>github: <a href="https://github.com/AlexeyAB/Yolo_mark" target="_blank" rel="noopener">https://github.com/AlexeyAB/Yolo_mark</a></li></ul><p><strong>LightNet: Bringing pjreddie’s DarkNet out of the shadows</strong></p><p><a href="https://github.com//explosion/lightnet" target="_blank" rel="noopener">https://github.com//explosion/lightnet</a></p><p><strong>YOLO v2 Bounding Box Tool</strong></p><ul><li>intro: Bounding box labeler tool to generate the training data in the format YOLO v2 requires.</li><li>github: <a href="https://github.com/Cartucho/yolo-boundingbox-labeler-GUI" target="_blank" rel="noopener">https://github.com/Cartucho/yolo-boundingbox-labeler-GUI</a></li></ul><p><strong>Loss Rank Mining: A General Hard Example Mining Method for Real-time Detectors</strong></p><ul><li>intro: <strong>LRM</strong> is the first hard example mining strategy which could fit YOLOv2 perfectly and make it better applied in series of real scenarios where both real-time rates and accurate detection are strongly demanded.</li><li>arxiv: <a href="https://arxiv.org/abs/1804.04606" target="_blank" rel="noopener">https://arxiv.org/abs/1804.04606</a></li></ul><p><strong>Object detection at 200 Frames Per Second</strong></p><ul><li>intro: faster than Tiny-Yolo-v2</li><li>arxiv: <a href="https://arxiv.org/abs/1805.06361" target="_blank" rel="noopener">https://arxiv.org/abs/1805.06361</a></li></ul><p><strong>Event-based Convolutional Networks for Object Detection in Neuromorphic Cameras</strong></p><ul><li>intro: YOLE–Object Detection in Neuromorphic Cameras</li><li>arxiv:<a href="https://arxiv.org/abs/1805.07931" target="_blank" rel="noopener">https://arxiv.org/abs/1805.07931</a></li></ul><p><strong>OmniDetector: With Neural Networks to Bounding Boxes</strong></p><ul><li>intro: a person detector on n fish-eye images of indoor scenes（NIPS 2018）</li><li>arxiv:<a href="https://arxiv.org/abs/1805.08503" target="_blank" rel="noopener">https://arxiv.org/abs/1805.08503</a></li><li>datasets:<a href="https://gitlab.com/omnidetector/omnidetector" target="_blank" rel="noopener">https://gitlab.com/omnidetector/omnidetector</a></li></ul><h2 id="YOLOv3"><a href="#YOLOv3" class="headerlink" title="YOLOv3"></a>YOLOv3</h2><p><strong>YOLOv3: An Incremental Improvement</strong></p><ul><li>arxiv:<a href="https://arxiv.org/abs/1804.02767" target="_blank" rel="noopener">https://arxiv.org/abs/1804.02767</a></li><li>paper:<a href="https://pjreddie.com/media/files/papers/YOLOv3.pdf" target="_blank" rel="noopener">https://pjreddie.com/media/files/papers/YOLOv3.pdf</a></li><li>code: <a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolo/</a></li><li>github(Official):<a href="https://github.com/pjreddie/darknet" target="_blank" rel="noopener">https://github.com/pjreddie/darknet</a></li><li>github:<a href="https://github.com/mystic123/tensorflow-yolo-v3" target="_blank" rel="noopener">https://github.com/mystic123/tensorflow-yolo-v3</a></li><li>github:<a href="https://github.com/experiencor/keras-yolo3" target="_blank" rel="noopener">https://github.com/experiencor/keras-yolo3</a></li><li>github:<a href="https://github.com/qqwweee/keras-yolo3" target="_blank" rel="noopener">https://github.com/qqwweee/keras-yolo3</a></li><li>github:<a href="https://github.com/marvis/pytorch-yolo3" target="_blank" rel="noopener">https://github.com/marvis/pytorch-yolo3</a></li><li>github:<a href="https://github.com/ayooshkathuria/pytorch-yolo-v3" target="_blank" rel="noopener">https://github.com/ayooshkathuria/pytorch-yolo-v3</a></li><li>github:<a href="https://github.com/ayooshkathuria/YOLO_v3_tutorial_from_scratch" target="_blank" rel="noopener">https://github.com/ayooshkathuria/YOLO_v3_tutorial_from_scratch</a></li><li>github:<a href="https://github.com/eriklindernoren/PyTorch-YOLOv3" target="_blank" rel="noopener">https://github.com/eriklindernoren/PyTorch-YOLOv3</a></li><li>github:<a href="https://github.com/ultralytics/yolov3" target="_blank" rel="noopener">https://github.com/ultralytics/yolov3</a></li><li>github:<a href="https://github.com/BobLiu20/YOLOv3_PyTorch" target="_blank" rel="noopener">https://github.com/BobLiu20/YOLOv3_PyTorch</a></li><li>github:<a href="https://github.com/andy-yun/pytorch-0.4-yolov3" target="_blank" rel="noopener">https://github.com/andy-yun/pytorch-0.4-yolov3</a></li><li>github:<a href="https://github.com/DeNA/PyTorch_YOLOv3" target="_blank" rel="noopener">https://github.com/DeNA/PyTorch_YOLOv3</a></li></ul><h2 id="YOLT"><a href="#YOLT" class="headerlink" title="YOLT"></a>YOLT</h2><p><strong>You Only Look Twice: Rapid Multi-Scale Object Detection In Satellite Imagery</strong></p><ul><li>intro: Small Object Detection</li></ul><ul><li>arxiv:<a href="https://arxiv.org/abs/1805.09512" target="_blank" rel="noopener">https://arxiv.org/abs/1805.09512</a></li><li>github:<a href="https://github.com/avanetten/yolt" target="_blank" rel="noopener">https://github.com/avanetten/yolt</a></li></ul><h2 id="SSD"><a href="#SSD" class="headerlink" title="SSD"></a>SSD</h2><p><strong>SSD: Single Shot MultiBox Detector</strong></p><p><a href="https://camo.githubusercontent.com/ad9b147ed3a5f48ffb7c3540711c15aa04ce49c6/687474703a2f2f7777772e63732e756e632e6564752f7e776c69752f7061706572732f7373642e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/ad9b147ed3a5f48ffb7c3540711c15aa04ce49c6/687474703a2f2f7777772e63732e756e632e6564752f7e776c69752f7061706572732f7373642e706e67" alt="img"></a></p><ul><li>intro: ECCV 2016 Oral</li><li>arxiv: <a href="http://arxiv.org/abs/1512.02325" target="_blank" rel="noopener">http://arxiv.org/abs/1512.02325</a></li><li>paper: <a href="http://www.cs.unc.edu/~wliu/papers/ssd.pdf" target="_blank" rel="noopener">http://www.cs.unc.edu/~wliu/papers/ssd.pdf</a></li><li>slides: <a href="http://www.cs.unc.edu/~wliu/papers/ssd_eccv2016_slide.pdf" target="_blank" rel="noopener">http://www.cs.unc.edu/%7Ewliu/papers/ssd_eccv2016_slide.pdf</a></li><li>github(Official): <a href="https://github.com/weiliu89/caffe/tree/ssd" target="_blank" rel="noopener">https://github.com/weiliu89/caffe/tree/ssd</a></li><li>video: <a href="http://weibo.com/p/2304447a2326da963254c963c97fb05dd3a973" target="_blank" rel="noopener">http://weibo.com/p/2304447a2326da963254c963c97fb05dd3a973</a></li><li>github: <a href="https://github.com/zhreshold/mxnet-ssd" target="_blank" rel="noopener">https://github.com/zhreshold/mxnet-ssd</a></li><li>github: <a href="https://github.com/zhreshold/mxnet-ssd.cpp" target="_blank" rel="noopener">https://github.com/zhreshold/mxnet-ssd.cpp</a></li><li>github: <a href="https://github.com/rykov8/ssd_keras" target="_blank" rel="noopener">https://github.com/rykov8/ssd_keras</a></li><li>github: <a href="https://github.com/balancap/SSD-Tensorflow" target="_blank" rel="noopener">https://github.com/balancap/SSD-Tensorflow</a></li><li>github: <a href="https://github.com/amdegroot/ssd.pytorch" target="_blank" rel="noopener">https://github.com/amdegroot/ssd.pytorch</a></li><li>github(Caffe): <a href="https://github.com/chuanqi305/MobileNet-SSD" target="_blank" rel="noopener">https://github.com/chuanqi305/MobileNet-SSD</a></li></ul><p><strong>What’s the diffience in performance between this new code you pushed and the previous code? #327</strong></p><p><a href="https://github.com/weiliu89/caffe/issues/327" target="_blank" rel="noopener">https://github.com/weiliu89/caffe/issues/327</a></p><h2 id="DSSD"><a href="#DSSD" class="headerlink" title="DSSD"></a>DSSD</h2><p><strong>DSSD : Deconvolutional Single Shot Detector</strong></p><ul><li>intro: UNC Chapel Hill &amp; Amazon Inc</li><li>arxiv: <a href="https://arxiv.org/abs/1701.06659" target="_blank" rel="noopener">https://arxiv.org/abs/1701.06659</a></li><li>github: <a href="https://github.com/chengyangfu/caffe/tree/dssd" target="_blank" rel="noopener">https://github.com/chengyangfu/caffe/tree/dssd</a></li><li>github: <a href="https://github.com/MTCloudVision/mxnet-dssd" target="_blank" rel="noopener">https://github.com/MTCloudVision/mxnet-dssd</a></li><li>demo: <a href="http://120.52.72.53/www.cs.unc.edu/c3pr90ntc0td/~cyfu/dssd_lalaland.mp4" target="_blank" rel="noopener">http://120.52.72.53/www.cs.unc.edu/c3pr90ntc0td/~cyfu/dssd_lalaland.mp4</a></li></ul><p><strong>Enhancement of SSD by concatenating feature maps for object detection</strong></p><ul><li>intro: rainbow SSD (R-SSD)</li><li>arxiv: <a href="https://arxiv.org/abs/1705.09587" target="_blank" rel="noopener">https://arxiv.org/abs/1705.09587</a></li></ul><p><strong>Context-aware Single-Shot Detector</strong></p><ul><li>keywords: CSSD, DiCSSD, DeCSSD, effective receptive fields (ERFs), theoretical receptive fields (TRFs)</li><li>arxiv: <a href="https://arxiv.org/abs/1707.08682" target="_blank" rel="noopener">https://arxiv.org/abs/1707.08682</a></li></ul><p><strong>Feature-Fused SSD: Fast Detection for Small Objects</strong></p><p><a href="https://arxiv.org/abs/1709.05054" target="_blank" rel="noopener">https://arxiv.org/abs/1709.05054</a></p><h2 id="FSSD"><a href="#FSSD" class="headerlink" title="FSSD"></a>FSSD</h2><p><strong>FSSD: Feature Fusion Single Shot Multibox Detector</strong></p><p><a href="https://arxiv.org/abs/1712.00960" target="_blank" rel="noopener">https://arxiv.org/abs/1712.00960</a></p><p><strong>Weaving Multi-scale Context for Single Shot Detector</strong></p><ul><li>intro: WeaveNet</li><li>keywords: fuse multi-scale information</li><li>arxiv: <a href="https://arxiv.org/abs/1712.03149" target="_blank" rel="noopener">https://arxiv.org/abs/1712.03149</a></li></ul><h2 id="ESSD"><a href="#ESSD" class="headerlink" title="ESSD"></a>ESSD</h2><p><strong>Extend the shallow part of Single Shot MultiBox Detector via Convolutional Neural Network</strong></p><p><a href="https://arxiv.org/abs/1801.05918" target="_blank" rel="noopener">https://arxiv.org/abs/1801.05918</a></p><p><strong>Tiny SSD: A Tiny Single-shot Detection Deep Convolutional Neural Network for Real-time Embedded Object Detection</strong></p><p><a href="https://arxiv.org/abs/1802.06488" target="_blank" rel="noopener">https://arxiv.org/abs/1802.06488</a></p><h2 id="MDSSD"><a href="#MDSSD" class="headerlink" title="MDSSD"></a>MDSSD</h2><p><strong>MDSSD: Multi-scale Deconvolutional Single Shot Detector for small objects</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1805.07009" target="_blank" rel="noopener">https://arxiv.org/abs/1805.07009</a></li></ul><h2 id="Pelee"><a href="#Pelee" class="headerlink" title="Pelee"></a>Pelee</h2><p><strong>Pelee: A Real-Time Object Detection System on Mobile Devices</strong></p><p><a href="https://github.com/Robert-JunWang/Pelee" target="_blank" rel="noopener">https://github.com/Robert-JunWang/Pelee</a></p><ul><li>intro: (ICLR 2018 workshop track)</li></ul><ul><li>arxiv: <a href="https://arxiv.org/abs/1804.06882" target="_blank" rel="noopener">https://arxiv.org/abs/1804.06882</a></li><li>github: <a href="https://github.com/Robert-JunWang/Pelee" target="_blank" rel="noopener">https://github.com/Robert-JunWang/Pelee</a></li></ul><h2 id="Fire-SSD"><a href="#Fire-SSD" class="headerlink" title="Fire SSD"></a>Fire SSD</h2><p><strong>Fire SSD: Wide Fire Modules based Single Shot Detector on Edge Device</strong></p><ul><li>intro:low cost, fast speed and high mAP on  factor edge computing devices</li></ul><ul><li>arxiv:<a href="https://arxiv.org/abs/1806.05363" target="_blank" rel="noopener">https://arxiv.org/abs/1806.05363</a></li></ul><h2 id="R-FCN"><a href="#R-FCN" class="headerlink" title="R-FCN"></a>R-FCN</h2><p><strong>R-FCN: Object Detection via Region-based Fully Convolutional Networks</strong></p><ul><li>arxiv: <a href="http://arxiv.org/abs/1605.06409" target="_blank" rel="noopener">http://arxiv.org/abs/1605.06409</a></li><li>github: <a href="https://github.com/daijifeng001/R-FCN" target="_blank" rel="noopener">https://github.com/daijifeng001/R-FCN</a></li><li>github(MXNet): <a href="https://github.com/msracver/Deformable-ConvNets/tree/master/rfcn" target="_blank" rel="noopener">https://github.com/msracver/Deformable-ConvNets/tree/master/rfcn</a></li><li>github: <a href="https://github.com/Orpine/py-R-FCN" target="_blank" rel="noopener">https://github.com/Orpine/py-R-FCN</a></li><li>github: <a href="https://github.com/PureDiors/pytorch_RFCN" target="_blank" rel="noopener">https://github.com/PureDiors/pytorch_RFCN</a></li><li>github: <a href="https://github.com/bharatsingh430/py-R-FCN-multiGPU" target="_blank" rel="noopener">https://github.com/bharatsingh430/py-R-FCN-multiGPU</a></li><li>github: <a href="https://github.com/xdever/RFCN-tensorflow" target="_blank" rel="noopener">https://github.com/xdever/RFCN-tensorflow</a></li></ul><p><strong>R-FCN-3000 at 30fps: Decoupling Detection and Classification</strong></p><p><a href="https://arxiv.org/abs/1712.01802" target="_blank" rel="noopener">https://arxiv.org/abs/1712.01802</a></p><p><strong>Recycle deep features for better object detection</strong></p><ul><li>arxiv: <a href="http://arxiv.org/abs/1607.05066" target="_blank" rel="noopener">http://arxiv.org/abs/1607.05066</a></li></ul><h2 id="FPN"><a href="#FPN" class="headerlink" title="FPN"></a>FPN</h2><p><strong>Feature Pyramid Networks for Object Detection</strong></p><ul><li>intro: Facebook AI Research</li><li>arxiv: <a href="https://arxiv.org/abs/1612.03144" target="_blank" rel="noopener">https://arxiv.org/abs/1612.03144</a></li></ul><p><strong>Action-Driven Object Detection with Top-Down Visual Attentions</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1612.06704" target="_blank" rel="noopener">https://arxiv.org/abs/1612.06704</a></li></ul><p><strong>Beyond Skip Connections: Top-Down Modulation for Object Detection</strong></p><ul><li>intro: CMU &amp; UC Berkeley &amp; Google Research</li><li>arxiv: <a href="https://arxiv.org/abs/1612.06851" target="_blank" rel="noopener">https://arxiv.org/abs/1612.06851</a></li></ul><p><strong>Wide-Residual-Inception Networks for Real-time Object Detection</strong></p><ul><li>intro: Inha University</li><li>arxiv: <a href="https://arxiv.org/abs/1702.01243" target="_blank" rel="noopener">https://arxiv.org/abs/1702.01243</a></li></ul><p><strong>Attentional Network for Visual Object Detection</strong></p><ul><li>intro: University of Maryland &amp; Mitsubishi Electric Research Laboratories</li><li>arxiv: <a href="https://arxiv.org/abs/1702.01478" target="_blank" rel="noopener">https://arxiv.org/abs/1702.01478</a></li></ul><p><strong>Learning Chained Deep Features and Classifiers for Cascade in Object Detection</strong></p><ul><li>keykwords: CC-Net</li><li>intro: chained cascade network (CC-Net). 81.1% mAP on PASCAL VOC 2007</li><li>arxiv: <a href="https://arxiv.org/abs/1702.07054" target="_blank" rel="noopener">https://arxiv.org/abs/1702.07054</a></li></ul><p><strong>DeNet: Scalable Real-time Object Detection with Directed Sparse Sampling</strong></p><ul><li>intro: ICCV 2017 (poster)</li><li>arxiv: <a href="https://arxiv.org/abs/1703.10295" target="_blank" rel="noopener">https://arxiv.org/abs/1703.10295</a></li></ul><p><strong>Discriminative Bimodal Networks for Visual Localization and Detection with Natural Language Queries</strong></p><ul><li>intro: CVPR 2017</li><li>arxiv: <a href="https://arxiv.org/abs/1704.03944" target="_blank" rel="noopener">https://arxiv.org/abs/1704.03944</a></li></ul><p><strong>Spatial Memory for Context Reasoning in Object Detection</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1704.04224" target="_blank" rel="noopener">https://arxiv.org/abs/1704.04224</a></li></ul><p><strong>Accurate Single Stage Detector Using Recurrent Rolling Convolution</strong></p><ul><li>intro: CVPR 2017. SenseTime</li><li>keywords: Recurrent Rolling Convolution (RRC)</li><li>arxiv: <a href="https://arxiv.org/abs/1704.05776" target="_blank" rel="noopener">https://arxiv.org/abs/1704.05776</a></li><li>github: <a href="https://github.com/xiaohaoChen/rrc_detection" target="_blank" rel="noopener">https://github.com/xiaohaoChen/rrc_detection</a></li></ul><p><strong>Deep Occlusion Reasoning for Multi-Camera Multi-Target Detection</strong></p><p><a href="https://arxiv.org/abs/1704.05775" target="_blank" rel="noopener">https://arxiv.org/abs/1704.05775</a></p><p><strong>LCDet: Low-Complexity Fully-Convolutional Neural Networks for Object Detection in Embedded Systems</strong></p><ul><li>intro: Embedded Vision Workshop in CVPR. UC San Diego &amp; Qualcomm Inc</li><li>arxiv: <a href="https://arxiv.org/abs/1705.05922" target="_blank" rel="noopener">https://arxiv.org/abs/1705.05922</a></li></ul><p><strong>Point Linking Network for Object Detection</strong></p><ul><li>intro: Point Linking Network (PLN)</li><li>arxiv: <a href="https://arxiv.org/abs/1706.03646" target="_blank" rel="noopener">https://arxiv.org/abs/1706.03646</a></li></ul><p><strong>Perceptual Generative Adversarial Networks for Small Object Detection</strong></p><p><a href="https://arxiv.org/abs/1706.05274" target="_blank" rel="noopener">https://arxiv.org/abs/1706.05274</a></p><p><strong>Few-shot Object Detection</strong></p><p><a href="https://arxiv.org/abs/1706.08249" target="_blank" rel="noopener">https://arxiv.org/abs/1706.08249</a></p><p><strong>Yes-Net: An effective Detector Based on Global Information</strong></p><p><a href="https://arxiv.org/abs/1706.09180" target="_blank" rel="noopener">https://arxiv.org/abs/1706.09180</a></p><p><strong>SMC Faster R-CNN: Toward a scene-specialized multi-object detector</strong></p><p><a href="https://arxiv.org/abs/1706.10217" target="_blank" rel="noopener">https://arxiv.org/abs/1706.10217</a></p><p><strong>Towards lightweight convolutional neural networks for object detection</strong></p><p><a href="https://arxiv.org/abs/1707.01395" target="_blank" rel="noopener">https://arxiv.org/abs/1707.01395</a></p><p><strong>RON: Reverse Connection with Objectness Prior Networks for Object Detection</strong></p><ul><li>intro: CVPR 2017</li><li>arxiv: <a href="https://arxiv.org/abs/1707.01691" target="_blank" rel="noopener">https://arxiv.org/abs/1707.01691</a></li><li>github: <a href="https://github.com/taokong/RON" target="_blank" rel="noopener">https://github.com/taokong/RON</a></li></ul><p><strong>Mimicking Very Efficient Network for Object Detection</strong></p><ul><li>intro: CVPR 2017. SenseTime &amp; Beihang University</li><li>paper: <a href="http://openaccess.thecvf.com/content_cvpr_2017/papers/Li_Mimicking_Very_Efficient_CVPR_2017_paper.pdf" target="_blank" rel="noopener">http://openaccess.thecvf.com/content_cvpr_2017/papers/Li_Mimicking_Very_Efficient_CVPR_2017_paper.pdf</a></li></ul><p><strong>Residual Features and Unified Prediction Network for Single Stage Detection</strong></p><p><a href="https://arxiv.org/abs/1707.05031" target="_blank" rel="noopener">https://arxiv.org/abs/1707.05031</a></p><p><strong>Deformable Part-based Fully Convolutional Network for Object Detection</strong></p><ul><li>intro: BMVC 2017 (oral). Sorbonne Universités &amp; CEDRIC</li><li>arxiv: <a href="https://arxiv.org/abs/1707.06175" target="_blank" rel="noopener">https://arxiv.org/abs/1707.06175</a></li></ul><p><strong>Adaptive Feeding: Achieving Fast and Accurate Detections by Adaptively Combining Object Detectors</strong></p><ul><li>intro: ICCV 2017</li><li>arxiv: <a href="https://arxiv.org/abs/1707.06399" target="_blank" rel="noopener">https://arxiv.org/abs/1707.06399</a></li></ul><p><strong>Recurrent Scale Approximation for Object Detection in CNN</strong></p><ul><li>intro: ICCV 2017</li><li>keywords: Recurrent Scale Approximation (RSA)</li><li>arxiv: <a href="https://arxiv.org/abs/1707.09531" target="_blank" rel="noopener">https://arxiv.org/abs/1707.09531</a></li><li>github: <a href="https://github.com/sciencefans/RSA-for-object-detection" target="_blank" rel="noopener">https://github.com/sciencefans/RSA-for-object-detection</a></li></ul><h2 id="DSOD"><a href="#DSOD" class="headerlink" title="DSOD"></a>DSOD</h2><p><strong>DSOD: Learning Deeply Supervised Object Detectors from Scratch</strong></p><p><img src="https://user-images.githubusercontent.com/3794909/28934967-718c9302-78b5-11e7-89ee-8b514e53e23c.png" alt="img"></p><ul><li>intro: ICCV 2017. Fudan University &amp; Tsinghua University &amp; Intel Labs China</li><li>arxiv: <a href="https://arxiv.org/abs/1708.01241" target="_blank" rel="noopener">https://arxiv.org/abs/1708.01241</a></li><li>github: <a href="https://github.com/szq0214/DSOD" target="_blank" rel="noopener">https://github.com/szq0214/DSOD</a></li><li>github:<a href="https://github.com/Windaway/DSOD-Tensorflow" target="_blank" rel="noopener">https://github.com/Windaway/DSOD-Tensorflow</a></li><li>github:<a href="https://github.com/chenyuntc/dsod.pytorch" target="_blank" rel="noopener">https://github.com/chenyuntc/dsod.pytorch</a></li></ul><p><strong>Learning Object Detectors from Scratch with Gated Recurrent Feature Pyramids</strong></p><ul><li>arxiv:<a href="https://arxiv.org/abs/1712.00886" target="_blank" rel="noopener">https://arxiv.org/abs/1712.00886</a></li><li>github:<a href="https://github.com/szq0214/GRP-DSOD" target="_blank" rel="noopener">https://github.com/szq0214/GRP-DSOD</a></li></ul><p><strong>Tiny-DSOD: Lightweight Object Detection for Resource-Restricted Usages</strong></p><ul><li>intro: BMVC 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1807.11013" target="_blank" rel="noopener">https://arxiv.org/abs/1807.11013</a></li></ul><p><strong>Object Detection from Scratch with Deep Supervision</strong></p><ul><li>intro: This is an extended version of DSOD</li><li>arXiv: <a href="https://arxiv.org/abs/1809.09294" target="_blank" rel="noopener">https://arxiv.org/abs/1809.09294</a></li></ul><h2 id="RetinaNet"><a href="#RetinaNet" class="headerlink" title="RetinaNet"></a>RetinaNet</h2><p><strong>Focal Loss for Dense Object Detection</strong></p><ul><li>intro: ICCV 2017 Best student paper award. Facebook AI Research</li><li>keywords: RetinaNet</li><li>arxiv: <a href="https://arxiv.org/abs/1708.02002" target="_blank" rel="noopener">https://arxiv.org/abs/1708.02002</a></li></ul><p><strong>CoupleNet: Coupling Global Structure with Local Parts for Object Detection</strong></p><ul><li>intro: ICCV 2017</li><li>arxiv: <a href="https://arxiv.org/abs/1708.02863" target="_blank" rel="noopener">https://arxiv.org/abs/1708.02863</a></li></ul><p><strong>Incremental Learning of Object Detectors without Catastrophic Forgetting</strong></p><ul><li>intro: ICCV 2017. Inria</li><li>arxiv: <a href="https://arxiv.org/abs/1708.06977" target="_blank" rel="noopener">https://arxiv.org/abs/1708.06977</a></li></ul><p><strong>Zoom Out-and-In Network with Map Attention Decision for Region Proposal and Object Detection</strong></p><p><a href="https://arxiv.org/abs/1709.04347" target="_blank" rel="noopener">https://arxiv.org/abs/1709.04347</a></p><p><strong>StairNet: Top-Down Semantic Aggregation for Accurate One Shot Detection</strong></p><p><a href="https://arxiv.org/abs/1709.05788" target="_blank" rel="noopener">https://arxiv.org/abs/1709.05788</a></p><p><strong>Dynamic Zoom-in Network for Fast Object Detection in Large Images</strong></p><p><a href="https://arxiv.org/abs/1711.05187" target="_blank" rel="noopener">https://arxiv.org/abs/1711.05187</a></p><p><strong>Zero-Annotation Object Detection with Web Knowledge Transfer</strong></p><ul><li>intro: NTU, Singapore &amp; Amazon</li><li>keywords: multi-instance multi-label domain adaption learning framework</li><li>arxiv: <a href="https://arxiv.org/abs/1711.05954" target="_blank" rel="noopener">https://arxiv.org/abs/1711.05954</a></li></ul><h2 id="MegDet"><a href="#MegDet" class="headerlink" title="MegDet"></a>MegDet</h2><p><strong>MegDet: A Large Mini-Batch Object Detector</strong></p><ul><li>intro: Peking University &amp; Tsinghua University &amp; Megvii Inc</li><li>arxiv: <a href="https://arxiv.org/abs/1711.07240" target="_blank" rel="noopener">https://arxiv.org/abs/1711.07240</a></li></ul><p><strong>Receptive Field Block Net for Accurate and Fast Object Detection</strong></p><ul><li>intro: RFBNet</li><li>arxiv: <a href="https://arxiv.org/abs/1711.07767" target="_blank" rel="noopener">https://arxiv.org/abs/1711.07767</a></li><li>github: <a href="https://github.com//ruinmessi/RFBNet" target="_blank" rel="noopener">https://github.com//ruinmessi/RFBNet</a></li></ul><p><strong>An Analysis of Scale Invariance in Object Detection - SNIP</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1711.08189" target="_blank" rel="noopener">https://arxiv.org/abs/1711.08189</a></li><li>github: <a href="https://github.com/bharatsingh430/snip" target="_blank" rel="noopener">https://github.com/bharatsingh430/snip</a></li></ul><p><strong>Feature Selective Networks for Object Detection</strong></p><p><a href="https://arxiv.org/abs/1711.08879" target="_blank" rel="noopener">https://arxiv.org/abs/1711.08879</a></p><p><strong>Learning a Rotation Invariant Detector with Rotatable Bounding Box</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1711.09405" target="_blank" rel="noopener">https://arxiv.org/abs/1711.09405</a></li><li>github: <a href="https://github.com/liulei01/DRBox" target="_blank" rel="noopener">https://github.com/liulei01/DRBox</a></li></ul><p><strong>Scalable Object Detection for Stylized Objects</strong></p><ul><li>intro: Microsoft AI &amp; Research Munich</li><li>arxiv: <a href="https://arxiv.org/abs/1711.09822" target="_blank" rel="noopener">https://arxiv.org/abs/1711.09822</a></li></ul><p><strong>Learning Object Detectors from Scratch with Gated Recurrent Feature Pyramids</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1712.00886" target="_blank" rel="noopener">https://arxiv.org/abs/1712.00886</a></li><li>github: <a href="https://github.com/szq0214/GRP-DSOD" target="_blank" rel="noopener">https://github.com/szq0214/GRP-DSOD</a></li></ul><p><strong>Deep Regionlets for Object Detection</strong></p><ul><li>keywords: region selection network, gating network</li><li>arxiv: <a href="https://arxiv.org/abs/1712.02408" target="_blank" rel="noopener">https://arxiv.org/abs/1712.02408</a></li></ul><p><strong>Training and Testing Object Detectors with Virtual Images</strong></p><ul><li>intro: IEEE/CAA Journal of Automatica Sinica</li><li>arxiv: <a href="https://arxiv.org/abs/1712.08470" target="_blank" rel="noopener">https://arxiv.org/abs/1712.08470</a></li></ul><p><strong>Large-Scale Object Discovery and Detector Adaptation from Unlabeled Video</strong></p><ul><li>keywords: object mining, object tracking, unsupervised object discovery by appearance-based clustering, self-supervised detector adaptation</li><li>arxiv: <a href="https://arxiv.org/abs/1712.08832" target="_blank" rel="noopener">https://arxiv.org/abs/1712.08832</a></li></ul><p><strong>Spot the Difference by Object Detection</strong></p><ul><li>intro: Tsinghua University &amp; JD Group</li><li>arxiv: <a href="https://arxiv.org/abs/1801.01051" target="_blank" rel="noopener">https://arxiv.org/abs/1801.01051</a></li></ul><p><strong>Localization-Aware Active Learning for Object Detection</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1801.05124" target="_blank" rel="noopener">https://arxiv.org/abs/1801.05124</a></li></ul><p><strong>Object Detection with Mask-based Feature Encoding</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1802.03934" target="_blank" rel="noopener">https://arxiv.org/abs/1802.03934</a></li></ul><p><strong>LSTD: A Low-Shot Transfer Detector for Object Detection</strong></p><ul><li>intro: AAAI 2018</li><li>arxiv: <a href="https://arxiv.org/abs/1803.01529" target="_blank" rel="noopener">https://arxiv.org/abs/1803.01529</a></li></ul><p><strong>Pseudo Mask Augmented Object Detection</strong></p><p><a href="https://arxiv.org/abs/1803.05858" target="_blank" rel="noopener">https://arxiv.org/abs/1803.05858</a></p><p><strong>Revisiting RCNN: On Awakening the Classification Power of Faster RCNN</strong></p><p><a href="https://arxiv.org/abs/1803.06799" target="_blank" rel="noopener">https://arxiv.org/abs/1803.06799</a></p><p><strong>Learning Region Features for Object Detection</strong></p><ul><li>intro: Peking University &amp; MSRA</li><li>arxiv: <a href="https://arxiv.org/abs/1803.07066" target="_blank" rel="noopener">https://arxiv.org/abs/1803.07066</a></li></ul><p><strong>Single-Shot Bidirectional Pyramid Networks for High-Quality Object Detection</strong></p><ul><li>intro: Singapore Management University &amp; Zhejiang University</li><li>arxiv: <a href="https://arxiv.org/abs/1803.08208" target="_blank" rel="noopener">https://arxiv.org/abs/1803.08208</a></li></ul><p><strong>Object Detection for Comics using Manga109 Annotations</strong></p><ul><li>intro: University of Tokyo &amp; National Institute of Informatics, Japan</li><li>arxiv: <a href="https://arxiv.org/abs/1803.08670" target="_blank" rel="noopener">https://arxiv.org/abs/1803.08670</a></li></ul><p><strong>Task-Driven Super Resolution: Object Detection in Low-resolution Images</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1803.11316" target="_blank" rel="noopener">https://arxiv.org/abs/1803.11316</a></li></ul><p><strong>Transferring Common-Sense Knowledge for Object Detection</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1804.01077" target="_blank" rel="noopener">https://arxiv.org/abs/1804.01077</a></li></ul><p><strong>Multi-scale Location-aware Kernel Representation for Object Detection</strong></p><ul><li>intro: CVPR 2018</li><li>arxiv: <a href="https://arxiv.org/abs/1804.00428" target="_blank" rel="noopener">https://arxiv.org/abs/1804.00428</a></li><li>github: <a href="https://github.com/Hwang64/MLKP" target="_blank" rel="noopener">https://github.com/Hwang64/MLKP</a></li></ul><p><strong>Loss Rank Mining: A General Hard Example Mining Method for Real-time Detectors</strong></p><ul><li>intro: National University of Defense Technology</li><li>arxiv: <a href="https://arxiv.org/abs/1804.04606" target="_blank" rel="noopener">https://arxiv.org/abs/1804.04606</a></li></ul><p><strong>Robust Physical Adversarial Attack on Faster R-CNN Object Detector</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1804.05810" target="_blank" rel="noopener">https://arxiv.org/abs/1804.05810</a></li></ul><h2 id="RefineNet"><a href="#RefineNet" class="headerlink" title="RefineNet"></a>RefineNet</h2><p><strong>Single-Shot Refinement Neural Network for Object Detection</strong></p><ul><li><p>intro: CVPR 2018</p></li><li><p>arxiv: <a href="https://arxiv.org/abs/1711.06897" target="_blank" rel="noopener">https://arxiv.org/abs/1711.06897</a></p></li><li><p>github: <a href="https://github.com/sfzhang15/RefineDet" target="_blank" rel="noopener">https://github.com/sfzhang15/RefineDet</a></p></li><li><p>github: <a href="https://github.com/lzx1413/PytorchSSD" target="_blank" rel="noopener">https://github.com/lzx1413/PytorchSSD</a></p></li><li><p>github: <a href="https://github.com/ddlee96/RefineDet_mxnet" target="_blank" rel="noopener">https://github.com/ddlee96/RefineDet_mxnet</a></p></li><li><p>github: <a href="https://github.com/MTCloudVision/RefineDet-Mxnet" target="_blank" rel="noopener">https://github.com/MTCloudVision/RefineDet-Mxnet</a></p></li></ul><h2 id="DetNet"><a href="#DetNet" class="headerlink" title="DetNet"></a>DetNet</h2><p><strong>DetNet: A Backbone network for Object Detection</strong></p><ul><li>intro: Tsinghua University &amp; Face++</li><li>arxiv: <a href="https://arxiv.org/abs/1804.06215" target="_blank" rel="noopener">https://arxiv.org/abs/1804.06215</a></li></ul><h2 id="SSOD"><a href="#SSOD" class="headerlink" title="SSOD"></a>SSOD</h2><p><strong>Self-supervisory Signals for Object Discovery and Detection</strong></p><ul><li>Google Brain</li><li>arxiv:<a href="https://arxiv.org/abs/1806.03370" target="_blank" rel="noopener">https://arxiv.org/abs/1806.03370</a></li></ul><h2 id="CornerNet"><a href="#CornerNet" class="headerlink" title="CornerNet"></a>CornerNet</h2><p><strong>CornerNet: Detecting Objects as Paired Keypoints</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1808.01244" target="_blank" rel="noopener">https://arxiv.org/abs/1808.01244</a></li><li>github: <a href="https://github.com/umich-vl/CornerNet" target="_blank" rel="noopener">https://github.com/umich-vl/CornerNet</a></li></ul><h2 id="M2Det"><a href="#M2Det" class="headerlink" title="M2Det"></a>M2Det</h2><p><strong>M2Det: A Single-Shot Object Detector based on Multi-Level Feature Pyramid Network</strong></p><ul><li>intro: AAAI 2019</li><li>arXiv: <a href="https://arxiv.org/abs/1811.04533" target="_blank" rel="noopener">https://arxiv.org/abs/1811.04533</a></li><li>github: <a href="https://github.com/qijiezhao/M2Det" target="_blank" rel="noopener">https://github.com/qijiezhao/M2Det</a></li></ul><h2 id="3D-Object-Detection"><a href="#3D-Object-Detection" class="headerlink" title="3D Object Detection"></a>3D Object Detection</h2><p><strong>3D Backbone Network for 3D Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1901.08373" target="_blank" rel="noopener">https://arxiv.org/abs/1901.08373</a></li></ul><p><strong>LMNet: Real-time Multiclass Object Detection on CPU using 3D LiDARs</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1805.04902" target="_blank" rel="noopener">https://arxiv.org/abs/1805.04902</a></li><li>github: <a href="https://github.com/CPFL/Autoware/tree/feature/cnn_lidar_detection" target="_blank" rel="noopener">https://github.com/CPFL/Autoware/tree/feature/cnn_lidar_detection</a></li></ul><h2 id="ZSD（Zero-Shot-Object-Detection）"><a href="#ZSD（Zero-Shot-Object-Detection）" class="headerlink" title="ZSD（Zero-Shot Object Detection）"></a>ZSD（Zero-Shot Object Detection）</h2><p><strong>Zero-Shot Detection</strong></p><ul><li>intro: Australian National University</li><li>keywords: YOLO</li><li>arxiv: <a href="https://arxiv.org/abs/1803.07113" target="_blank" rel="noopener">https://arxiv.org/abs/1803.07113</a></li></ul><p><strong>Zero-Shot Object Detection</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1804.04340" target="_blank" rel="noopener">https://arxiv.org/abs/1804.04340</a></li></ul><p><strong>Zero-Shot Object Detection: Learning to Simultaneously Recognize and Localize Novel Concepts</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1803.06049" target="_blank" rel="noopener">https://arxiv.org/abs/1803.06049</a></li></ul><p><strong>Zero-Shot Object Detection by Hybrid Region Embedding</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1805.06157" target="_blank" rel="noopener">https://arxiv.org/abs/1805.06157</a></li></ul><h2 id="OSD（One-Shot-Object-Detection）"><a href="#OSD（One-Shot-Object-Detection）" class="headerlink" title="OSD（One-Shot Object Detection）"></a>OSD（One-Shot Object Detection）</h2><p><strong>Comparison Network for One-Shot Conditional Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1904.02317" target="_blank" rel="noopener">https://arxiv.org/abs/1904.02317</a></li></ul><p><strong>One-Shot Object Detection</strong></p><p>RepMet: Representative-based metric learning for classification and one-shot object detection</p><ul><li>intro: IBM Research AI</li><li>arxiv:<a href="https://arxiv.org/abs/1806.04728" target="_blank" rel="noopener">https://arxiv.org/abs/1806.04728</a></li><li>github: TODO</li></ul><h2 id="Weakly-Supervised-Object-Detection"><a href="#Weakly-Supervised-Object-Detection" class="headerlink" title="Weakly Supervised Object Detection"></a>Weakly Supervised Object Detection</h2><p><strong>Weakly Supervised Object Detection in Artworks</strong></p><ul><li>intro: ECCV 2018 Workshop Computer Vision for Art Analysis</li><li>arXiv: <a href="https://arxiv.org/abs/1810.02569" target="_blank" rel="noopener">https://arxiv.org/abs/1810.02569</a></li><li>Datasets: <a href="https://wsoda.telecom-paristech.fr/downloads/dataset/IconArt_v1.zip" target="_blank" rel="noopener">https://wsoda.telecom-paristech.fr/downloads/dataset/IconArt_v1.zip</a></li></ul><p><strong>Cross-Domain Weakly-Supervised Object Detection through Progressive Domain Adaptation</strong></p><ul><li>intro: CVPR 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1803.11365" target="_blank" rel="noopener">https://arxiv.org/abs/1803.11365</a></li><li>homepage: <a href="https://naoto0804.github.io/cross_domain_detection/" target="_blank" rel="noopener">https://naoto0804.github.io/cross_domain_detection/</a></li><li>paper: <a href="http://openaccess.thecvf.com/content_cvpr_2018/html/Inoue_Cross-Domain_Weakly-Supervised_Object_CVPR_2018_paper.html" target="_blank" rel="noopener">http://openaccess.thecvf.com/content_cvpr_2018/html/Inoue_Cross-Domain_Weakly-Supervised_Object_CVPR_2018_paper.html</a></li><li>github: <a href="https://github.com/naoto0804/cross-domain-detection" target="_blank" rel="noopener">https://github.com/naoto0804/cross-domain-detection</a></li></ul><h2 id="Softer-NMS"><a href="#Softer-NMS" class="headerlink" title="Softer-NMS"></a>Softer-NMS</h2><p><strong>《Softer-NMS: Rethinking Bounding Box Regression for Accurate Object Detection》</strong></p><ul><li>intro: CMU &amp; Face++</li><li>arXiv: <a href="https://arxiv.org/abs/1809.08545" target="_blank" rel="noopener">https://arxiv.org/abs/1809.08545</a></li><li>github: <a href="https://github.com/yihui-he/softer-NMS" target="_blank" rel="noopener">https://github.com/yihui-he/softer-NMS</a></li></ul><h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><p><strong>Feature Selective Anchor-Free Module for Single-Shot Object Detection</strong></p><ul><li><p>intro: CVPR 2019</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1903.00621" target="_blank" rel="noopener">https://arxiv.org/abs/1903.00621</a></p></li></ul><p><strong>Object Detection based on Region Decomposition and Assembly</strong></p><ul><li><p>intro: AAAI 2019</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1901.08225" target="_blank" rel="noopener">https://arxiv.org/abs/1901.08225</a></p></li></ul><p><strong>Bottom-up Object Detection by Grouping Extreme and Center Points</strong></p><ul><li>intro: one stage 43.2% on COCO test-dev</li><li>arXiv: <a href="https://arxiv.org/abs/1901.08043" target="_blank" rel="noopener">https://arxiv.org/abs/1901.08043</a></li><li>github: <a href="https://github.com/xingyizhou/ExtremeNet" target="_blank" rel="noopener">https://github.com/xingyizhou/ExtremeNet</a></li></ul><p><strong>ORSIm Detector: A Novel Object Detection Framework in Optical Remote Sensing Imagery Using Spatial-Frequency Channel Features</strong></p><ul><li><p>intro: IEEE TRANSACTIONS ON GEOSCIENCE AND REMOTE SENSING</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1901.07925" target="_blank" rel="noopener">https://arxiv.org/abs/1901.07925</a></p></li></ul><p><strong>Consistent Optimization for Single-Shot Object Detection</strong></p><ul><li><p>intro: improves RetinaNet from 39.1 AP to 40.1 AP on COCO datase</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1901.06563" target="_blank" rel="noopener">https://arxiv.org/abs/1901.06563</a></p></li></ul><p><strong>Learning Pairwise Relationship for Multi-object Detection in Crowded Scenes</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1901.03796" target="_blank" rel="noopener">https://arxiv.org/abs/1901.03796</a></li></ul><p><strong>RetinaMask: Learning to predict masks improves state-of-the-art single-shot detection for free</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1901.03353" target="_blank" rel="noopener">https://arxiv.org/abs/1901.03353</a></li><li>github: <a href="https://github.com/chengyangfu/retinamask" target="_blank" rel="noopener">https://github.com/chengyangfu/retinamask</a></li></ul><p><strong>Region Proposal by Guided Anchoring</strong></p><ul><li>intro: CUHK - SenseTime Joint Lab</li><li>arXiv: <a href="https://arxiv.org/abs/1901.03278" target="_blank" rel="noopener">https://arxiv.org/abs/1901.03278</a></li></ul><p><strong>Scale-Aware Trident Networks for Object Detection</strong></p><ul><li>intro: mAP of <strong>48.4</strong> on the COCO dataset</li><li>arXiv: <a href="https://arxiv.org/abs/1901.01892" target="_blank" rel="noopener">https://arxiv.org/abs/1901.01892</a></li></ul><h2 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h2><p><strong>Large-Scale Object Detection of Images from Network Cameras in Variable Ambient Lighting Conditions</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.11901" target="_blank" rel="noopener">https://arxiv.org/abs/1812.11901</a></li></ul><p><strong>Strong-Weak Distribution Alignment for Adaptive Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.04798" target="_blank" rel="noopener">https://arxiv.org/abs/1812.04798</a></li></ul><p><strong>AutoFocus: Efficient Multi-Scale Inference</strong></p><ul><li>intro: AutoFocus obtains an <strong>mAP of 47.9%</strong> (68.3% at 50% overlap) on the <strong>COCO test-dev</strong> set while processing <strong>6.4 images per second on a Titan X (Pascal) GPU</strong> </li><li>arXiv: <a href="https://arxiv.org/abs/1812.01600" target="_blank" rel="noopener">https://arxiv.org/abs/1812.01600</a></li></ul><p><strong>NOTE-RCNN: NOise Tolerant Ensemble RCNN for Semi-Supervised Object Detection</strong></p><ul><li>intro: Google Could</li><li>arXiv: <a href="https://arxiv.org/abs/1812.00124" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00124</a></li></ul><p><strong>SPLAT: Semantic Pixel-Level Adaptation Transforms for Detection</strong></p><ul><li>intro: UC Berkeley</li><li>arXiv: <a href="https://arxiv.org/abs/1812.00929" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00929</a></li></ul><p><strong>Grid R-CNN</strong></p><ul><li>intro: SenseTime</li><li>arXiv: <a href="https://arxiv.org/abs/1811.12030" target="_blank" rel="noopener">https://arxiv.org/abs/1811.12030</a></li></ul><p><strong>Deformable ConvNets v2: More Deformable, Better Results</strong></p><ul><li><p>intro: Microsoft Research Asia</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1811.11168" target="_blank" rel="noopener">https://arxiv.org/abs/1811.11168</a></p></li></ul><p><strong>Anchor Box Optimization for Object Detection</strong></p><ul><li>intro: Microsoft Research</li><li>arXiv: <a href="https://arxiv.org/abs/1812.00469" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00469</a></li></ul><p><strong>Efficient Coarse-to-Fine Non-Local Module for the Detection of Small Objects</strong></p><ul><li>intro: <a href="https://arxiv.org/abs/1811.12152" target="_blank" rel="noopener">https://arxiv.org/abs/1811.12152</a></li></ul><p><strong>NOTE-RCNN: NOise Tolerant Ensemble RCNN for Semi-Supervised Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.00124" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00124</a></li></ul><p><strong>Learning RoI Transformer for Detecting Oriented Objects in Aerial Images</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.00155" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00155</a></li></ul><p><strong>Integrated Object Detection and Tracking with Tracklet-Conditioned Detection</strong></p><ul><li>intro: Microsoft Research Asia</li><li>arXiv: <a href="https://arxiv.org/abs/1811.11167" target="_blank" rel="noopener">https://arxiv.org/abs/1811.11167</a></li></ul><p><strong>Deep Regionlets: Blended Representation and Deep Learning for Generic Object Detection</strong></p><ul><li><p>arXiv: <a href="https://arxiv.org/abs/1811.11318" target="_blank" rel="noopener">https://arxiv.org/abs/1811.11318</a></p><p><strong>Gradient Harmonized Single-stage Detector</strong></p></li><li><p>intro: AAAI 2019</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1811.05181" target="_blank" rel="noopener">https://arxiv.org/abs/1811.05181</a></p></li></ul><p><strong>CFENet: Object Detection with Comprehensive Feature Enhancement Module</strong></p><ul><li>intro: ACCV 2018</li><li>github: <a href="https://github.com/qijiezhao/CFENet" target="_blank" rel="noopener">https://github.com/qijiezhao/CFENet</a></li></ul><p><strong>DeRPN: Taking a further step toward more general object detection</strong></p><ul><li>intro: AAAI 2019</li><li>arXiv: <a href="https://arxiv.org/abs/1811.06700" target="_blank" rel="noopener">https://arxiv.org/abs/1811.06700</a></li><li>github: <a href="https://github.com/HCIILAB/DeRPN" target="_blank" rel="noopener">https://github.com/HCIILAB/DeRPN</a></li></ul><p><strong>Hybrid Knowledge Routed Modules for Large-scale Object Detection</strong></p><ul><li>intro: Sun Yat-Sen University &amp; Huawei Noah’s Ark Lab</li><li>arXiv: <a href="https://arxiv.org/abs/1810.12681" target="_blank" rel="noopener">https://arxiv.org/abs/1810.12681</a></li><li>github: <a href="https://github.com/chanyn/HKRM" target="_blank" rel="noopener">https://github.com/chanyn/HKRM</a></li></ul><p><strong>《Receptive Field Block Net for Accurate and Fast Object Detection》</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1711.07767" target="_blank" rel="noopener">https://arxiv.org/abs/1711.07767</a></li><li>github: <a href="https://github.com/ruinmessi/RFBNet" target="_blank" rel="noopener">https://github.com/ruinmessi/RFBNet</a></li></ul><p><strong>Deep Feature Pyramid Reconfiguration for Object Detection</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1808.07993" target="_blank" rel="noopener">https://arxiv.org/abs/1808.07993</a></li></ul><p><strong>Unsupervised Hard Example Mining from Videos for Improved Object Detection</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1808.04285" target="_blank" rel="noopener">https://arxiv.org/abs/1808.04285</a></li></ul><p><strong>Acquisition of Localization Confidence for Accurate Object Detection</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1807.11590" target="_blank" rel="noopener">https://arxiv.org/abs/1807.11590</a></li><li>github: <a href="https://github.com/vacancy/PreciseRoIPooling" target="_blank" rel="noopener">https://github.com/vacancy/PreciseRoIPooling</a></li></ul><p><strong>Toward Scale-Invariance and Position-Sensitive Region Proposal Networks</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1807.09528" target="_blank" rel="noopener">https://arxiv.org/abs/1807.09528</a></li></ul><p><strong>MetaAnchor: Learning to Detect Objects with Customized Anchors</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1807.00980" target="_blank" rel="noopener">https://arxiv.org/abs/1807.00980</a></li></ul><p><strong>Relation Network for Object Detection</strong></p><ul><li>intro: CVPR 2018</li><li>arxiv: <a href="https://arxiv.org/abs/1711.11575" target="_blank" rel="noopener">https://arxiv.org/abs/1711.11575</a></li><li>github:<a href="https://github.com/msracver/Relation-Networks-for-Object-Detection" target="_blank" rel="noopener">https://github.com/msracver/Relation-Networks-for-Object-Detection</a></li></ul><p><strong>Quantization Mimic: Towards Very Tiny CNN for Object Detection</strong></p><ul><li>Tsinghua University1 &amp; The Chinese University of Hong Kong2 &amp;SenseTime3</li><li>arxiv: <a href="https://arxiv.org/abs/1805.02152" target="_blank" rel="noopener">https://arxiv.org/abs/1805.02152</a></li></ul><p><strong>Learning Rich Features for Image Manipulation Detection</strong></p><ul><li>intro: CVPR 2018 Camera Ready</li><li>arxiv: <a href="https://arxiv.org/abs/1805.04953" target="_blank" rel="noopener">https://arxiv.org/abs/1805.04953</a></li></ul><p><strong>SNIPER: Efficient Multi-Scale Training</strong></p><ul><li>arxiv:<a href="https://arxiv.org/abs/1805.09300" target="_blank" rel="noopener">https://arxiv.org/abs/1805.09300</a></li><li>github:<a href="https://github.com/mahyarnajibi/SNIPER" target="_blank" rel="noopener">https://github.com/mahyarnajibi/SNIPER</a></li></ul><p><strong>Soft Sampling for Robust Object Detection</strong></p><ul><li>intro: the robustness of object detection under the presence of missing annotations</li><li>arxiv:<a href="https://arxiv.org/abs/1806.06986" target="_blank" rel="noopener">https://arxiv.org/abs/1806.06986</a></li></ul><p><strong>Cost-effective Object Detection: Active Sample Mining with Switchable Selection Criteria</strong></p><ul><li>intro: TNNLS 2018</li><li>arxiv:<a href="https://arxiv.org/abs/1807.00147" target="_blank" rel="noopener">https://arxiv.org/abs/1807.00147</a></li><li>code: <a href="http://kezewang.com/codes/ASM_ver1.zip" target="_blank" rel="noopener">http://kezewang.com/codes/ASM_ver1.zip</a></li></ul><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p><strong>R3-Net: A Deep Network for Multi-oriented Vehicle Detection in Aerial Images and Videos</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1808.05560" target="_blank" rel="noopener">https://arxiv.org/abs/1808.05560</a></li><li>youtube: <a href="https://youtu.be/xCYD-tYudN0" target="_blank" rel="noopener">https://youtu.be/xCYD-tYudN0</a></li></ul><h1 id="Detection-Toolbox"><a href="#Detection-Toolbox" class="headerlink" title="Detection Toolbox"></a>Detection Toolbox</h1><ul><li><p><a href="https://github.com/facebookresearch/Detectron" target="_blank" rel="noopener">Detectron(FAIR)</a>: Detectron is Facebook AI Research’s software system that implements state-of-the-art object detection algorithms, including <a href="https://arxiv.org/abs/1703.06870" target="_blank" rel="noopener">Mask R-CNN</a>. It is written in Python and powered by the <a href="https://github.com/caffe2/caffe2" target="_blank" rel="noopener">Caffe2</a> deep learning framework.</p></li><li><p><a href="https://github.com/facebookresearch/maskrcnn-benchmark" target="_blank" rel="noopener">maskrcnn-benchmark(FAIR)</a>: Fast, modular reference implementation of Instance Segmentation and Object Detection algorithms in PyTorch.</p></li><li><p><a href="https://github.com/open-mmlab/mmdetection" target="_blank" rel="noopener">mmdetection(SenseTime&amp;CUHK)</a>: mmdetection is an open source object detection toolbox based on PyTorch. It is a part of the open-mmlab project developed by <a href="http://mmlab.ie.cuhk.edu.hk/" target="_blank" rel="noopener">Multimedia Laboratory, CUHK</a>.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Object-Detection&quot;&gt;&lt;a href=&quot;#Object-Detection&quot; class=&quot;headerlink&quot; title=&quot;Object-Detection&quot;&gt;&lt;/a&gt;Object-Detection&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h5 id=&quot;记录关于object-detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转CVPR-Latest-paper-learning&quot;&gt;&lt;a href=&quot;#记录关于object-detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转CVPR-Latest-paper-learning&quot; class=&quot;headerlink&quot; title=&quot;记录关于object detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转CVPR(Latest paper learning).&quot;&gt;&lt;/a&gt;记录关于object detection的经典论文，针对论文结合开源代码进行论文复现，最新CVPR论文请转&lt;a href=&quot;https://github.com/facebookresearch/Detectron&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CVPR(Latest paper learning)&lt;/a&gt;.&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;R-CNN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fast R-CNN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Faster R-CNN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mask R-CNN&lt;/p&gt;
    
    </summary>
    
      <category term="Computer-Vision" scheme="https://kaaier.github.io/categories/Computer-Vision/"/>
    
    
      <category term="Object-Detection" scheme="https://kaaier.github.io/tags/Object-Detection/"/>
    
      <category term="Computer-Vision" scheme="https://kaaier.github.io/tags/Computer-Vision/"/>
    
  </entry>
  
  <entry>
    <title>数据结构及算法</title>
    <link href="https://kaaier.github.io/2019/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E7%AE%97%E6%B3%95/"/>
    <id>https://kaaier.github.io/2019/06/17/数据结构及算法/</id>
    <published>2019-06-17T01:21:20.000Z</published>
    <updated>2019-08-07T01:35:21.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构及算法"><a href="#数据结构及算法" class="headerlink" title="数据结构及算法"></a>数据结构及算法</h1><blockquote><p>Coding！！！！！！！</p></blockquote><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><table><thead><tr><th align="center">Chapter 1</th><th align="center">Chapter 2</th><th align="center">Chapter 3</th></tr></thead><tbody><tr><td align="center"><a href="https://github.com/linw7/Paper-Code" target="_blank" rel="noopener">纸上代码</a></td><td align="center"><a href="#dp">动态规划专项</a></td><td align="center"><a href="https://github.com/linw7/Skill-Tree/blob/master/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.md" target="_blank" rel="noopener">海量数据专项</a></td></tr></tbody></table><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构及算法&quot;&gt;&lt;a href=&quot;#数据结构及算法&quot; class=&quot;headerlink&quot; title=&quot;数据结构及算法&quot;&gt;&lt;/a&gt;数据结构及算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Coding！！！！！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;

      
    
    </summary>
    
      <category term="Data structures and algorithms" scheme="https://kaaier.github.io/categories/Data-structures-and-algorithms/"/>
    
    
      <category term="Data structures and algorithms" scheme="https://kaaier.github.io/tags/Data-structures-and-algorithms/"/>
    
  </entry>
  
  <entry>
    <title>C++中STL总结</title>
    <link href="https://kaaier.github.io/2019/06/17/STL/"/>
    <id>https://kaaier.github.io/2019/06/17/STL/</id>
    <published>2019-06-17T01:21:20.000Z</published>
    <updated>2019-08-06T16:08:25.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><ul><li>容器（containers）</li><li>算法（algorithms）</li><li>迭代器（iterators）</li><li>仿函数（functors）</li><li>配接器（adapters）</li><li>空间配置器（allocator）</li></ul><h2 id="容器（containers）"><a href="#容器（containers）" class="headerlink" title="容器（containers）"></a>容器（containers）</h2><ul><li>序列式容器（sequence containers）：元素都是可序（ordered），但未必是有序（sorted）</li><li>关联式容器（associattive containers）<a id="more"></a><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3></li></ul><p>array是固定大小的顺序容器，它们保存了一个以严格的线性顺序排列的特定数量的元素。</p><p>在内部，一个数组除了它所包含的元素（甚至不是它的大小，它是一个模板参数，在编译时是固定的）以外不保存任何数据。存储大小与用语言括号语法（[]）声明的普通数组一样高效。这个类只是增加了一层成员函数和全局函数，所以数组可以作为标准容器使用。</p><p>与其他标准容器不同，数组具有固定的大小，并且不通过分配器管理其元素的分配：它们是封装固定大小数组元素的聚合类型。因此，他们不能动态地扩大或缩小。</p><p>零大小的数组是有效的，但是它们不应该被解除引用（成员的前面，后面和数据）。</p><p>与标准库中的其他容器不同，交换两个数组容器是一种线性操作，它涉及单独交换范围内的所有元素，这通常是相当低效的操作。另一方面，这允许迭代器在两个容器中的元素保持其原始容器关联。</p><p>数组容器的另一个独特特性是它们可以被当作元组对象来处理：array头部重载get函数来访问数组元素，就像它是一个元组，以及专门的tuple_size和tuple_element类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">size_t</span> <span class="title">N</span> &gt; <span class="title">class</span> <span class="title">array</span>;</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20160405225541788" alt></p><h4 id="array-begin"><a href="#array-begin" class="headerlink" title="array::begin"></a>array::begin</h4><p>返回指向数组容器中第一个元素的迭代器。</p><p><img src="https://i.stack.imgur.com/oa3EQ.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>, 5&gt; myarray = &#123;<span class="number">2</span>, <span class="number">16</span>, <span class="number">77</span>,<span class="number">34</span>, <span class="number">50</span>&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains:"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = myarray.begin(); it != myarray.end(); ++i)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 2 16 77 34 50</span><br></pre></td></tr></table></figure><h4 id="array-end"><a href="#array-end" class="headerlink" title="array::end"></a>array::end</h4><p>返回指向数组容器中最后一个元素之后的理论元素的迭代器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; myarray = &#123; <span class="number">5</span>, <span class="number">19</span>, <span class="number">77</span>, <span class="number">34</span>, <span class="number">99</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains:"</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> it = myarray.begin(); it != myarray.end(); ++it )</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 5 19 77 34 99</span><br></pre></td></tr></table></figure><h4 id="array-rbegin"><a href="#array-rbegin" class="headerlink" title="array::rbegin"></a>array::rbegin</h4><p>返回指向数组容器中最后一个元素的反向迭代器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      reverse_iterator rbegin（）<span class="keyword">noexcept</span>;</span><br><span class="line">const_reverse_iterator rbegin（）<span class="keyword">const</span> <span class="keyword">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,4&gt; myarray = &#123;<span class="number">4</span>, <span class="number">26</span>, <span class="number">80</span>, <span class="number">14</span>&#125; ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> rit = myarray.rbegin(); rit &lt; myarray.rend(); ++rit)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *rit;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 14 80 26 4</span><br></pre></td></tr></table></figure><h4 id="array-rend"><a href="#array-rend" class="headerlink" title="array::rend"></a>array::rend</h4><p>返回一个反向迭代器，指向数组中第一个元素之前的理论元素（这被认为是它的反向结束）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">reverse_iterator <span class="title">rend</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function">const_reverse_iterator <span class="title">rend</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,4&gt; myarray = &#123;<span class="number">4</span>, <span class="number">26</span>, <span class="number">80</span>, <span class="number">14</span>&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> rit = myarray.rbegin(); rit &lt; myarray.rend(); ++rit)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *rit;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 14 80 26 4</span><br></pre></td></tr></table></figure><h4 id="array-cbegin"><a href="#array-cbegin" class="headerlink" title="array::cbegin"></a>array::cbegin</h4><p>返回指向数组容器中第一个元素的常量迭代器（const_iterator）；这个迭代器可以增加和减少，但是不能用来修改它指向的内容。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const_iterator cbegin（）<span class="keyword">const</span> <span class="keyword">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; myarray = &#123;<span class="number">2</span>, <span class="number">16</span>, <span class="number">77</span>, <span class="number">34</span>, <span class="number">50</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> it = myarray.cbegin(); it != myarray.cend(); ++it )</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;   <span class="comment">// cannot modify *it</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 2 16 77 34 50</span><br></pre></td></tr></table></figure><h4 id="array-cend"><a href="#array-cend" class="headerlink" title="array::cend"></a>array::cend</h4><p>返回指向数组容器中最后一个元素之后的理论元素的常量迭代器（const_iterator）。这个迭代器可以增加和减少，但是不能用来修改它指向的内容。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">const_iterator <span class="title">cend</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; myarray = &#123; <span class="number">15</span>, <span class="number">720</span>, <span class="number">801</span>, <span class="number">1002</span>, <span class="number">3502</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains:"</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> it = myarray.cbegin(); it != myarray.cend(); ++it )</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;   <span class="comment">// cannot modify *it</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 2 16 77 34 50</span><br></pre></td></tr></table></figure><h4 id="array-crbegin"><a href="#array-crbegin" class="headerlink" title="array::crbegin"></a>array::crbegin</h4><p>返回指向数组容器中最后一个元素的常量反向迭代器（const_reverse_iterator）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const_reverse_iterator crbegin（）<span class="keyword">const</span> <span class="keyword">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,6&gt; myarray = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>&#125; ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray backwards:"</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> rit=myarray.crbegin() ; rit &lt; myarray.crend(); ++rit )</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *rit;   <span class="comment">// cannot modify *rit</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray backwards: 60 50 40 30 20 10</span><br></pre></td></tr></table></figure><h4 id="array-crend"><a href="#array-crend" class="headerlink" title="array::crend"></a>array::crend</h4><p>返回指向数组中第一个元素之前的理论元素的常量反向迭代器（const_reverse_iterator），它被认为是其反向结束。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">const_reverse_iterator <span class="title">crend</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,6&gt; myarray = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>&#125; ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray backwards:"</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> rit=myarray.crbegin() ; rit &lt; myarray.crend(); ++rit )</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *rit;   <span class="comment">// cannot modify *rit</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray backwards: 60 50 40 30 20 10</span><br></pre></td></tr></table></figure><h4 id="array-size"><a href="#array-size" class="headerlink" title="array::size"></a>array::size</h4><p>返回数组容器中元素的数量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> size_type size（）<span class="keyword">noexcept</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; myints;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"size of myints:"</span> &lt;&lt; myints.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof(myints):"</span> &lt;&lt; <span class="keyword">sizeof</span>(myints) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Possible Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size of myints: 5</span><br><span class="line">sizeof(myints): 20</span><br></pre></td></tr></table></figure><h4 id="array-max-size"><a href="#array-max-size" class="headerlink" title="array::max_size"></a>array::max_size</h4><p>返回数组容器可容纳的最大元素数。数组对象的max_size与其size一样，始终等于用于实例化数组模板类的第二个模板参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">max_size</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,10&gt; myints;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"size of myints: "</span> &lt;&lt; myints.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"max_size of myints: "</span> &lt;&lt; myints.max_size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size of myints: 10</span><br><span class="line">max_size of myints: 10</span><br></pre></td></tr></table></figure><h4 id="array-empty"><a href="#array-empty" class="headerlink" title="array::empty"></a>array::empty</h4><p>返回一个布尔值，指示数组容器是否为空，即它的size()是否为0。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,0&gt; first;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; second;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"first "</span> &lt;&lt; (first.empty() ? <span class="string">"is empty"</span> : <span class="string">"is not empty"</span>) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"second "</span> &lt;&lt; (second.empty() ? <span class="string">"is empty"</span> : <span class="string">"is not empty"</span>) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first is empty</span><br><span class="line">second is not empt</span><br></pre></td></tr></table></figure><h4 id="array-operator"><a href="#array-operator" class="headerlink" title="array::operator[]"></a>array::operator[]</h4><p>返回数组中第n个位置的元素的引用。与array::at相似，但array::at会检查数组边界并通过抛出一个out_of_range异常来判断n是否超出范围，而array::operator[]不检查边界。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      reference <span class="keyword">operator</span>[] (size_type n);</span><br><span class="line">const_reference <span class="keyword">operator</span>[] (size_type n) <span class="keyword">const</span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,10&gt; myarray;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assign some values:</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">        myarray[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print content</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains:"</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; myarray[i];</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><h4 id="array-at"><a href="#array-at" class="headerlink" title="array::at"></a>array::at</h4><p>返回数组中第n个位置的元素的引用。与array::operator[]相似，但array::at会检查数组边界并通过抛出一个out_of_range异常来判断n是否超出范围，而array::operator[]不检查边界。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">reference <span class="title">at</span> <span class="params">( size_type n )</span></span>;</span><br><span class="line"><span class="function">const_reference <span class="title">at</span> <span class="params">( size_type n )</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>, 10&gt; myarray;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// assign some values:</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">myarray[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// print content</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains:"</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; myarray.at(i);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><h4 id="array-front"><a href="#array-front" class="headerlink" title="array::front"></a>array::front</h4><p>返回对数组容器中第一个元素的引用。array::begin返回的是迭代器，array::front返回的是直接引用。<br>在空容器上调用此函数会导致未定义的行为。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">reference <span class="title">front</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">const_reference <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,3&gt; myarray = &#123;<span class="number">2</span>, <span class="number">16</span>, <span class="number">77</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"front is: "</span> &lt;&lt; myarray.front() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;   <span class="comment">// 2</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"back is: "</span> &lt;&lt; myarray.back() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;     <span class="comment">// 77</span></span><br><span class="line"></span><br><span class="line">  myarray.front() = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray now contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">int</span>&amp; x : myarray ) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">front is: 2</span><br><span class="line">back is: 77</span><br><span class="line">myarray now contains: 100 16 77</span><br></pre></td></tr></table></figure><h4 id="array-back"><a href="#array-back" class="headerlink" title="array::back"></a>array::back</h4><p>返回对数组容器中最后一个元素的引用。array::end返回的是迭代器，array::back返回的是直接引用。<br>在空容器上调用此函数会导致未定义的行为。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">reference <span class="title">back</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">const_reference <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,3&gt; myarray = &#123;<span class="number">5</span>, <span class="number">19</span>, <span class="number">77</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"front is: "</span> &lt;&lt; myarray.front() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;   <span class="comment">// 5</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"back is: "</span> &lt;&lt; myarray.back() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;     <span class="comment">// 77</span></span><br><span class="line"></span><br><span class="line">  myarray.back() = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray now contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">int</span>&amp; x : myarray ) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">front is: 5</span><br><span class="line">back is: 77</span><br><span class="line">myarray now contains: 5 19 50</span><br></pre></td></tr></table></figure><h4 id="array-data"><a href="#array-data" class="headerlink" title="array::data"></a>array::data</h4><p>返回指向数组对象中第一个元素的指针。</p><p>由于数组中的元素存储在连续的存储位置，所以检索到的指针可以偏移以访问数组中的任何元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">value_type* <span class="title">data</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> value_type* <span class="title">data</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* cstr = <span class="string">"Test string"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">char</span>,12&gt; charray;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">memcpy</span> (charray.data(),cstr,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; charray.data() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test string</span><br></pre></td></tr></table></figure><h4 id="array-fill"><a href="#array-fill" class="headerlink" title="array::fill"></a>array::fill</h4><p>用val填充数组所有元素，将val设置为数组对象中所有元素的值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span> <span class="params">(<span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,6&gt; myarray;</span><br><span class="line"></span><br><span class="line">  myarray.fill(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myarray contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">int</span>&amp; x : myarray) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarray contains: 5 5 5 5 5 5</span><br></pre></td></tr></table></figure><h4 id="array-swap"><a href="#array-swap" class="headerlink" title="array::swap"></a>array::swap</h4><p>通过x的内容交换数组的内容，这是另一个相同类型的数组对象（包括相同的大小）。</p><p>与其他容器的交换成员函数不同，此成员函数通过在各个元素之间执行与其大小相同的单独交换操作，以线性时间运行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span> <span class="params">(<span class="built_in">array</span>&amp; x)</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(swap(declval&lt;value_type&amp;&gt;(),declval&lt;value_type&amp;&gt;())))</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; first = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; second = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line"></span><br><span class="line">  first.swap (second);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"first:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x : first) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"second:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x : second) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first: 11 22 33 44 55</span><br><span class="line">second: 10 20 30 40 50</span><br></pre></td></tr></table></figure><h4 id="get（array）"><a href="#get（array）" class="headerlink" title="get（array）"></a>get（array）</h4><p>形如：std::get&lt;0&gt;(myarray)；传入一个数组容器，返回指定位置元素的引用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">size_t</span> I，<span class="class"><span class="keyword">class</span> <span class="title">T</span>，<span class="title">size_t</span> <span class="title">N</span>&gt; <span class="title">T</span>＆<span class="title">get</span>（<span class="title">array</span> &lt;T，N&gt;＆<span class="title">arr</span>）<span class="title">noexcept</span>;</span> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">size_t</span> I，<span class="class"><span class="keyword">class</span> <span class="title">T</span>，<span class="title">size_t</span> <span class="title">N</span>&gt; <span class="title">T</span> &amp;&amp; <span class="title">get</span>（<span class="title">array</span> &lt;T，N&gt; &amp;&amp; <span class="title">arr</span>）<span class="title">noexcept</span>;</span> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">size_t</span> I，<span class="class"><span class="keyword">class</span> <span class="title">T</span>，<span class="title">size_t</span> <span class="title">N</span>&gt; <span class="title">const</span> <span class="title">T</span>＆<span class="title">get</span>（<span class="title">const</span> <span class="title">array</span> &lt;T，N&gt;＆<span class="title">arr</span>）<span class="title">noexcept</span>;</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,3&gt; myarray = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mytuple (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::tuple_element&lt;<span class="number">0</span>,<span class="keyword">decltype</span>(myarray)&gt;::type myelement;  <span class="comment">// int myelement</span></span><br><span class="line"></span><br><span class="line">  myelement = <span class="built_in">std</span>::get&lt;<span class="number">2</span>&gt;(myarray);</span><br><span class="line">  <span class="built_in">std</span>::get&lt;<span class="number">2</span>&gt;(myarray) = <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(myarray);</span><br><span class="line">  <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(myarray) = myelement;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"first element in myarray: "</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(myarray) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"first element in mytuple: "</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(mytuple) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first element in myarray: 30</span><br><span class="line">first element in mytuple: 10</span><br></pre></td></tr></table></figure><h4 id="relational-operators-array"><a href="#relational-operators-array" class="headerlink" title="relational operators (array)"></a>relational operators (array)</h4><p>形如：arrayA != arrayB、arrayA &gt; arrayB；依此比较数组每个元素的大小关系。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>，<span class="title">size_T</span> <span class="title">N</span>&gt; </span></span><br><span class="line"><span class="class">  <span class="title">bool</span> <span class="title">operator</span> ==（<span class="title">const</span> <span class="title">array</span> &lt;T，N&gt;＆<span class="title">lhs</span>，<span class="title">const</span> <span class="title">array</span> &lt;T，N&gt;＆<span class="title">rhs</span>）;</span></span><br><span class="line">（<span class="number">2</span>）</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>，<span class="title">size_T</span> <span class="title">N</span>&gt; </span></span><br><span class="line"><span class="class">  <span class="title">bool</span> <span class="title">operator</span>！=（<span class="title">const</span> <span class="title">array</span> &lt;T，N&gt;＆<span class="title">lhs</span>，<span class="title">const</span> <span class="title">array</span> &lt;T，N&gt;＆<span class="title">rhs</span>）;</span></span><br><span class="line">（<span class="number">3</span>）</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>，<span class="title">size_T</span> <span class="title">N</span>&gt; </span></span><br><span class="line"><span class="class">  <span class="title">bool</span> <span class="title">operator</span> &lt;（const array &lt;T，N&gt;＆lhs，const array &lt;T，N&gt;＆rhs）;</span></span><br><span class="line"><span class="class">（4）</span></span><br><span class="line"><span class="class">template &lt;class T，size_T N&gt; </span></span><br><span class="line"><span class="class">  bool operator &lt;=（const array &lt;T，N&gt;＆lhs，const array &lt;T，N&gt;＆rhs）;</span></span><br><span class="line"><span class="class">（5）</span></span><br><span class="line"><span class="class">template &lt;class T，size_T N&gt; </span></span><br><span class="line"><span class="class">  bool operator&gt;（const array &lt;T，N&gt;＆lhs，const array &lt;T，N&gt;＆rhs）;</span></span><br><span class="line"><span class="class">（6）</span></span><br><span class="line"><span class="class">template &lt;class T，size_T N&gt; </span></span><br><span class="line"><span class="class">  bool operator&gt; =（<span class="title">const</span> <span class="title">array</span> &lt;T，N&gt;＆<span class="title">lhs</span>，<span class="title">const</span> <span class="title">array</span> &lt;T，N&gt;＆<span class="title">rhs</span>）;</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; a = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; b = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; c = &#123;<span class="number">50</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (a==b) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a and b are equal\n"</span>;</span><br><span class="line">  <span class="keyword">if</span> (b!=c) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"b and c are not equal\n"</span>;</span><br><span class="line">  <span class="keyword">if</span> (b&lt;c) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"b is less than c\n"</span>;</span><br><span class="line">  <span class="keyword">if</span> (c&gt;b) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"c is greater than b\n"</span>;</span><br><span class="line">  <span class="keyword">if</span> (a&lt;=b) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a is less than or equal to b\n"</span>;</span><br><span class="line">  <span class="keyword">if</span> (a&gt;=b) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a is greater than or equal to b\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a and b are equal</span><br><span class="line">b and c are not equal</span><br><span class="line">b is less than c</span><br><span class="line">c is greater than b</span><br><span class="line">a is less than or equal to b</span><br><span class="line">a is greater than or equal to b</span><br></pre></td></tr></table></figure><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>vector是表示可以改变大小的数组的序列容器。</p><p>就像数组一样，vector为它们的元素使用连续的存储位置，这意味着它们的元素也可以使用到其元素的常规指针上的偏移来访问，而且和数组一样高效。但是与数组不同的是，它们的大小可以动态地改变，它们的存储由容器自动处理。</p><p>在内部，vector使用一个动态分配的数组来存储它们的元素。这个数组可能需要重新分配，以便在插入新元素时增加大小，这意味着分配一个新数组并将所有元素移动到其中。就处理时间而言，这是一个相对昂贵的任务，因此每次将元素添加到容器时矢量都不会重新分配。</p><p>相反，vector容器可以分配一些额外的存储以适应可能的增长，并且因此容器可以具有比严格需要包含其元素（即，其大小）的存储更大的实际容量。库可以实现不同的策略的增长到内存使用和重新分配之间的平衡，但在任何情况下，再分配应仅在对数生长的间隔发生尺寸，使得在所述载体的末端各个元件的插入可以与提供分期常量时间复杂性。</p><p>因此，与数组相比，载体消耗更多的内存来交换管理存储和以有效方式动态增长的能力。</p><p>与其他动态序列容器（deques，lists和 forward_lists ）相比，vector非常有效地访问其元素（就像数组一样），并相对有效地从元素末尾添加或移除元素。对于涉及插入或移除除了结尾之外的位置的元素的操作，它们执行比其他位置更差的操作，并且具有比列表和 forward_lists 更不一致的迭代器和引用。</p><p>针对 vector 的各种常见操作的复杂度（效率）如下： </p><ul><li>随机访问 - 常数 O(1) </li><li>在尾部增删元素 - 平摊（amortized）常数 O(1)}} </li><li>增删元素 - 至 vector 尾部的线性距离 O(n)}}</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">allocator</span>&lt;T&gt; &gt; <span class="title">class</span> <span class="title">vector</span>;</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20160406151211233" alt></p><h4 id="vector-vector"><a href="#vector-vector" class="headerlink" title="vector::vector"></a>vector::vector</h4><p>（1）empty容器构造函数（默认构造函数）<br>构造一个空的容器，没有元素。<br>（2）fill构造函数<br>用n个元素构造一个容器。每个元素都是val的副本（如果提供）。<br>（3）范围（range）构造器<br>使用与[ range，first，last]范围内的元素相同的顺序构造一个容器，其中的每个元素都是emplace -从该范围内相应的元素构造而成。<br>（4）复制（copy）构造函数（并用分配器复制）<br>按照相同的顺序构造一个包含x中每个元素的副本的容器。<br>（5）移动（move）构造函数（和分配器移动）<br>构造一个获取x元素的容器。<br>如果指定了alloc并且与x的分配器不同，那么元素将被移动。否则，没有构建元素（他们的所有权直接转移）。<br>x保持未指定但有效的状态。<br>（6）初始化列表构造函数<br>构造一个容器中的每个元件中的一个拷贝的IL，以相同的顺序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> (<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">vector</span> <span class="params">(<span class="keyword">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class="line">fill (<span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">vector</span> <span class="params">(size_type n)</span></span>;</span><br><span class="line">         <span class="built_in">vector</span> (size_type n, <span class="keyword">const</span> value_type&amp; val,</span><br><span class="line">                 <span class="keyword">const</span> allocator_type&amp; alloc = allocator_type());</span><br><span class="line">range (<span class="number">3</span>)</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">vector</span> (<span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>,</span></span><br><span class="line"><span class="class">          <span class="title">const</span> <span class="title">allocator_type</span>&amp; <span class="title">alloc</span> = <span class="title">allocator_type</span>());</span></span><br><span class="line">copy (<span class="number">4</span>)</span><br><span class="line"><span class="built_in">vector</span> (<span class="keyword">const</span> <span class="built_in">vector</span>&amp; x);</span><br><span class="line"><span class="built_in">vector</span> (<span class="keyword">const</span> <span class="built_in">vector</span>&amp; x, <span class="keyword">const</span> allocator_type&amp; alloc);</span><br><span class="line">move (<span class="number">5</span>)</span><br><span class="line"><span class="built_in">vector</span> (<span class="built_in">vector</span>&amp;&amp; x);</span><br><span class="line"><span class="built_in">vector</span> (<span class="built_in">vector</span>&amp;&amp; x, <span class="keyword">const</span> allocator_type&amp; alloc);</span><br><span class="line"><span class="function">initializer <span class="title">list</span> <span class="params">(<span class="number">6</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">vector</span> <span class="params">(<span class="built_in">initializer_list</span>&lt;value_type&gt; il,</span></span></span><br><span class="line"><span class="function"><span class="params">       <span class="keyword">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// constructors used in the same order as described above:</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; first;             <span class="comment">// empty vector of ints</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; second(<span class="number">4</span>, <span class="number">100</span>);    <span class="comment">// four ints with value 100</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; third(second.begin(), second.end());<span class="comment">// iterating through second</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fourth(third);     <span class="comment">// a copy of third</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// the iterator constructor can also be used to construct from arrays:</span></span><br><span class="line">    <span class="keyword">int</span> myints[] = &#123;<span class="number">16</span>,<span class="number">2</span>,<span class="number">77</span>,<span class="number">29</span>&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fifth(myints, myints + <span class="keyword">sizeof</span>(myints) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The contents of fifth are:"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = fifth.begin(); it != fifth.end(); ++it)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The contents of fifth are: 16 2 77 29</span><br></pre></td></tr></table></figure><h4 id="vector-vector-1"><a href="#vector-vector-1" class="headerlink" title="vector::~vector"></a>vector::~vector</h4><p>销毁容器对象。这将在每个包含的元素上调用allocator_traits::destroy，并使用其分配器释放由矢量分配的所有存储容量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="built_in">vector</span>();</span><br></pre></td></tr></table></figure><h4 id="vector-operator"><a href="#vector-operator" class="headerlink" title="vector::operator="></a>vector::operator=</h4><p>将新内容分配给容器，替换其当前内容，并相应地修改其大小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">copy (<span class="number">1</span>)</span><br><span class="line"><span class="built_in">vector</span>&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> <span class="built_in">vector</span>&amp; x);</span><br><span class="line">move (<span class="number">2</span>)</span><br><span class="line"><span class="built_in">vector</span>&amp; <span class="keyword">operator</span>= (<span class="built_in">vector</span>&amp;&amp; x);</span><br><span class="line"><span class="function">initializer <span class="title">list</span> <span class="params">(<span class="number">3</span>)</span></span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&amp; <span class="keyword">operator</span></span>= (<span class="built_in">initializer_list</span>&lt;value_type&gt; il);</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">  std::vector&lt;int&gt; foo (3,0);</span><br><span class="line">  std::vector&lt;int&gt; bar (5,0);</span><br><span class="line"></span><br><span class="line">  bar = foo;</span><br><span class="line">  foo = std::vector&lt;int&gt;();</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; &quot;Size of foo: &quot; &lt;&lt; int(foo.size()) &lt;&lt; &apos;\n&apos;;</span><br><span class="line">  std::cout &lt;&lt; &quot;Size of bar: &quot; &lt;&lt; int(bar.size()) &lt;&lt; &apos;\n&apos;;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Size of foo: 0</span><br><span class="line">Size of bar: 3</span><br></pre></td></tr></table></figure><h4 id="vector-begin"><a href="#vector-begin" class="headerlink" title="vector::begin"></a>vector::begin</h4><h4 id="vector-end"><a href="#vector-end" class="headerlink" title="vector::end"></a>vector::end</h4><h4 id="vector-rbegin"><a href="#vector-rbegin" class="headerlink" title="vector::rbegin"></a>vector::rbegin</h4><h4 id="vector-rend"><a href="#vector-rend" class="headerlink" title="vector::rend"></a>vector::rend</h4><h4 id="vector-cbegin"><a href="#vector-cbegin" class="headerlink" title="vector::cbegin"></a>vector::cbegin</h4><h4 id="vector-cend"><a href="#vector-cend" class="headerlink" title="vector::cend"></a>vector::cend</h4><h4 id="vector-rcbegin"><a href="#vector-rcbegin" class="headerlink" title="vector::rcbegin"></a>vector::rcbegin</h4><h4 id="vector-rcend"><a href="#vector-rcend" class="headerlink" title="vector::rcend"></a>vector::rcend</h4><h4 id="vector-size"><a href="#vector-size" class="headerlink" title="vector::size"></a>vector::size</h4><p>返回vector中元素的数量。</p><p>这是vector中保存的实际对象的数量，不一定等于其存储容量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myints;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"0. size: "</span> &lt;&lt; myints.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) myints.push_back(i);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1. size: "</span> &lt;&lt; myints.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  myints.insert (myints.end(),<span class="number">10</span>,<span class="number">100</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2. size: "</span> &lt;&lt; myints.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  myints.pop_back();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"3. size: "</span> &lt;&lt; myints.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0. size: 0</span><br><span class="line">1. size: 10</span><br><span class="line">2. size: 20</span><br><span class="line">3. size: 19</span><br></pre></td></tr></table></figure><h4 id="vector-max-size"><a href="#vector-max-size" class="headerlink" title="vector::max_size"></a>vector::max_size</h4><p>返回该vector可容纳的元素的最大数量。由于已知的系统或库实现限制，</p><p>这是容器可以达到的最大潜在大小，但容器无法保证能够达到该大小：在达到该大小之前的任何时间，仍然无法分配存储。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">max_size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set some content in the vector:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) myvector.push_back(i);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"size: "</span> &lt;&lt; myvector.size() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"capacity: "</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"max_size: "</span> &lt;&lt; myvector.max_size() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A possible output for this program could be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">size: 100</span><br><span class="line">capacity: 128</span><br><span class="line">max_size: 1073741823</span><br></pre></td></tr></table></figure><h4 id="vector-resize"><a href="#vector-resize" class="headerlink" title="vector::resize"></a>vector::resize</h4><p>调整容器的大小，使其包含n个元素。</p><p>如果n小于当前的容器size，内容将被缩小到前n个元素，将其删除（并销毁它们）。</p><p>如果n大于当前容器size，则通过在末尾插入尽可能多的元素以达到大小n来扩展内容。如果指定了val，则新元素将初始化为val的副本，否则将进行值初始化。</p><p>如果n也大于当前的容器的capacity（容量），分配的存储空间将自动重新分配。</p><p>注意这个函数通过插入或者删除元素的内容来改变容器的实际内容。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span> <span class="params">(size_type n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span> <span class="params">(size_type n, <span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set some initial content:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++) myvector.push_back(i);</span><br><span class="line"></span><br><span class="line">  myvector.resize(<span class="number">5</span>);</span><br><span class="line">  myvector.resize(<span class="number">8</span>,<span class="number">100</span>);</span><br><span class="line">  myvector.resize(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myvector contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;myvector.size();i++)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; myvector[i];</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0</span><br></pre></td></tr></table></figure><h4 id="vector-capacity"><a href="#vector-capacity" class="headerlink" title="vector::capacity"></a>vector::capacity</h4><p>返回当前为vector分配的存储空间的大小，用元素表示。这个capacity(容量)不一定等于vector的size。它可以相等或更大，额外的空间允许适应增长，而不需要重新分配每个插入。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">capacity</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set some content in the vector:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) myvector.push_back(i);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"size: "</span> &lt;&lt; (<span class="keyword">int</span>) myvector.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"capacity: "</span> &lt;&lt; (<span class="keyword">int</span>) myvector.capacity() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"max_size: "</span> &lt;&lt; (<span class="keyword">int</span>) myvector.max_size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A possible output for this program could be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">size: 100</span><br><span class="line">capacity: 128</span><br><span class="line">max_size: 1073741823</span><br></pre></td></tr></table></figure><h4 id="vector-empty"><a href="#vector-empty" class="headerlink" title="vector::empty"></a>vector::empty</h4><p>返回vector是否为空（即，它的size是否为0）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">sum</span> <span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++) myvector.push_back(i);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!myvector.empty())</span><br><span class="line">  &#123;</span><br><span class="line">     sum += myvector.back();</span><br><span class="line">     myvector.pop_back();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"total: "</span> &lt;&lt; sum &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total: 55</span><br></pre></td></tr></table></figure><h4 id="vector-reserve"><a href="#vector-reserve" class="headerlink" title="vector::reserve"></a>vector::reserve</h4><p>请求vector容量至少足以包含n个元素。</p><p>如果n大于当前vector容量，则该函数使容器重新分配其存储容量，从而将其容量增加到n（或更大）。</p><p>在所有其他情况下，函数调用不会导致重新分配，并且vector容量不受影响。</p><p>这个函数对vector大小没有影响，也不能改变它的元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reserve</span> <span class="params">(size_type n)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type sz;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; foo;</span><br><span class="line">  sz = foo.capacity();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"making foo grow:\n"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; ++i) &#123;</span><br><span class="line">    foo.push_back(i);</span><br><span class="line">    <span class="keyword">if</span> (sz!=foo.capacity()) &#123;</span><br><span class="line">      sz = foo.capacity();</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"capacity changed: "</span> &lt;&lt; sz &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bar;</span><br><span class="line">  sz = bar.capacity();</span><br><span class="line">  bar.reserve(<span class="number">100</span>);   <span class="comment">// this is the only difference with foo above</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"making bar grow:\n"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; ++i) &#123;</span><br><span class="line">    bar.push_back(i);</span><br><span class="line">    <span class="keyword">if</span> (sz!=bar.capacity()) &#123;</span><br><span class="line">      sz = bar.capacity();</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"capacity changed: "</span> &lt;&lt; sz &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Possible output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">making foo grow:</span><br><span class="line">capacity changed: 1</span><br><span class="line">capacity changed: 2</span><br><span class="line">capacity changed: 4</span><br><span class="line">capacity changed: 8</span><br><span class="line">capacity changed: 16</span><br><span class="line">capacity changed: 32</span><br><span class="line">capacity changed: 64</span><br><span class="line">capacity changed: 128</span><br><span class="line">making bar grow:</span><br><span class="line">capacity changed: 100</span><br></pre></td></tr></table></figure><h4 id="vector-shrink-to-fit"><a href="#vector-shrink-to-fit" class="headerlink" title="vector::shrink_to_fit"></a>vector::shrink_to_fit</h4><p>要求容器减小其capacity(容量)以适应其尺寸。</p><p>该请求是非绑定的，并且容器实现可以自由地进行优化，并且保持capacity大于其size的vector。 这可能导致重新分配，但对矢量大小没有影响，并且不能改变其元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shrink_to_fit</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector (<span class="number">100</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1. capacity of myvector: "</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  myvector.resize(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2. capacity of myvector: "</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  myvector.shrink_to_fit();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"3. capacity of myvector: "</span> &lt;&lt; myvector.capacity() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Possible output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. capacity of myvector: 100</span><br><span class="line">2. capacity of myvector: 100</span><br><span class="line">3. capacity of myvector: 10</span><br></pre></td></tr></table></figure><h4 id="vector-operator-1"><a href="#vector-operator-1" class="headerlink" title="vector::operator[]"></a>vector::operator[]</h4><h4 id="vector-at"><a href="#vector-at" class="headerlink" title="vector::at"></a>vector::at</h4><h4 id="vector-front"><a href="#vector-front" class="headerlink" title="vector::front"></a>vector::front</h4><h4 id="vector-back"><a href="#vector-back" class="headerlink" title="vector::back"></a>vector::back</h4><h4 id="vector-data"><a href="#vector-data" class="headerlink" title="vector::data"></a>vector::data</h4><h4 id="vector-assign"><a href="#vector-assign" class="headerlink" title="vector::assign"></a>vector::assign</h4><p>将新内容分配给vector，替换其当前内容，并相应地修改其大小。</p><p>在范围版本（1）中，新内容是从第一个和最后一个范围内的每个元素按相同顺序构造的元素。</p><p>在填充版本（2）中，新内容是n个元素，每个元素都被初始化为一个val的副本。</p><p>在初始化列表版本（3）中，新内容是以相同顺序作为初始化列表传递的值的副本。</p><p>所述内部分配器被用于（通过其性状），以分配和解除分配存储器如果重新分配发生。它也习惯于摧毁所有现有的元素，并构建新的元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">range (<span class="number">1</span>)</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">assign</span> (<span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>);</span></span><br><span class="line">fill (<span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span> <span class="params">(size_type n, <span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br><span class="line"><span class="function">initializer <span class="title">list</span> <span class="params">(<span class="number">3</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span> <span class="params">(<span class="built_in">initializer_list</span>&lt;value_type&gt; il)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; first;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; second;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; third;</span><br><span class="line"></span><br><span class="line">  first.assign (<span class="number">7</span>,<span class="number">100</span>);             <span class="comment">// 7 ints with a value of 100</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">  it=first.begin()+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  second.assign (it,first.end()<span class="number">-1</span>); <span class="comment">// the 5 central values of first</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> myints[] = &#123;<span class="number">1776</span>,<span class="number">7</span>,<span class="number">4</span>&#125;;</span><br><span class="line">  third.assign (myints,myints+<span class="number">3</span>);   <span class="comment">// assigning from array.</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Size of first: "</span> &lt;&lt; <span class="keyword">int</span> (first.size()) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Size of second: "</span> &lt;&lt; <span class="keyword">int</span> (second.size()) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Size of third: "</span> &lt;&lt; <span class="keyword">int</span> (third.size()) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Size of first: 7</span><br><span class="line">Size of second: 5</span><br><span class="line">Size of third: 3</span><br></pre></td></tr></table></figure><p>补充：vector::assign 与 vector::operator= 的区别：</p><ol><li>vector::assign 实现源码</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(size_type __n, <span class="keyword">const</span> _Tp&amp; __val)</span> </span>&#123; _M_fill_assign(__n, __val); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">vector</span>&lt;_Tp, _Alloc&gt;:</span>:_M_fill_assign(<span class="keyword">size_t</span> __n, <span class="keyword">const</span> value_type&amp; __val) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (__n &gt; capacity()) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;_Tp, _Alloc&gt; __tmp(__n, __val, get_allocator());</span><br><span class="line">    __tmp.swap(*<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (__n &gt; size()) &#123;</span><br><span class="line">    fill(begin(), end(), __val);</span><br><span class="line">    _M_finish = uninitialized_fill_n(_M_finish, __n - size(), __val);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    erase(fill_n(begin(), __n, __val), end());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>vector::operator= 实现源码</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">vector</span>&lt;_Tp,_Alloc&gt;&amp; </span></span><br><span class="line"><span class="class"><span class="title">vector</span>&lt;_Tp,_Alloc&gt;:</span>:<span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;_Tp, _Alloc&gt;&amp; __x)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (&amp;__x != <span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> size_type __xlen = __x.size();</span><br><span class="line">    <span class="keyword">if</span> (__xlen &gt; capacity()) &#123;</span><br><span class="line">      iterator __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end());</span><br><span class="line">      destroy(_M_start, _M_finish);</span><br><span class="line">      _M_deallocate(_M_start, _M_end_of_storage - _M_start);</span><br><span class="line">      _M_start = __tmp;</span><br><span class="line">      _M_end_of_storage = _M_start + __xlen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (size() &gt;= __xlen) &#123;</span><br><span class="line">      iterator __i = copy(__x.begin(), __x.end(), begin());</span><br><span class="line">      destroy(__i, _M_finish);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      copy(__x.begin(), __x.begin() + size(), _M_start);</span><br><span class="line">      uninitialized_copy(__x.begin() + size(), __x.end(), _M_finish);</span><br><span class="line">    &#125;</span><br><span class="line">    _M_finish = _M_start + __xlen;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vector-push-back"><a href="#vector-push-back" class="headerlink" title="vector::push_back"></a>vector::push_back</h4><p>在vector的最后一个元素之后添加一个新元素。val的内容被复制（或移动）到新的元素。</p><p>这有效地将容器size增加了一个，如果新的矢量size超过了当前vector的capacity，则导致所分配的存储空间自动重新分配。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span> <span class="params">(<span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span> <span class="params">(value_type&amp;&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line">  <span class="keyword">int</span> myint;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter some integers (enter 0 to end):\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; myint;</span><br><span class="line">    myvector.push_back (myint);</span><br><span class="line">  &#125; <span class="keyword">while</span> (myint);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myvector stores "</span> &lt;&lt; <span class="keyword">int</span>(myvector.size()) &lt;&lt; <span class="string">" numbers.\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vector-pop-back"><a href="#vector-pop-back" class="headerlink" title="vector::pop_back"></a>vector::pop_back</h4><p>删除vector中的最后一个元素，有效地将容器size减少一个。</p><p>这破坏了被删除的元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">sum</span> <span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">  myvector.push_back (<span class="number">100</span>);</span><br><span class="line">  myvector.push_back (<span class="number">200</span>);</span><br><span class="line">  myvector.push_back (<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!myvector.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    sum+=myvector.back();</span><br><span class="line">    myvector.pop_back();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The elements of myvector add up to "</span> &lt;&lt; sum &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The elements of myvector add up to 600</span><br></pre></td></tr></table></figure><h4 id="vector-insert"><a href="#vector-insert" class="headerlink" title="vector::insert"></a>vector::insert</h4><p>通过在指定位置的元素之前插入新元素来扩展该vector，通过插入元素的数量有效地增加容器大小。 这会导致分配的存储空间自动重新分配，只有在新的vector的size超过当前的vector的capacity的情况下。 </p><p>由于vector使用数组作为其基础存储，因此除了将元素插入到vector末尾之后，或vector的begin之前，其他位置会导致容器重新定位位置之后的所有元素到他们的新位置。与其他种类的序列容器（例如list或forward_list）执行相同操作的操作相比，这通常是低效的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">single <span class="title">element</span> <span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span> <span class="params">(const_iterator position, <span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br><span class="line">fill (<span class="number">2</span>)</span><br><span class="line"><span class="function">iterator <span class="title">insert</span> <span class="params">(const_iterator position, size_type n, <span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br><span class="line">range (<span class="number">3</span>)</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">iterator</span> <span class="title">insert</span> (<span class="title">const_iterator</span> <span class="title">position</span>, <span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>);</span></span><br><span class="line">move (<span class="number">4</span>)</span><br><span class="line"><span class="function">iterator <span class="title">insert</span> <span class="params">(const_iterator position, value_type&amp;&amp; val)</span></span>;</span><br><span class="line"><span class="function">initializer <span class="title">list</span> <span class="params">(<span class="number">5</span>)</span></span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span> <span class="params">(const_iterator position, <span class="built_in">initializer_list</span>&lt;value_type&gt; il)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector (<span class="number">3</span>,<span class="number">100</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">  it = myvector.begin();</span><br><span class="line">  it = myvector.insert ( it , <span class="number">200</span> );</span><br><span class="line"></span><br><span class="line">  myvector.insert (it,<span class="number">2</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// "it" no longer valid, get a new one:</span></span><br><span class="line">  it = myvector.begin();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; anothervector (<span class="number">2</span>,<span class="number">400</span>);</span><br><span class="line">  myvector.insert (it+<span class="number">2</span>,anothervector.begin(),anothervector.end());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> myarray [] = &#123; <span class="number">501</span>,<span class="number">502</span>,<span class="number">503</span> &#125;;</span><br><span class="line">  myvector.insert (myvector.begin(), myarray, myarray+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myvector contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (it=myvector.begin(); it&lt;myvector.end(); it++)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvector contains: 501 502 503 300 300 400 400 200 100 100 100</span><br></pre></td></tr></table></figure><p>补充：insert 迭代器野指针错误：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator vi;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取vector第一个元素的迭代器</span></span><br><span class="line">vi = v.begin();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// push_back 插入元素之后可能会因为 push_back 的骚操作（创建一个新vector把旧vector的值复制到新vector），导致vector迭代器iterator的指针变成野指针，而导致insert出错</span></span><br><span class="line">v.push_back(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">v.insert(vi, <span class="number">2</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改正：应该把<code>vi = v.begin();</code>放到<code>v.push_back(10);</code>后面</p><h4 id="vector-erase"><a href="#vector-erase" class="headerlink" title="vector::erase"></a>vector::erase</h4><p>从vector中删除单个元素（position）或一系列元素（[first，last））。</p><p>这有效地减少了被去除的元素的数量，从而破坏了容器的大小。</p><p>由于vector使用一个数组作为其底层存储，所以删除除vector结束位置之后，或vector的begin之前的元素外，将导致容器将段被擦除后的所有元素重新定位到新的位置。与其他种类的序列容器（例如list或forward_list）执行相同操作的操作相比，这通常是低效的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">(const_iterator position)</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">(const_iterator first, const_iterator last)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set some values (from 1 to 10)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++) myvector.push_back(i);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// erase the 6th element</span></span><br><span class="line">  myvector.erase (myvector.begin()+<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// erase the first 3 elements:</span></span><br><span class="line">  myvector.erase (myvector.begin(),myvector.begin()+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myvector contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> i=<span class="number">0</span>; i&lt;myvector.size(); ++i)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; myvector[i];</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvector contains: 4 5 7 8 9 10</span><br></pre></td></tr></table></figure><h4 id="vector-swap"><a href="#vector-swap" class="headerlink" title="vector::swap"></a>vector::swap</h4><p>通过x的内容交换容器的内容，x是另一个相同类型的vector对象。尺寸可能不同。</p><p>在调用这个成员函数之后，这个容器中的元素是那些在调用之前在x中的元素，而x的元素是在这个元素中的元素。所有迭代器，引用和指针对交换对象保持有效。</p><p>请注意，非成员函数存在具有相同名称的交换，并使用与此成员函数相似的优化来重载该算法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span> <span class="params">(<span class="built_in">vector</span>&amp; x)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; foo (<span class="number">3</span>,<span class="number">100</span>);   <span class="comment">// three ints with a value of 100</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bar (<span class="number">5</span>,<span class="number">200</span>);   <span class="comment">// five ints with a value of 200</span></span><br><span class="line"></span><br><span class="line">  foo.swap(bar);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"foo contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> i=<span class="number">0</span>; i&lt;foo.size(); i++)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; foo[i];</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"bar contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> i=<span class="number">0</span>; i&lt;bar.size(); i++)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; bar[i];</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo contains: 200 200 200 200 200 </span><br><span class="line">bar contains: 100 100 100</span><br></pre></td></tr></table></figure><h4 id="vector-clear"><a href="#vector-clear" class="headerlink" title="vector::clear"></a>vector::clear</h4><p>从vector中删除所有的元素（被销毁），留下size为0的容器。</p><p>不保证重新分配，并且由于调用此函数， vector的capacity不保证发生变化。强制重新分配的典型替代方法是使用swap：<code>vector&lt;T&gt;().swap(x);   // clear x reallocating</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = v.begin(); it != v.end(); ++it)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1(<span class="number">5</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">printVector(v1);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"v1 size  = "</span> &lt;&lt; v1.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"v1 capacity  = "</span> &lt;&lt; v1.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">v1.clear();</span><br><span class="line"></span><br><span class="line">printVector(v1);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"v1 size  = "</span> &lt;&lt; v1.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"v1 capacity  = "</span> &lt;&lt; v1.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">v1.push_back(<span class="number">11</span>);</span><br><span class="line">v1.push_back(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">printVector(v1);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"v1 size  = "</span> &lt;&lt; v1.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"v1 capacity  = "</span> &lt;&lt; v1.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">50 50 50 50 50</span><br><span class="line">v1 size  = 5</span><br><span class="line">v1 capacity  = 5</span><br><span class="line"></span><br><span class="line">v1 size  = 0</span><br><span class="line">v1 capacity  = 5</span><br><span class="line">11 22</span><br><span class="line">v1 size  = 2</span><br><span class="line">v1 capacity  = 5</span><br></pre></td></tr></table></figure><h4 id="vector-emplace"><a href="#vector-emplace" class="headerlink" title="vector::emplace"></a>vector::emplace</h4><p>通过在position位置处插入新元素args来扩展容器。这个新元素是用args作为构建的参数来构建的。</p><p>这有效地增加了一个容器的大小。</p><p>分配存储空间的自动重新分配发生在新的vector的size超过当前向量容量的情况下。</p><p>由于vector使用数组作为其基础存储，因此除了将元素插入到vector末尾之后，或vector的begin之前，其他位置会导致容器重新定位位置之后的所有元素到他们的新位置。与其他种类的序列容器（例如list或forward_list）执行相同操作的操作相比，这通常是低效的操作。</p><p>该元素是通过调用allocator_traits::construct来转换args来创建的。插入一个类似的成员函数，将现有对象复制或移动到容器中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">iterator</span> <span class="title">emplace</span> (<span class="title">const_iterator</span> <span class="title">position</span>, <span class="title">Args</span>&amp;&amp;... <span class="title">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> it = myvector.emplace ( myvector.begin()+<span class="number">1</span>, <span class="number">100</span> );</span><br><span class="line">  myvector.emplace ( it, <span class="number">200</span> );</span><br><span class="line">  myvector.emplace ( myvector.end(), <span class="number">300</span> );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myvector contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x: myvector)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvector contains: 10 200 100 20 30 300</span><br></pre></td></tr></table></figure><h4 id="vector-emplace-back"><a href="#vector-emplace-back" class="headerlink" title="vector::emplace_back"></a>vector::emplace_back</h4><p>在vector的末尾插入一个新的元素，紧跟在当前的最后一个元素之后。这个新元素是用args作为构造函数的参数来构造的。</p><p>这有效地将容器大小增加了一个，如果新的矢量大小超过了当前的vector容量，则导致所分配的存储空间自动重新分配。</p><p>该元素是通过调用allocator_traits :: construct来转换args来创建的。</p><p>与push_back相比，emplace_back可以避免额外的复制和移动操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">emplace_back</span> (<span class="title">Args</span>&amp;&amp;... <span class="title">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">President</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> country;</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line"> </span><br><span class="line">    President(<span class="built_in">std</span>::<span class="built_in">string</span> p_name, <span class="built_in">std</span>::<span class="built_in">string</span> p_country, <span class="keyword">int</span> p_year)</span><br><span class="line">        : name(<span class="built_in">std</span>::move(p_name)), country(<span class="built_in">std</span>::move(p_country)), year(p_year)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"I am being constructed.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    President(President&amp;&amp; other)</span><br><span class="line">        : name(<span class="built_in">std</span>::move(other.name)), country(<span class="built_in">std</span>::move(other.country)), year(other.year)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"I am being moved.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    President&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> President&amp; other) = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;President&gt; elections;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"emplace_back:\n"</span>;</span><br><span class="line">    elections.emplace_back(<span class="string">"Nelson Mandela"</span>, <span class="string">"South Africa"</span>, <span class="number">1994</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;President&gt; reElections;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\npush_back:\n"</span>;</span><br><span class="line">    reElections.push_back(President(<span class="string">"Franklin Delano Roosevelt"</span>, <span class="string">"the USA"</span>, <span class="number">1936</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\nContents:\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (President <span class="keyword">const</span>&amp; president: elections) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; president.name &lt;&lt; <span class="string">" was elected president of "</span></span><br><span class="line">                  &lt;&lt; president.country &lt;&lt; <span class="string">" in "</span> &lt;&lt; president.year &lt;&lt; <span class="string">".\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (President <span class="keyword">const</span>&amp; president: reElections) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; president.name &lt;&lt; <span class="string">" was re-elected president of "</span></span><br><span class="line">                  &lt;&lt; president.country &lt;&lt; <span class="string">" in "</span> &lt;&lt; president.year &lt;&lt; <span class="string">".\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">emplace_back:</span><br><span class="line">I am being constructed.</span><br><span class="line"> </span><br><span class="line">push_back:</span><br><span class="line">I am being constructed.</span><br><span class="line">I am being moved.</span><br><span class="line"> </span><br><span class="line">Contents:</span><br><span class="line">Nelson Mandela was elected president of South Africa in 1994.</span><br><span class="line">Franklin Delano Roosevelt was re-elected president of the USA in 1936.</span><br></pre></td></tr></table></figure><h4 id="vector-get-allocator"><a href="#vector-get-allocator" class="headerlink" title="vector::get_allocator"></a>vector::get_allocator</h4><p>返回与vector关联的构造器对象的副本。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">allocator_type <span class="title">get_allocator</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line">  <span class="keyword">int</span> * p;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// allocate an array with space for 5 elements using vector's allocator:</span></span><br><span class="line">  p = myvector.get_allocator().allocate(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// construct values in-place on the array:</span></span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) myvector.get_allocator().construct(&amp;p[i],i);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The allocated array contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; p[i];</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// destroy and deallocate:</span></span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) myvector.get_allocator().destroy(&amp;p[i]);</span><br><span class="line">  myvector.get_allocator().deallocate(p,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The allocated array contains: 0 1 2 3 4</span><br></pre></td></tr></table></figure><p>注意：deallocate和destory的关系：</p><p>deallocate实现的源码：</p><pre><code>template &lt;class T&gt;inline void _deallocate(T* buffer){    ::operator delete(buffer);    //为什么不用 delete [] ?  ,operator delete 区别于 delete                                  //operator delete  是一个底层操作符}</code></pre><p>destory：</p><pre><code>template &lt;class T&gt;inline void _destory(T *ptr){    ptr-&gt;~T();}</code></pre><p>destory负责调用类型的析构函数，销毁相应内存上的内容（但销毁后内存地址仍保留）</p><p>deallocate负责释放内存（此时相应内存中的值在此之前应调用destory销毁，将内存地址返回给系统，代表这部分地址使用引用-1）</p><h4 id="relational-operators-vector"><a href="#relational-operators-vector" class="headerlink" title="relational operators (vector)"></a>relational operators (vector)</h4><h4 id="swap-vector"><a href="#swap-vector" class="headerlink" title="swap (vector)"></a>swap (vector)</h4><h4 id="vector-1"><a href="#vector-1" class="headerlink" title="vector "></a>vector <bool></bool></h4><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>deque（[‘dek]）（双端队列）是double-ended queue 的一个不规则缩写。deque是具有动态大小的序列容器，可以在两端（前端或后端）扩展或收缩。</p><p>特定的库可以以不同的方式实现deques，通常作为某种形式的动态数组。但是在任何情况下，它们都允许通过随机访问迭代器直接访问各个元素，通过根据需要扩展和收缩容器来自动处理存储。</p><p>因此，它们提供了类似于vector的功能，但是在序列的开始部分也可以高效地插入和删除元素，而不仅仅是在结尾。但是，与vector不同，deques并不保证将其所有元素存储在连续的存储位置：deque通过偏移指向另一个元素的指针访问元素会导致未定义的行为。</p><p>两个vector和deques提供了一个非常相似的接口，可以用于类似的目的，但内部工作方式完全不同：虽然vector使用单个数组需要偶尔重新分配以增长，但是deque的元素可以分散在不同的块的容器，容器在内部保存必要的信息以提供对其任何元素的持续时间和统一的顺序接口（通过迭代器）的直接访问。因此，deques在内部比vector更复杂一点，但是这使得他们在某些情况下更有效地增长，尤其是在重新分配变得更加昂贵的很长序列的情况下。</p><p>对于频繁插入或删除开始或结束位置以外的元素的操作，deques表现得更差，并且与列表和转发列表相比，迭代器和引用的一致性更低。</p><p>deque上常见操作的复杂性（效率）如下： </p><ul><li>随机访问 - 常数O(1) </li><li>在结尾或开头插入或移除元素 - 摊销不变O(1) </li><li>插入或移除元素 - 线性O(n)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">allocator</span>&lt;T&gt; &gt; <span class="title">class</span> <span class="title">deque</span>;</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="http://img.blog.csdn.net/20170727225856144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRlg2Nzc1ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br><img src="https://images0.cnblogs.com/blog/559453/201401/092150340824.png" alt></p><h4 id="deque-deque"><a href="#deque-deque" class="headerlink" title="deque::deque"></a>deque::deque</h4><p>构造一个deque容器对象，根据所使用的构造函数版本初始化它的内容：</p><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// constructors used in the same order as described above:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; first;                                <span class="comment">// empty deque of ints</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; second (<span class="number">4</span>,<span class="number">100</span>);                       <span class="comment">// four ints with value 100</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; third (second.begin(),second.end());  <span class="comment">// iterating through second</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; fourth (third);                       <span class="comment">// a copy of third</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// the iterator constructor can be used to copy arrays:</span></span><br><span class="line">  <span class="keyword">int</span> myints[] = &#123;<span class="number">16</span>,<span class="number">2</span>,<span class="number">77</span>,<span class="number">29</span>&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; fifth (myints, myints + <span class="keyword">sizeof</span>(myints) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>) );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The contents of fifth are:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator it = fifth.begin(); it!=fifth.end(); ++it)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The contents of fifth are: 16 2 77 29</span><br></pre></td></tr></table></figure><h4 id="deque-push-back"><a href="#deque-push-back" class="headerlink" title="deque::push_back"></a>deque::push_back</h4><p>在当前的最后一个元素之后 ，在deque容器的末尾添加一个新元素。val的内容被复制（或移动）到新的元素。</p><p>这有效地增加了一个容器的大小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span> <span class="params">(<span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span> <span class="params">(value_type&amp;&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; mydeque;</span><br><span class="line">  <span class="keyword">int</span> myint;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter some integers (enter 0 to end):\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; myint;</span><br><span class="line">    mydeque.push_back (myint);</span><br><span class="line">  &#125; <span class="keyword">while</span> (myint);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mydeque stores "</span> &lt;&lt; (<span class="keyword">int</span>) mydeque.size() &lt;&lt; <span class="string">" numbers.\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="deque-push-front"><a href="#deque-push-front" class="headerlink" title="deque::push_front"></a>deque::push_front</h4><p>在deque容器的开始位置插入一个新的元素，位于当前的第一个元素之前。val的内容被复制（或移动）到插入的元素。</p><p>这有效地增加了一个容器的大小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_front</span> <span class="params">(<span class="keyword">const</span> value_type&amp; val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_front</span> <span class="params">(value_type&amp;&amp; val)</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; mydeque (<span class="number">2</span>,<span class="number">100</span>);     <span class="comment">// two ints with a value of 100</span></span><br><span class="line">  mydeque.push_front (<span class="number">200</span>);</span><br><span class="line">  mydeque.push_front (<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mydeque contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator it = mydeque.begin(); it != mydeque.end(); ++it)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">300 200 100 100</span><br></pre></td></tr></table></figure><h4 id="deque-pop-back"><a href="#deque-pop-back" class="headerlink" title="deque::pop_back"></a>deque::pop_back</h4><p>删除deque容器中的最后一个元素，有效地将容器大小减少一个。</p><p>这破坏了被删除的元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; mydeque;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">sum</span> <span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">  mydeque.push_back (<span class="number">10</span>);</span><br><span class="line">  mydeque.push_back (<span class="number">20</span>);</span><br><span class="line">  mydeque.push_back (<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!mydeque.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    sum+=mydeque.back();</span><br><span class="line">    mydeque.pop_back();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The elements of mydeque add up to "</span> &lt;&lt; sum &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The elements of mydeque add up to 60</span><br></pre></td></tr></table></figure><h4 id="deque-pop-front"><a href="#deque-pop-front" class="headerlink" title="deque::pop_front"></a>deque::pop_front</h4><p>删除deque容器中的第一个元素，有效地减小其大小。</p><p>这破坏了被删除的元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_front</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; mydeque;</span><br><span class="line"></span><br><span class="line">  mydeque.push_back (<span class="number">100</span>);</span><br><span class="line">  mydeque.push_back (<span class="number">200</span>);</span><br><span class="line">  mydeque.push_back (<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Popping out the elements in mydeque:"</span>;</span><br><span class="line">  <span class="keyword">while</span> (!mydeque.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; mydeque.front();</span><br><span class="line">    mydeque.pop_front();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\nThe final size of mydeque is "</span> &lt;&lt; <span class="keyword">int</span>(mydeque.size()) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Popping out the elements in mydeque: 100 200 300</span><br><span class="line">The final size of mydeque is 0</span><br></pre></td></tr></table></figure><h4 id="deque-emplace-front"><a href="#deque-emplace-front" class="headerlink" title="deque::emplace_front"></a>deque::emplace_front</h4><p>在deque的开头插入一个新的元素，就在其当前的第一个元素之前。这个新的元素是用args作为构建的参数来构建的。</p><p>这有效地增加了一个容器的大小。</p><p>该元素是通过调用allocator_traits::construct来转换args来创建的。</p><p>存在一个类似的成员函数push_front，它可以将现有对象复制或移动到容器中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">emplace_front</span> (<span class="title">Args</span>&amp;&amp;... <span class="title">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; mydeque = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line">  mydeque.emplace_front (<span class="number">111</span>);</span><br><span class="line">  mydeque.emplace_front (<span class="number">222</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mydeque contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x: mydeque)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mydeque contains: 222 111 10 20 30</span><br></pre></td></tr></table></figure><h4 id="deque-emplace-back"><a href="#deque-emplace-back" class="headerlink" title="deque::emplace_back"></a>deque::emplace_back</h4><p>在deque的末尾插入一个新的元素，紧跟在当前的最后一个元素之后。这个新的元素是用args作为构建的参数来构建的。</p><p>这有效地增加了一个容器的大小。</p><p>该元素是通过调用allocator_traits::construct来转换args来创建的。</p><p>存在一个类似的成员函数push_back，它可以将现有对象复制或移动到容器中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">emplace_back</span> (<span class="title">Args</span>&amp;&amp;... <span class="title">args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; mydeque = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line">  mydeque.emplace_back (<span class="number">100</span>);</span><br><span class="line">  mydeque.emplace_back (<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mydeque contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x: mydeque)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mydeque contains: 10 20 30 100 200</span><br></pre></td></tr></table></figure><h3 id="forward-list"><a href="#forward-list" class="headerlink" title="forward_list"></a>forward_list</h3><p>forward_list（单向链表）是序列容器，允许在序列中的任何地方进行恒定的时间插入和擦除操作。</p><p>forward_list（单向链表）被实现为单链表; 单链表可以将它们包含的每个元素存储在不同和不相关的存储位置中。通过关联到序列中下一个元素的链接的每个元素来保留排序。forward_list容器和列表</p><p>之间的主要设计区别容器是第一个内部只保留一个到下一个元素的链接，而后者每个元素保留两个链接：一个指向下一个元素，一个指向前一个元素，允许在两个方向上有效的迭代，但是每个元素消耗额外的存储空间并且插入和移除元件的时间开销略高。因此，forward_list对象比列表对象更有效率，尽管它们只能向前迭代。</p><p>与其他基本的标准序列容器（array，vector和deque），forward_list通常在插入，提取和移动容器内任何位置的元素方面效果更好，因此也适用于密集使用这些元素的算法，如排序算法。</p><p>的主要缺点修饰符Modifiers S和列表相比这些其它序列容器s是说，他们缺乏可以通过位置的元素的直接访问; 例如，要访问forward_list中的第六个元素，必须从开始位置迭代到该位置，这需要在这些位置之间的线性时间。它们还消耗一些额外的内存来保持与每个元素相关联的链接信息（这可能是大型小元素列表的重要因素）。</p><p>该修饰符Modifiersclass模板的设计考虑到效率：按照设计，它与简单的手写C型单链表一样高效，实际上是唯一的标准容器，为了效率的考虑故意缺少尺寸成员函数：由于其性质作为一个链表，具有一个需要一定时间的大小的成员将需要它保持一个内部计数器的大小（如列表所示）。这会消耗一些额外的存储空间，并使插入和删除操作效率稍低。要获取forward_list对象的大小，可以使用距离算法的开始和结束，这是一个需要线性时间的操作。</p><p><img src="http://img.blog.csdn.net/20160407212133266" alt></p><h4 id="forward-list-forward-list"><a href="#forward-list-forward-list" class="headerlink" title="forward_list::forward_list"></a>forward_list::forward_list</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> (<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">forward_list</span> <span class="params">(<span class="keyword">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class="line">fill (<span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">forward_list</span> <span class="params">(size_type n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">forward_list</span> <span class="params">(size_type n, <span class="keyword">const</span> value_type&amp; val,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class="line">range (<span class="number">3</span>)</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">forward_list</span> (<span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>,</span></span><br><span class="line"><span class="class">                <span class="title">const</span> <span class="title">allocator_type</span>&amp; <span class="title">alloc</span> = <span class="title">allocator_type</span>());</span></span><br><span class="line">copy (<span class="number">4</span>)</span><br><span class="line">forward_list (<span class="keyword">const</span> forward_list&amp; fwdlst);</span><br><span class="line">forward_list (<span class="keyword">const</span> forward_list&amp; fwdlst, <span class="keyword">const</span> allocator_type&amp; alloc);</span><br><span class="line">move (<span class="number">5</span>)</span><br><span class="line">forward_list (forward_list&amp;&amp; fwdlst);</span><br><span class="line">forward_list (forward_list&amp;&amp; fwdlst, <span class="keyword">const</span> allocator_type&amp; alloc);</span><br><span class="line"><span class="function">initializer <span class="title">list</span> <span class="params">(<span class="number">6</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">forward_list</span> <span class="params">(<span class="built_in">initializer_list</span>&lt;value_type&gt; il,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// constructors used in the same order as described above:</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; first;                      <span class="comment">// default: empty</span></span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; second (<span class="number">3</span>,<span class="number">77</span>);              <span class="comment">// fill: 3 seventy-sevens</span></span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; third (second.begin(), second.end()); <span class="comment">// range initialization</span></span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; fourth (third);            <span class="comment">// copy constructor</span></span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; fifth (<span class="built_in">std</span>::move(fourth));  <span class="comment">// move ctor. (fourth wasted)</span></span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; sixth = &#123;<span class="number">3</span>, <span class="number">52</span>, <span class="number">25</span>, <span class="number">90</span>&#125;;    <span class="comment">// initializer_list constructor</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"first:"</span> ; <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x: first)  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; x; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"second:"</span>; <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x: second) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; x; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"third:"</span>;  <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x: third)  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; x; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fourth:"</span>; <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x: fourth) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; x; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fifth:"</span>;  <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x: fifth)  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; x; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"sixth:"</span>;  <span class="keyword">for</span> (<span class="keyword">int</span>&amp; x: sixth)  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; x; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Possible output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">forward_list constructor examples:</span><br><span class="line">first:</span><br><span class="line">second: 77 77 77</span><br><span class="line">third: 77 77 77</span><br><span class="line">fourth:</span><br><span class="line">fifth: 77 77 77</span><br><span class="line">sixth: 3 52 25 90</span><br></pre></td></tr></table></figure><h4 id="forward-list-forward-list-1"><a href="#forward-list-forward-list-1" class="headerlink" title="forward_list::~forward_list"></a>forward_list::~forward_list</h4><h4 id="forward-list-before-begin"><a href="#forward-list-before-begin" class="headerlink" title="forward_list::before_begin"></a>forward_list::before_begin</h4><p>返回指向容器中第一个元素之前的位置的迭代器。</p><p>返回的迭代器不应被解除引用：它是为了用作成员函数的参数emplace_after，insert_after，erase_after或splice_after，指定序列，其中执行该动作的位置的开始位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">iterator <span class="title">before_begin</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">before_begin</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; mylist = &#123;<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line">  mylist.insert_after ( mylist.before_begin(), <span class="number">11</span> );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mylist contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">int</span>&amp; x: mylist ) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mylist contains: 11 20 30 40 50</span><br></pre></td></tr></table></figure><h4 id="forward-list-cbefore-begin"><a href="#forward-list-cbefore-begin" class="headerlink" title="forward_list::cbefore_begin"></a>forward_list::cbefore_begin</h4><p>返回指向容器中第一个元素之前的位置的const_iterator。</p><p>一个常量性是指向常量内容的迭代器。这个迭代器可以增加和减少（除非它本身也是const），就像forward_list::before_begin返回的迭代器一样，但不能用来修改它指向的内容。</p><p>返回的价值不得解除引用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">const_iterator <span class="title">cbefore_begin</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::forward_list&lt;<span class="keyword">int</span>&gt; mylist = &#123;<span class="number">77</span>, <span class="number">2</span>, <span class="number">16</span>&#125;;</span><br><span class="line"></span><br><span class="line">  mylist.insert_after ( mylist.cbefore_begin(), <span class="number">19</span> );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mylist contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">int</span>&amp; x: mylist ) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mylist contains: 19 77 2 16</span><br></pre></td></tr></table></figure><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><h3 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h3><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map 是关联容器，按照特定顺序存储由 key value (键值) 和 mapped value (映射值) 组合形成的元素。</p><p>在映射中，键值通常用于对元素进行排序和唯一标识，而映射的值存储与此键关联的内容。该类型的键和映射的值可能不同，并且在部件类型被分组在一起VALUE_TYPE，这是一种对类型结合两种：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">const</span> Key, T&gt; value_type;</span><br></pre></td></tr></table></figure><p>在内部，映射中的元素总是按照由其内部比较对象（比较类型）指示的特定的严格弱排序标准按键排序。映射容器通常比unordered_map容器慢，以通过它们的键来访问各个元素，但是它们允许基于它们的顺序对子集进行直接迭代。 在该映射值地图可以直接通过使用其相应的键来访问括号运算符（（操作符[] ）。 映射通常如实施</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">Key</span>,                                     // <span class="title">map</span>:</span>:key_type</span><br><span class="line">           <span class="class"><span class="keyword">class</span> <span class="title">T</span>,                                       // <span class="title">map</span>:</span>:mapped_type</span><br><span class="line">           <span class="class"><span class="keyword">class</span> <span class="title">Compare</span> = <span class="title">less</span>&lt;Key&gt;,                     // <span class="title">map</span>:</span>:key_compare</span><br><span class="line">           <span class="class"><span class="keyword">class</span> <span class="title">Alloc</span> = <span class="title">allocator</span>&lt;pair&lt;const Key,T&gt; &gt;    // <span class="title">map</span>:</span>:allocator_type</span><br><span class="line">           &gt; <span class="class"><span class="keyword">class</span> <span class="title">map</span>;</span></span><br></pre></td></tr></table></figure><h4 id="map-map"><a href="#map-map" class="headerlink" title="map::map"></a>map::map</h4><p>构造一个映射容器对象，根据所使用的构造器版本初始化其内容：</p><p>（1）空容器构造函数（默认构造函数）</p><p>构造一个空的容器，没有元素。</p><p>（2）范围构造函数</p><p>构造具有一样多的元素的范围内的容器[第一，最后一个），其中每个元件布设构造的从在该范围内它的相应的元件。</p><p>（3）复制构造函数（并用分配器复制）</p><p>使用x中的每个元素的副本构造一个容器。</p><p>（4）移动构造函数（并与分配器一起移动）</p><p>构造一个获取x元素的容器。<br>如果指定了alloc并且与x的分配器不同，那么元素将被移动。否则，没有构建元素（他们的所有权直接转移）。<br>x保持未指定但有效的状态。</p><p>（5）初始化列表构造函数</p><p>用il中的每个元素的副本构造一个容器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">empty (<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">map</span> <span class="params">(<span class="keyword">const</span> key_compare&amp; comp = key_compare(),</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">map</span> <span class="params">(<span class="keyword">const</span> allocator_type&amp; alloc)</span></span>;</span><br><span class="line">range (<span class="number">2</span>)</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">map</span> (<span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>,</span></span><br><span class="line"><span class="class">       <span class="title">const</span> <span class="title">key_compare</span>&amp; <span class="title">comp</span> = <span class="title">key_compare</span>(),</span></span><br><span class="line"><span class="class">       <span class="title">const</span> <span class="title">allocator_type</span>&amp; = <span class="title">allocator_type</span>());</span></span><br><span class="line">copy (<span class="number">3</span>)</span><br><span class="line"><span class="built_in">map</span> (<span class="keyword">const</span> <span class="built_in">map</span>&amp; x);</span><br><span class="line"><span class="built_in">map</span> (<span class="keyword">const</span> <span class="built_in">map</span>&amp; x, <span class="keyword">const</span> allocator_type&amp; alloc);</span><br><span class="line">move (<span class="number">4</span>)</span><br><span class="line"><span class="built_in">map</span> (<span class="built_in">map</span>&amp;&amp; x);</span><br><span class="line"><span class="built_in">map</span> (<span class="built_in">map</span>&amp;&amp; x, <span class="keyword">const</span> allocator_type&amp; alloc);</span><br><span class="line"><span class="function">initializer <span class="title">list</span> <span class="params">(<span class="number">5</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">map</span> <span class="params">(<span class="built_in">initializer_list</span>&lt;value_type&gt; il,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">const</span> key_compare&amp; comp = key_compare(),</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">const</span> allocator_type&amp; alloc = allocator_type())</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fncomp</span> <span class="params">(<span class="keyword">char</span> lhs, <span class="keyword">char</span> rhs)</span> </span>&#123;<span class="keyword">return</span> lhs&lt;rhs;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">classcomp</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp; lhs, <span class="keyword">const</span> <span class="keyword">char</span>&amp; rhs)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;<span class="keyword">return</span> lhs&lt;rhs;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; first;</span><br><span class="line"></span><br><span class="line">  first[<span class="string">'a'</span>]=<span class="number">10</span>;</span><br><span class="line">  first[<span class="string">'b'</span>]=<span class="number">30</span>;</span><br><span class="line">  first[<span class="string">'c'</span>]=<span class="number">50</span>;</span><br><span class="line">  first[<span class="string">'d'</span>]=<span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; second (first.begin(),first.end());</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; third (second);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>,classcomp&gt; fourth;                 <span class="comment">// class as Compare</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span>(*fn_pt)(<span class="keyword">char</span>,<span class="keyword">char</span>) = fncomp;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>,<span class="keyword">bool</span>(*)(<span class="keyword">char</span>,<span class="keyword">char</span>)&gt; fifth (fn_pt); <span class="comment">// function pointer as Compare</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="map-begin"><a href="#map-begin" class="headerlink" title="map::begin"></a>map::begin</h4><p>返回引用map容器中第一个元素的迭代器。</p><p>由于map容器始终保持其元素的顺序，所以开始指向遵循容器排序标准的元素。</p><p>如果容器是空的，则返回的迭代器值不应被解除引用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">'b'</span>] = <span class="number">100</span>;</span><br><span class="line">  mymap[<span class="string">'a'</span>] = <span class="number">200</span>;</span><br><span class="line">  mymap[<span class="string">'c'</span>] = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// show content:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it=mymap.begin(); it!=mymap.end(); ++it)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" =&gt; "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a =&gt; 200</span><br><span class="line">b =&gt; 100</span><br><span class="line">c =&gt; 300</span><br></pre></td></tr></table></figure><h4 id="map-key-comp"><a href="#map-key-comp" class="headerlink" title="map::key_comp"></a>map::key_comp</h4><p>返回容器用于比较键的比较对象的副本。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">key_compare <span class="title">key_comp</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::key_compare mycomp = mymap.key_comp();</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">'a'</span>]=<span class="number">100</span>;</span><br><span class="line">  mymap[<span class="string">'b'</span>]=<span class="number">200</span>;</span><br><span class="line">  mymap[<span class="string">'c'</span>]=<span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mymap contains:\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> highest = mymap.rbegin()-&gt;first;     <span class="comment">// key value of last element</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it = mymap.begin();</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" =&gt; "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> ( mycomp((*it++).first, highest) );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mymap contains:</span><br><span class="line">a =&gt; 100</span><br><span class="line">b =&gt; 200</span><br><span class="line">c =&gt; 300</span><br></pre></td></tr></table></figure><h4 id="map-value-comp"><a href="#map-value-comp" class="headerlink" title="map::value_comp"></a>map::value_comp</h4><p>返回可用于比较两个元素的比较对象，以获取第一个元素的键是否在第二个元素之前。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">value_compare <span class="title">value_comp</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">'x'</span>]=<span class="number">1001</span>;</span><br><span class="line">  mymap[<span class="string">'y'</span>]=<span class="number">2002</span>;</span><br><span class="line">  mymap[<span class="string">'z'</span>]=<span class="number">3003</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mymap contains:\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::pair&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; highest = *mymap.rbegin();          <span class="comment">// last element</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it = mymap.begin();</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" =&gt; "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> ( mymap.value_comp()(*it++, highest) );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mymap contains:</span><br><span class="line">x =&gt; 1001</span><br><span class="line">y =&gt; 2002</span><br><span class="line">z =&gt; 3003</span><br></pre></td></tr></table></figure><h4 id="map-find"><a href="#map-find" class="headerlink" title="map::find"></a>map::find</h4><p>在容器中搜索具有等于k的键的元素，如果找到则返回一个迭代器，否则返回map::end的迭代器。</p><p>如果容器的比较对象自反地返回假（即，不管元素作为参数传递的顺序），则两个key被认为是等同的。 </p><p>另一个成员函数map::count可以用来检查一个特定的键是否存在。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">iterator <span class="title">find</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">find</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">'a'</span>]=<span class="number">50</span>;</span><br><span class="line">  mymap[<span class="string">'b'</span>]=<span class="number">100</span>;</span><br><span class="line">  mymap[<span class="string">'c'</span>]=<span class="number">150</span>;</span><br><span class="line">  mymap[<span class="string">'d'</span>]=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">  it = mymap.find(<span class="string">'b'</span>);</span><br><span class="line">  <span class="keyword">if</span> (it != mymap.end())</span><br><span class="line">    mymap.erase (it);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// print content:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"elements in mymap:"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a =&gt; "</span> &lt;&lt; mymap.find(<span class="string">'a'</span>)-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"c =&gt; "</span> &lt;&lt; mymap.find(<span class="string">'c'</span>)-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d =&gt; "</span> &lt;&lt; mymap.find(<span class="string">'d'</span>)-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">elements in mymap:</span><br><span class="line">a =&gt; 50</span><br><span class="line">c =&gt; 150</span><br><span class="line">d =&gt; 200</span><br></pre></td></tr></table></figure><h4 id="map-count"><a href="#map-count" class="headerlink" title="map::count"></a>map::count</h4><p>在容器中搜索具有等于k的键的元素，并返回匹配的数量。</p><p>由于地图容器中的所有元素都是唯一的，因此该函数只能返回1（如果找到该元素）或返回零（否则）。</p><p>如果容器的比较对象自反地返回错误（即，不管按键作为参数传递的顺序），则两个键被认为是等同的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">count</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">  mymap [<span class="string">'a'</span>]=<span class="number">101</span>;</span><br><span class="line">  mymap [<span class="string">'c'</span>]=<span class="number">202</span>;</span><br><span class="line">  mymap [<span class="string">'f'</span>]=<span class="number">303</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (c=<span class="string">'a'</span>; c&lt;<span class="string">'h'</span>; c++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">    <span class="keyword">if</span> (mymap.count(c)&gt;<span class="number">0</span>)</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" is an element of mymap.\n"</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" is not an element of mymap.\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a is an element of mymap.</span><br><span class="line">b is not an element of mymap.</span><br><span class="line">c is an element of mymap.</span><br><span class="line">d is not an element of mymap.</span><br><span class="line">e is not an element of mymap.</span><br><span class="line">f is an element of mymap.</span><br><span class="line">g is not an element of mymap.</span><br></pre></td></tr></table></figure><h4 id="map-lower-bound"><a href="#map-lower-bound" class="headerlink" title="map::lower_bound"></a>map::lower_bound</h4><p>将迭代器返回到下限</p><p>返回指向容器中第一个元素的迭代器，该元素的键不会在k之前出现（即，它是等价的或者在其后）。</p><p>该函数使用其内部比较对象（key_comp）来确定这一点，将迭代器返回到key_comp（element_key，k）将返回false的第一个元素。</p><p>如果map类用默认的比较类型（less）实例化，则函数返回一个迭代器到第一个元素，其键不小于k。</p><p>一个类似的成员函数upper_bound具有相同的行为lower_bound，除非映射包含一个key值等于k的元素：在这种情况下，lower_bound返回指向该元素的迭代器，而upper_bound返回指向下一个元素的迭代器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">iterator <span class="title">lower_bound</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">lower_bound</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator itlow,itup;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">'a'</span>]=<span class="number">20</span>;</span><br><span class="line">  mymap[<span class="string">'b'</span>]=<span class="number">40</span>;</span><br><span class="line">  mymap[<span class="string">'c'</span>]=<span class="number">60</span>;</span><br><span class="line">  mymap[<span class="string">'d'</span>]=<span class="number">80</span>;</span><br><span class="line">  mymap[<span class="string">'e'</span>]=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  itlow=mymap.lower_bound (<span class="string">'b'</span>);  <span class="comment">// itlow points to b</span></span><br><span class="line">  itup=mymap.upper_bound (<span class="string">'d'</span>);   <span class="comment">// itup points to e (not d!)</span></span><br><span class="line"></span><br><span class="line">  mymap.erase(itlow,itup);        <span class="comment">// erases [itlow,itup)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// print content:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it=mymap.begin(); it!=mymap.end(); ++it)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" =&gt; "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a =&gt; 20</span><br><span class="line">e =&gt; 100</span><br></pre></td></tr></table></figure><h4 id="map-upper-bound"><a href="#map-upper-bound" class="headerlink" title="map::upper_bound"></a>map::upper_bound</h4><p>将迭代器返回到上限</p><p>返回一个指向容器中第一个元素的迭代器，它的关键字被认为是在k之后。</p><p>该函数使用其内部比较对象（key_comp）来确定这一点，将迭代器返回到key_comp（k，element_key）将返回true的第一个元素。</p><p>如果map类用默认的比较类型（less）实例化，则函数返回一个迭代器到第一个元素，其键大于k。</p><p>类似的成员函数lower_bound具有与upper_bound相同的行为，除了map包含一个元素，其键值等于k：在这种情况下，lower_bound返回指向该元素的迭代器，而upper_bound返回指向下一个元素的迭代器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="function">iterator <span class="title">upper_bound</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">upper_bound</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator itlow,itup;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">'a'</span>]=<span class="number">20</span>;</span><br><span class="line">  mymap[<span class="string">'b'</span>]=<span class="number">40</span>;</span><br><span class="line">  mymap[<span class="string">'c'</span>]=<span class="number">60</span>;</span><br><span class="line">  mymap[<span class="string">'d'</span>]=<span class="number">80</span>;</span><br><span class="line">  mymap[<span class="string">'e'</span>]=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  itlow=mymap.lower_bound (<span class="string">'b'</span>);  <span class="comment">// itlow points to b</span></span><br><span class="line">  itup=mymap.upper_bound (<span class="string">'d'</span>);   <span class="comment">// itup points to e (not d!)</span></span><br><span class="line"></span><br><span class="line">  mymap.erase(itlow,itup);        <span class="comment">// erases [itlow,itup)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// print content:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it=mymap.begin(); it!=mymap.end(); ++it)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" =&gt; "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a =&gt; 20</span><br><span class="line">e =&gt; 100</span><br></pre></td></tr></table></figure><h4 id="map-equal-range"><a href="#map-equal-range" class="headerlink" title="map::equal_range"></a>map::equal_range</h4><p>获取相同元素的范围</p><p>返回包含容器中所有具有与k等价的键的元素的范围边界。 由于地图容器中的元素具有唯一键，所以返回的范围最多只包含一个元素。 </p><p>如果没有找到匹配，则返回的范围具有零的长度，与两个迭代器指向具有考虑去后一个密钥对所述第一元件ķ根据容器的内部比较对象（key_comp）。如果容器的比较对象返回false，则两个键被认为是等价的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;const_iterator,const_iterator&gt; equal_range (<span class="keyword">const</span> key_type&amp; k) <span class="keyword">const</span>;</span><br><span class="line">pair&lt;iterator,iterator&gt;             equal_range (<span class="keyword">const</span> key_type&amp; k);</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mymap;</span><br><span class="line"></span><br><span class="line">  mymap[<span class="string">'a'</span>]=<span class="number">10</span>;</span><br><span class="line">  mymap[<span class="string">'b'</span>]=<span class="number">20</span>;</span><br><span class="line">  mymap[<span class="string">'c'</span>]=<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::pair&lt;<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator,<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator&gt; ret;</span><br><span class="line">  ret = mymap.equal_range(<span class="string">'b'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"lower bound points to: "</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ret.first-&gt;first &lt;&lt; <span class="string">" =&gt; "</span> &lt;&lt; ret.first-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"upper bound points to: "</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ret.second-&gt;first &lt;&lt; <span class="string">" =&gt; "</span> &lt;&lt; ret.second-&gt;second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lower bound points to: &apos;b&apos; =&gt; 20</span><br><span class="line">upper bound points to: &apos;c&apos; =&gt; 30</span><br></pre></td></tr></table></figure><h3 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h3><h3 id="无序容器（Unordered-Container）：unordered-set、unordered-multiset、unordered-map、unordered-multimap"><a href="#无序容器（Unordered-Container）：unordered-set、unordered-multiset、unordered-map、unordered-multimap" class="headerlink" title="无序容器（Unordered Container）：unordered_set、unordered_multiset、unordered_map、unordered_multimap"></a>无序容器（Unordered Container）：unordered_set、unordered_multiset、unordered_map、unordered_multimap</h3><p>包括：</p><ul><li>unordered_set</li><li>unordered_multiset</li><li>unordered_map</li><li>unordered_multimap</li></ul><p>都是以哈希表实现的。</p><p><img src="http://img.blog.csdn.net/20160410123436394" alt></p><p>unordered_set、unodered_multiset结构：</p><p><img src="http://img.blog.csdn.net/20160410123518692" alt></p><p>unordered_map、unodered_multimap结构：</p><p><img src="http://img.blog.csdn.net/20160410123525739" alt></p><h3 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a>unordered_set</h3><h3 id="unordered-multiset"><a href="#unordered-multiset" class="headerlink" title="unordered_multiset"></a>unordered_multiset</h3><h3 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h3><h3 id="unordered-multimap"><a href="#unordered-multimap" class="headerlink" title="unordered_multimap"></a>unordered_multimap</h3><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p>元组是一个能够容纳元素集合的对象。每个元素可以是不同的类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">Types</span>&gt; <span class="title">class</span> <span class="title">tuple</span>;</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     // std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;        // std::tuple, std::get, std::tie, std::ignore</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; foo (<span class="number">10</span>,<span class="string">'x'</span>);</span><br><span class="line">  <span class="keyword">auto</span> bar = <span class="built_in">std</span>::make_tuple (<span class="string">"test"</span>, <span class="number">3.1</span>, <span class="number">14</span>, <span class="string">'y'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::get&lt;<span class="number">2</span>&gt;(bar) = <span class="number">100</span>;                                    <span class="comment">// access element</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> myint; <span class="keyword">char</span> mychar;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::tie (myint, mychar) = foo;                            <span class="comment">// unpack elements</span></span><br><span class="line">  <span class="built_in">std</span>::tie (<span class="built_in">std</span>::ignore, <span class="built_in">std</span>::ignore, myint, mychar) = bar;  <span class="comment">// unpack (with ignore)</span></span><br><span class="line"></span><br><span class="line">  mychar = <span class="built_in">std</span>::get&lt;<span class="number">3</span>&gt;(bar);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(foo) = <span class="built_in">std</span>::get&lt;<span class="number">2</span>&gt;(bar);</span><br><span class="line">  <span class="built_in">std</span>::get&lt;<span class="number">1</span>&gt;(foo) = mychar;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"foo contains: "</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(foo) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">1</span>&gt;(foo) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo contains: 100 y</span><br></pre></td></tr></table></figure><h4 id="tuple-tuple"><a href="#tuple-tuple" class="headerlink" title="tuple::tuple"></a>tuple::tuple</h4><p>构建一个 tuple（元组）对象。</p><p>这涉及单独构建其元素，初始化取决于调用的构造函数形式：</p><p>（1）默认的构造函数</p><p>构建一个 元组对象的元素值初始化。</p><p>（2）复制/移动构造函数</p><p>该对象使用tpl的内容进行初始化 元组目的。tpl<br>的相应元素被传递给每个元素的构造函数。</p><p>（3）隐式转换构造函数</p><p>同上。tpl中的<br>所有类型都可以隐含地转换为构造中它们各自元素的类型元组 目的。</p><p>（4）初始化构造函数<br>用elems中的相应元素初始化每个元素。elems<br>的相应元素被传递给每个元素的构造函数。</p><p>（5）对转换构造函数</p><p>该对象有两个对应于pr.first和的元素pr.second。PR中的所有类型都应该隐含地转换为其中各自元素的类型元组 目的。</p><p>（6）分配器版本</p><p>和上面的版本一样，除了每个元素都是使用allocator alloc构造的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> (<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="title">tuple</span><span class="params">()</span></span>;</span><br><span class="line">copy / move (<span class="number">2</span>)</span><br><span class="line">tuple (<span class="keyword">const</span> tuple&amp; tpl) = <span class="keyword">default</span>;</span><br><span class="line">tuple (tuple&amp;&amp; tpl) = <span class="keyword">default</span>;</span><br><span class="line"><span class="function">implicit <span class="title">conversion</span> <span class="params">(<span class="number">3</span>)</span></span></span><br><span class="line">template &lt;class... UTypes&gt;</span><br><span class="line">  tuple (<span class="keyword">const</span> tuple&lt;UTypes...&gt;&amp; tpl);</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">UTypes</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">tuple</span>&lt;UTypes...&gt;&amp;&amp; <span class="title">tpl</span>);</span></span><br><span class="line">initialization (<span class="number">4</span>)</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">tuple</span> <span class="params">(<span class="keyword">const</span> Types&amp;... elems)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">UTypes</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">explicit</span> <span class="title">tuple</span> (<span class="title">UTypes</span>&amp;&amp;... <span class="title">elems</span>);</span></span><br><span class="line"><span class="function">conversion from <span class="title">pair</span> <span class="params">(<span class="number">5</span>)</span></span></span><br><span class="line">template &lt;class U1, class U2&gt;</span><br><span class="line">  tuple (<span class="keyword">const</span> pair&lt;U1,U2&gt;&amp; pr);</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">U1</span>, <span class="title">class</span> <span class="title">U2</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">pair</span>&lt;U1,U2&gt;&amp;&amp; <span class="title">pr</span>);</span></span><br><span class="line">allocator (<span class="number">6</span>)</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">const</span> <span class="title">tuple</span>&amp; <span class="title">tpl</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">tuple</span>&amp;&amp; <span class="title">tpl</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>,<span class="title">class</span>... <span class="title">UTypes</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">const</span> <span class="title">tuple</span>&lt;UTypes...&gt;&amp; <span class="title">tpl</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">class</span>... <span class="title">UTypes</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">tuple</span>&lt;UTypes...&gt;&amp;&amp; <span class="title">tpl</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">const</span> <span class="title">Types</span>&amp;... <span class="title">elems</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">class</span>... <span class="title">UTypes</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">UTypes</span>&amp;&amp;... <span class="title">elems</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">class</span> <span class="title">U1</span>, <span class="title">class</span> <span class="title">U2</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">const</span> <span class="title">pair</span>&lt;U1,U2&gt;&amp; <span class="title">pr</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">class</span> <span class="title">U1</span>, <span class="title">class</span> <span class="title">U2</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">tuple</span> (<span class="title">allocator_arg_t</span> <span class="title">aa</span>, <span class="title">const</span> <span class="title">Alloc</span>&amp; <span class="title">alloc</span>, <span class="title">pair</span>&lt;U1,U2&gt;&amp;&amp; <span class="title">pr</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     // std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;      // std::make_pair</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;        // std::tuple, std::make_tuple, std::get</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; first;                             <span class="comment">// default</span></span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; second (first);                    <span class="comment">// copy</span></span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; third (<span class="built_in">std</span>::make_tuple(<span class="number">20</span>,<span class="string">'b'</span>));   <span class="comment">// move</span></span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">long</span>,<span class="keyword">char</span>&gt; fourth (third);                   <span class="comment">// implicit conversion</span></span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; fifth (<span class="number">10</span>,<span class="string">'a'</span>);                    <span class="comment">// initialization</span></span><br><span class="line">  <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; sixth (<span class="built_in">std</span>::make_pair(<span class="number">30</span>,<span class="string">'c'</span>));    <span class="comment">// from pair / move</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"sixth contains: "</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">0</span>&gt;(sixth);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" and "</span> &lt;&lt; <span class="built_in">std</span>::get&lt;<span class="number">1</span>&gt;(sixth) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sixth contains: 30 and c</span><br></pre></td></tr></table></figure><h3 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h3><p>这个类把一对值（values）结合在一起，这些值可能是不同的类型（T1 和 T2）。每个值可以被公有的成员变量first、second访问。</p><p>pair是tuple（元组）的一个特例。</p><p>pair的实现是一个结构体，主要的两个成员变量是first second 因为是使用struct不是class，所以可以直接使用pair的成员变量。</p><p>应用：</p><ul><li>可以将两个类型数据组合成一个如map&lt;key, value&gt;</li><li>当某个函数需要两个返回值时</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt; <span class="title">struct</span> <span class="title">pair</span>;</span></span><br></pre></td></tr></table></figure><h4 id="pair-pair"><a href="#pair-pair" class="headerlink" title="pair::pair"></a>pair::pair</h4><p>构建一个pair对象。</p><p>这涉及到单独构建它的两个组件对象，初始化依赖于调用的构造器形式：</p><p>（1）默认的构造函数</p><p>构建一个 对对象的元素值初始化。</p><p>（2）复制/移动构造函数（和隐式转换）</p><p>该对象被初始化为pr的内容 对目的。pr<br>的相应成员被传递给每个成员的构造函数。</p><p>（3）初始化构造函数</p><p>会员 第一是由一个和成员构建的第二与b。</p><p>（4）分段构造</p><p>构造成员 first  和 second  到位，传递元素first_args 作为参数的构造函数 first，和元素 second_args 到的构造函数 second 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> (<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="title">pair</span><span class="params">()</span></span>;</span><br><span class="line">copy / move (<span class="number">2</span>)</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>, <span class="title">class</span> <span class="title">V</span>&gt; <span class="title">pair</span> (<span class="title">const</span> <span class="title">pair</span>&lt;U,V&gt;&amp; <span class="title">pr</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>, <span class="title">class</span> <span class="title">V</span>&gt; <span class="title">pair</span> (<span class="title">pair</span>&lt;U,V&gt;&amp;&amp; <span class="title">pr</span>);</span></span><br><span class="line">pair (<span class="keyword">const</span> pair&amp; pr) = <span class="keyword">default</span>;</span><br><span class="line">pair (pair&amp;&amp; pr) = <span class="keyword">default</span>;</span><br><span class="line">initialization (<span class="number">3</span>)</span><br><span class="line">pair (<span class="keyword">const</span> first_type&amp; a, <span class="keyword">const</span> second_type&amp; b);</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>, <span class="title">class</span> <span class="title">V</span>&gt; <span class="title">pair</span> (<span class="title">U</span>&amp;&amp; <span class="title">a</span>, <span class="title">V</span>&amp;&amp; <span class="title">b</span>);</span></span><br><span class="line">piecewise (<span class="number">4</span>)</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">Args1</span>, <span class="title">class</span>... <span class="title">Args2</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">pair</span> (<span class="title">piecewise_construct_t</span> <span class="title">pwc</span>, <span class="title">tuple</span>&lt;Args1...&gt; <span class="title">first_args</span>,</span></span><br><span class="line"><span class="class">                                   <span class="title">tuple</span>&lt;Args2...&gt; <span class="title">second_args</span>);</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;      // std::pair, std::make_pair</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;       // std::string</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     // std::cout</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::pair &lt;<span class="built_in">std</span>::<span class="built_in">string</span>,<span class="keyword">double</span>&gt; product1;                     <span class="comment">// default constructor</span></span><br><span class="line">  <span class="built_in">std</span>::pair &lt;<span class="built_in">std</span>::<span class="built_in">string</span>,<span class="keyword">double</span>&gt; product2 (<span class="string">"tomatoes"</span>,<span class="number">2.30</span>);   <span class="comment">// value init</span></span><br><span class="line">  <span class="built_in">std</span>::pair &lt;<span class="built_in">std</span>::<span class="built_in">string</span>,<span class="keyword">double</span>&gt; product3 (product2);          <span class="comment">// copy constructor</span></span><br><span class="line"></span><br><span class="line">  product1 = <span class="built_in">std</span>::make_pair(<span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"lightbulbs"</span>),<span class="number">0.99</span>);   <span class="comment">// using make_pair (move)</span></span><br><span class="line"></span><br><span class="line">  product2.first = <span class="string">"shoes"</span>;                  <span class="comment">// the type of first is string</span></span><br><span class="line">  product2.second = <span class="number">39.90</span>;                   <span class="comment">// the type of second is double</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The price of "</span> &lt;&lt; product1.first &lt;&lt; <span class="string">" is $"</span> &lt;&lt; product1.second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The price of "</span> &lt;&lt; product2.first &lt;&lt; <span class="string">" is $"</span> &lt;&lt; product2.second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The price of "</span> &lt;&lt; product3.first &lt;&lt; <span class="string">" is $"</span> &lt;&lt; product3.second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The price of lightbulbs is $0.99</span><br><span class="line">The price of shoes is $39.9</span><br><span class="line">The price of tomatoes is $2.3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;STL&quot;&gt;&lt;a href=&quot;#STL&quot; class=&quot;headerlink&quot; title=&quot;STL&quot;&gt;&lt;/a&gt;STL&lt;/h1&gt;&lt;h2 id=&quot;组成&quot;&gt;&lt;a href=&quot;#组成&quot; class=&quot;headerlink&quot; title=&quot;组成&quot;&gt;&lt;/a&gt;组成&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;容器（containers）&lt;/li&gt;
&lt;li&gt;算法（algorithms）&lt;/li&gt;
&lt;li&gt;迭代器（iterators）&lt;/li&gt;
&lt;li&gt;仿函数（functors）&lt;/li&gt;
&lt;li&gt;配接器（adapters）&lt;/li&gt;
&lt;li&gt;空间配置器（allocator）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;容器（containers）&quot;&gt;&lt;a href=&quot;#容器（containers）&quot; class=&quot;headerlink&quot; title=&quot;容器（containers）&quot;&gt;&lt;/a&gt;容器（containers）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;序列式容器（sequence containers）：元素都是可序（ordered），但未必是有序（sorted）&lt;/li&gt;
&lt;li&gt;关联式容器（associattive containers）
    
    </summary>
    
      <category term="C++" scheme="https://kaaier.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://kaaier.github.io/tags/C/"/>
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>C++容器及算法</title>
    <link href="https://kaaier.github.io/2019/06/15/C++/"/>
    <id>https://kaaier.github.io/2019/06/15/C++/</id>
    <published>2019-06-15T03:21:20.000Z</published>
    <updated>2019-08-06T16:11:36.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="容器（containers）"><a href="#容器（containers）" class="headerlink" title="容器（containers）"></a>容器（containers）</h1><h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><p>array 是固定大小的顺序容器，它们保存了一个以严格的线性顺序排列的特定数量的元素。</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>begin</td><td>返回指向数组容器中第一个元素的迭代器</td></tr><tr><td>end</td><td>返回指向数组容器中最后一个元素之后的理论元素的迭代器</td></tr><tr><td>rbegin</td><td>返回指向数组容器中最后一个元素的反向迭代器</td></tr><tr><td>rend</td><td>返回一个反向迭代器，指向数组中第一个元素之前的理论元素</td></tr><tr><td>cbegin</td><td>返回指向数组容器中第一个元素的常量迭代器（const_iterator）</td></tr><tr><td>cend</td><td>返回指向数组容器中最后一个元素之后的理论元素的常量迭代器（const_iterator）</td></tr><tr><td>crbegin</td><td>返回指向数组容器中最后一个元素的常量反向迭代器（const_reverse_iterator）</td></tr><tr><td>crend</td><td>返回指向数组中第一个元素之前的理论元素的常量反向迭代器（const_reverse_iterator）</td></tr><tr><td>size</td><td>返回数组容器中元素的数量</td></tr><tr><td>max_size</td><td>返回数组容器可容纳的最大元素数</td></tr><tr><td>empty</td><td>返回一个布尔值，指示数组容器是否为空</td></tr><tr><td>operator[]</td><td>返回容器中第 n（参数）个位置的元素的引用</td></tr><tr><td>at</td><td>返回容器中第 n（参数）个位置的元素的引用</td></tr><tr><td>front</td><td>返回对容器中第一个元素的引用</td></tr><tr><td>back</td><td>返回对容器中最后一个元素的引用</td></tr><tr><td>data</td><td>返回指向容器中第一个元素的指针</td></tr><tr><td>fill</td><td>用 val（参数）填充数组所有元素</td></tr><tr><td>swap</td><td>通过 x（参数）的内容交换数组的内容</td></tr><tr><td>get（array）</td><td>形如 <code>std::get&lt;0&gt;(myarray)</code>；传入一个数组容器，返回指定位置元素的引用</td></tr><tr><td>relational operators (array)</td><td>形如 <code>arrayA &gt; arrayB</code>；依此比较数组每个元素的大小关系</td></tr><tr><td><a id="more"></a></td><td></td></tr><tr><td>## vector</td><td></td></tr></tbody></table><p>vector 是表示可以改变大小的数组的序列容器。</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>vector</td><td>构造函数</td></tr><tr><td>~vector</td><td>析构函数，销毁容器对象</td></tr><tr><td>operator=</td><td>将新内容分配给容器，替换其当前内容，并相应地修改其大小</td></tr><tr><td>begin</td><td>返回指向容器中第一个元素的迭代器</td></tr><tr><td>end</td><td>返回指向容器中最后一个元素之后的理论元素的迭代器</td></tr><tr><td>rbegin</td><td>返回指向容器中最后一个元素的反向迭代器</td></tr><tr><td>rend</td><td>返回一个反向迭代器，指向中第一个元素之前的理论元素</td></tr><tr><td>cbegin</td><td>返回指向容器中第一个元素的常量迭代器（const_iterator）</td></tr><tr><td>cend</td><td>返回指向容器中最后一个元素之后的理论元素的常量迭代器（const_iterator）</td></tr><tr><td>crbegin</td><td>返回指向容器中最后一个元素的常量反向迭代器（const_reverse_iterator）</td></tr><tr><td>crend</td><td>返回指向容器中第一个元素之前的理论元素的常量反向迭代器（const_reverse_iterator）</td></tr><tr><td>size</td><td>返回容器中元素的数量</td></tr><tr><td>max_size</td><td>返回容器可容纳的最大元素数</td></tr><tr><td>resize</td><td>调整容器的大小，使其包含 n（参数）个元素</td></tr><tr><td>capacity</td><td>返回当前为 vector 分配的存储空间（容量）的大小</td></tr><tr><td>empty</td><td>返回 vector 是否为空</td></tr><tr><td>reserve</td><td>请求 vector 容量至少足以包含 n（参数）个元素</td></tr><tr><td>shrink_to_fit</td><td>要求容器减小其 capacity（容量）以适应其 size（元素数量）</td></tr><tr><td>operator[]</td><td>返回容器中第 n（参数）个位置的元素的引用</td></tr><tr><td>at</td><td>返回容器中第 n（参数）个位置的元素的引用</td></tr><tr><td>front</td><td>返回对容器中第一个元素的引用</td></tr><tr><td>back</td><td>返回对容器中最后一个元素的引用</td></tr><tr><td>data</td><td>返回指向容器中第一个元素的指针</td></tr><tr><td>assign</td><td>将新内容分配给 vector，替换其当前内容，并相应地修改其 size</td></tr><tr><td>push_back</td><td>在容器的最后一个元素之后添加一个新元素</td></tr><tr><td>pop_back</td><td>删除容器中的最后一个元素，有效地将容器 size 减少一个</td></tr><tr><td>insert</td><td>通过在指定位置的元素之前插入新元素来扩展该容器，通过插入元素的数量有效地增加容器大小</td></tr><tr><td>erase</td><td>从 vector 中删除单个元素（<code>position</code>）或一系列元素（<code>[first，last)</code>），这有效地减少了被去除的元素的数量，从而破坏了容器的大小</td></tr><tr><td>swap</td><td>通过 x（参数）的内容交换容器的内容，x 是另一个类型相同、size 可能不同的 vector 对象</td></tr><tr><td>clear</td><td>从 vector 中删除所有的元素（被销毁），留下 size 为 0 的容器</td></tr><tr><td>emplace</td><td>通过在 position（参数）位置处插入新元素 args（参数）来扩展容器</td></tr><tr><td>emplace_back</td><td>在 vector 的末尾插入一个新的元素，紧跟在当前的最后一个元素之后</td></tr><tr><td>get_allocator</td><td>返回与vector关联的构造器对象的副本</td></tr><tr><td>swap(vector)</td><td>容器 x（参数）的内容与容器 y（参数）的内容交换。两个容器对象都必须是相同的类型（相同的模板参数），尽管大小可能不同</td></tr><tr><td>relational operators (vector)</td><td>形如 <code>vectorA &gt; vectorB</code>；依此比较每个元素的大小关系</td></tr></tbody></table><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><p>deque（[‘dek]）（双端队列）是double-ended queue 的一个不规则缩写。deque是具有动态大小的序列容器，可以在两端（前端或后端）扩展或收缩。</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>deque</td><td>构造函数</td></tr><tr><td>push_back</td><td>在当前的最后一个元素之后 ，在 deque 容器的末尾添加一个新元素</td></tr><tr><td>push_front</td><td>在 deque 容器的开始位置插入一个新的元素，位于当前的第一个元素之前</td></tr><tr><td>pop_back</td><td>删除 deque 容器中的最后一个元素，有效地将容器大小减少一个</td></tr><tr><td>pop_front</td><td>删除 deque 容器中的第一个元素，有效地减小其大小</td></tr><tr><td>emplace_front</td><td>在 deque 的开头插入一个新的元素，就在其当前的第一个元素之前</td></tr><tr><td>emplace_back</td><td>在 deque 的末尾插入一个新的元素，紧跟在当前的最后一个元素之后</td></tr></tbody></table><h2 id="forward-list"><a href="#forward-list" class="headerlink" title="forward_list"></a>forward_list</h2><p>forward_list（单向链表）是序列容器，允许在序列中的任何地方进行恒定的时间插入和擦除操作。</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>forward_list</td><td>返回指向容器中第一个元素之前的位置的迭代器</td></tr><tr><td>cbefore_begin</td><td>返回指向容器中第一个元素之前的位置的 const_iterator</td></tr></tbody></table><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>list，双向链表，是序列容器，允许在序列中的任何地方进行常数时间插入和擦除操作，并在两个方向上进行迭代。</p><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>stack 是一种容器适配器，用于在LIFO（后进先出）的操作，其中元素仅从容器的一端插入和提取。</p><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p>queue 是一种容器适配器，用于在FIFO（先入先出）的操作，其中元素插入到容器的一端并从另一端提取。</p><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>set 是按照特定顺序存储唯一元素的容器。</p><h2 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h2><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map 是关联容器，按照特定顺序存储由 key value (键值) 和 mapped value (映射值) 组合形成的元素。</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>map</td><td>构造函数</td></tr><tr><td>begin</td><td>返回引用容器中第一个元素的迭代器</td></tr><tr><td>key_comp</td><td>返回容器用于比较键的比较对象的副本</td></tr><tr><td>value_comp</td><td>返回可用于比较两个元素的比较对象，以获取第一个元素的键是否在第二个元素之前</td></tr><tr><td>find</td><td>在容器中搜索具有等于 k（参数）的键的元素，如果找到则返回一个迭代器，否则返回 map::end 的迭代器</td></tr><tr><td>count</td><td>在容器中搜索具有等于 k（参数）的键的元素，并返回匹配的数量</td></tr><tr><td>lower_bound</td><td>返回一个非递减序列 <code>[first, last)</code>（参数）中的第一个大于等于值 val（参数）的位置的迭代器</td></tr><tr><td>upper_bound</td><td>返回一个非递减序列 <code>[first, last)</code>（参数）中第一个大于 val（参数）的位置的迭代器</td></tr><tr><td>equal_range</td><td>获取相同元素的范围，返回包含容器中所有具有与 k（参数）等价的键的元素的范围边界（<code>pair&lt; map&lt;char,int&gt;::iterator, map&lt;char,int&gt;::iterator &gt;</code>）</td></tr></tbody></table><h2 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h2><h2 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a>unordered_set</h2><h2 id="unordered-multiset"><a href="#unordered-multiset" class="headerlink" title="unordered_multiset"></a>unordered_multiset</h2><h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2><h2 id="unordered-multimap"><a href="#unordered-multimap" class="headerlink" title="unordered_multimap"></a>unordered_multimap</h2><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p>元组是一个能够容纳元素集合的对象。每个元素可以是不同的类型。</p><h2 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h2><p>这个类把一对值（values）结合在一起，这些值可能是不同的类型（T1 和 T2）。每个值可以被公有的成员变量first、second访问。</p><h1 id="算法（algorithms）"><a href="#算法（algorithms）" class="headerlink" title="算法（algorithms）"></a>算法（algorithms）</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单查找算法，要求输入迭代器（input iterator）</span></span><br><span class="line">find(beg, end, val); <span class="comment">// 返回一个迭代器，指向输入序列中第一个等于 val 的元素，未找到返回 end</span></span><br><span class="line">find_if(beg, end, unaryPred); <span class="comment">// 返回一个迭代器，指向第一个满足 unaryPred 的元素，未找到返回 end</span></span><br><span class="line">find_if_not(beg, end, unaryPred); <span class="comment">// 返回一个迭代器，指向第一个令 unaryPred 为 false 的元素，未找到返回 end</span></span><br><span class="line">count(beg, end, val); <span class="comment">// 返回一个计数器，指出 val 出现了多少次</span></span><br><span class="line">count_if(beg, end, unaryPred); <span class="comment">// 统计有多少个元素满足 unaryPred</span></span><br><span class="line">all_of(beg, end, unaryPred); <span class="comment">// 返回一个 bool 值，判断是否所有元素都满足 unaryPred</span></span><br><span class="line">any_of(beg, end, unaryPred); <span class="comment">// 返回一个 bool 值，判断是否任意（存在）一个元素满足 unaryPred</span></span><br><span class="line">none_of(beg, end, unaryPred); <span class="comment">// 返回一个 bool 值，判断是否所有元素都不满足 unaryPred</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找重复值的算法，传入向前迭代器（forward iterator）</span></span><br><span class="line">adjacent_find(beg, end); <span class="comment">// 返回指向第一对相邻重复元素的迭代器，无相邻元素则返回 end</span></span><br><span class="line">adjacent_find(beg, end, binaryPred); <span class="comment">// 返回指向第一对相邻重复元素的迭代器，无相邻元素则返回 end</span></span><br><span class="line">search_n(beg, end, count, val); <span class="comment">// 返回一个迭代器，从此位置开始有 count 个相等元素，不存在则返回 end</span></span><br><span class="line">search_n(beg, end, count, val, binaryPred); <span class="comment">// 返回一个迭代器，从此位置开始有 count 个相等元素，不存在则返回 end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找子序列算法，除 find_first_of（前两个输入迭代器，后两个前向迭代器） 外，都要求两个前向迭代器</span></span><br><span class="line">search(beg1, end1, beg2, end2); <span class="comment">// 返回第二个输入范围（子序列）在爹一个输入范围中第一次出现的位置，未找到则返回 end1</span></span><br><span class="line">search(beg1, end1, beg2, end2, binaryPred); <span class="comment">// 返回第二个输入范围（子序列）在爹一个输入范围中第一次出现的位置，未找到则返回 end1</span></span><br><span class="line">find_first_of(beg1, end1, beg2, end2); <span class="comment">// 返回一个迭代器，指向第二个输入范围中任意元素在第一个范围中首次出现的位置，未找到则返回end1</span></span><br><span class="line">find_first_of(beg1, end1, beg2, end2, binaryPred); <span class="comment">// 返回一个迭代器，指向第二个输入范围中任意元素在第一个范围中首次出现的位置，未找到则返回end1</span></span><br><span class="line">find_end(beg1, end1, beg2, end2); <span class="comment">// 类似 search，但返回的最后一次出现的位置。如果第二个输入范围为空，或者在第一个输入范围为空，或者在第一个输入范围中未找到它，则返回 end1</span></span><br><span class="line">find_end(beg1, end1, beg2, end2, binaryPred); <span class="comment">// 类似 search，但返回的最后一次出现的位置。如果第二个输入范围为空，或者在第一个输入范围为空，或者在第一个输入范围中未找到它，则返回 end1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他只读算法，传入输入迭代器</span></span><br><span class="line">for_each(beg, end, unaryOp); <span class="comment">// 对输入序列中的每个元素应用可调用对象 unaryOp，unaryOp 的返回值被忽略</span></span><br><span class="line">mismatch(beg1, end1, beg2); <span class="comment">// 比较两个序列中的元素。返回一个迭代器的 pair，表示两个序列中第一个不匹配的元素</span></span><br><span class="line">mismatch(beg1, end1, beg2, binaryPred); <span class="comment">// 比较两个序列中的元素。返回一个迭代器的 pair，表示两个序列中第一个不匹配的元素</span></span><br><span class="line">equal(beg1, end1, beg2); <span class="comment">// 比较每个元素，确定两个序列是否相等。</span></span><br><span class="line">equal(beg1, end1, beg2, binaryPred); <span class="comment">// 比较每个元素，确定两个序列是否相等。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分搜索算法，传入前向迭代器或随机访问迭代器（random-access iterator），要求序列中的元素已经是有序的。通过小于运算符（&lt;）或 comp 比较操作实现比较。</span></span><br><span class="line">lower_bound(beg, end, val); <span class="comment">// 返回一个非递减序列 [beg, end) 中的第一个大于等于值 val 的位置的迭代器，不存在则返回 end</span></span><br><span class="line">lower_bound(beg, end, val, comp); <span class="comment">// 返回一个非递减序列 [beg, end) 中的第一个大于等于值 val 的位置的迭代器，不存在则返回 end</span></span><br><span class="line">upper_bound(beg, end, val); <span class="comment">// 返回一个非递减序列 [beg, end) 中第一个大于 val 的位置的迭代器，不存在则返回 end</span></span><br><span class="line">upper_bound(beg, end, val, comp); <span class="comment">// 返回一个非递减序列 [beg, end) 中第一个大于 val 的位置的迭代器，不存在则返回 end</span></span><br><span class="line">equal_range(beg, end, val); <span class="comment">// 返回一个 pair，其 first 成员是 lower_bound 返回的迭代器，其 second 成员是 upper_bound 返回的迭代器</span></span><br><span class="line">binary_search(beg, end, val); <span class="comment">// 返回一个 bool 值，指出序列中是否包含等于 val 的元素。对于两个值 x 和 y，当 x 不小于 y 且 y 也不小于 x 时，认为它们相等。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只写不读算法，要求输出迭代器（output iterator）</span></span><br><span class="line">fill(beg, end, val); <span class="comment">// 将 val 赋予每个元素，返回 void</span></span><br><span class="line">fill_n(beg, cnt, val); <span class="comment">// 将 val 赋予 cnt 个元素，返回指向写入到输出序列最有一个元素之后位置的迭代器</span></span><br><span class="line">genetate(beg, end, Gen); <span class="comment">// 每次调用 Gen() 生成不同的值赋予每个序列，返回 void</span></span><br><span class="line">genetate_n(beg, cnt, Gen); <span class="comment">// 每次调用 Gen() 生成不同的值赋予 cnt 个序列，返回指向写入到输出序列最有一个元素之后位置的迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用输入迭代器的写算法，读取一个输入序列，将值写入到一个输出序列（dest）中</span></span><br><span class="line">copy(beg, end, dest); <span class="comment">// 从输入范围将元素拷贝所有元素到 dest 指定定的目的序列</span></span><br><span class="line">copy_if(beg, end, dest, unaryPred); <span class="comment">// 从输入范围将元素拷贝满足 unaryPred 的元素到 dest 指定定的目的序列</span></span><br><span class="line">copy_n(beg, n, dest); <span class="comment">// 从输入范围将元素拷贝前 n 个元素到 dest 指定定的目的序列</span></span><br><span class="line">move(beg, end, dest); <span class="comment">// 对输入序列中的每个元素调用 std::move，将其移动到迭代器 dest 开始始的序列中</span></span><br><span class="line">transform(beg, end, dest, unaryOp); <span class="comment">// 调用给定操作（一元操作），并将结果写到dest中</span></span><br><span class="line">transform(beg, end, beg2, dest, binaryOp); <span class="comment">// 调用给定操作（二元操作），并将结果写到dest中</span></span><br><span class="line">replace_copy(beg, end, dest, old_val, new_val); <span class="comment">// 将每个元素拷贝到 dest，将等于 old_val 的的元素替换为 new_val</span></span><br><span class="line">replace_copy_if(beg, end, dest, unaryPred, new_val); <span class="comment">// 将每个元素拷贝到 dest，将满足 unaryPred 的的元素替换为 new_val</span></span><br><span class="line">merge(beg1, end1, beg2, end2, dest); <span class="comment">// 两个输入序列必须都是有序的，用 &lt; 运算符将合并后的序列写入到 dest 中</span></span><br><span class="line">merge(beg1, end1, beg2, end2, dest, comp); <span class="comment">// 两个输入序列必须都是有序的，使用给定的比较操作（comp）将合并后的序列写入到 dest 中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用前向迭代器的写算法，要求前向迭代器</span></span><br><span class="line">iter_swap(iter1, iter2); <span class="comment">// 交换 iter1 和 iter2 所表示的元素，返回 void</span></span><br><span class="line">swap_ranges(beg1, end1, beg2); <span class="comment">// 将输入范围中所有元素与 beg2 开始的第二个序列中所有元素进行交换。返回递增后的的 beg2，指向最后一个交换元素之后的位置。</span></span><br><span class="line">replace(beg, end, old_val, new_val); <span class="comment">// 用 new_val 替换等于 old_val 的每个匹配元素</span></span><br><span class="line">replace_if(beg, end, unaryPred, new_val); <span class="comment">// 用 new_val 替换满足 unaryPred 的每个匹配元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用双向迭代器的写算法，要求双向选代器（bidirectional iterator）</span></span><br><span class="line">copy_backward(beg, end, dest); <span class="comment">// 从输入范围中拷贝元素到指定目的位置。如果范围为空,则返回值为 dest；否则，返回值表示从 *beg 中拷贝或移动的元素。</span></span><br><span class="line">move_backward(beg, end, dest);  <span class="comment">// 从输入范围中移动元素到指定目的位置。如果范围为空,则返回值为 dest；否则,返回值表示从 *beg 中拷贝或移动的元素。</span></span><br><span class="line">inplace_merge(beg, mid, end); <span class="comment">// 将同一个序列中的两个有序子序列合并为单一的有序序列。beg 到 mid 间的子序列和 mid 到 end 间的子序列被合并，并被写入到原序列中。使用 &lt; 比较元素。</span></span><br><span class="line">inplace_merge(beg, mid, end, comp); <span class="comment">// 将同一个序列中的两个有序子序列合并为单一的有序序列。beg 到 mid 间的子序列和 mid 到 end 间的子序列被合并，并被写入到原序列中。使用给定的 comp 操作。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 划分算法，要求双向选代器（bidirectional iterator）</span></span><br><span class="line">is_partitioned(beg, end, unaryPred); <span class="comment">// 如果所有满足谓词 unaryPred 的元素都在不满足 unarypred 的元素之前，则返回 true。若序列为空，也返回 true</span></span><br><span class="line">partition_copy(beg, end, dest1, dest2, unaryPred); <span class="comment">// 将满足 unaryPred 的元素拷贝到到 dest1，并将不满足 unaryPred 的元素拷贝到到 dest2。返回一个迭代器 pair，其 first 成员表示拷贝到 dest1 的的元素的末尾，second 表示拷贝到 dest2 的元素的末尾。</span></span><br><span class="line">partitioned_point(beg, end, unaryPred); <span class="comment">// 输入序列必须是已经用 unaryPred 划分过的。返回满足  unaryPred 的范围的尾后迭代器。如果返回的迭代器不是 end，则它指向的元素及其后的元素必须都不满足 unaryPred</span></span><br><span class="line">stable_partition(beg, end, unaryPred); <span class="comment">// 使用 unaryPred 划分输入序列。满足 unaryPred 的元素放置在序列开始，不满足的元素放在序列尾部。返回一个迭代器，指向最后一个满足 unaryPred 的元素之后的位置如果所有元素都不满足 unaryPred，则返回 beg</span></span><br><span class="line">partition(beg, end, unaryPred); <span class="comment">// 使用 unaryPred 划分输入序列。满足 unaryPred 的元素放置在序列开始，不满足的元素放在序列尾部。返回一个迭代器，指向最后一个满足 unaryPred 的元素之后的位置如果所有元素都不满足 unaryPred，则返回 beg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序算法，要求随机访问迭代器（random-access iterator）</span></span><br><span class="line">sort(beg, end); <span class="comment">// 排序整个范围</span></span><br><span class="line">stable_sort(beg, end); <span class="comment">// 排序整个范围（稳定排序）</span></span><br><span class="line">sort(beg, end, comp); <span class="comment">// 排序整个范围</span></span><br><span class="line">stable_sort(beg, end, comp); <span class="comment">// 排序整个范围（稳定排序）</span></span><br><span class="line">is_sorted(beg, end); <span class="comment">// 返回一个 bool 值，指出整个输入序列是否有序</span></span><br><span class="line">is_sorted(beg, end, comp); <span class="comment">// 返回一个 bool 值，指出整个输入序列是否有序</span></span><br><span class="line">is_sorted_until(beg, end); <span class="comment">// 在输入序列中査找最长初始有序子序列，并返回子序列的尾后迭代器</span></span><br><span class="line">is_sorted_until(beg, end, comp); <span class="comment">// 在输入序列中査找最长初始有序子序列，并返回子序列的尾后迭代器</span></span><br><span class="line">partial_sort(beg, mid, end); <span class="comment">// 排序 mid-beg 个元素。即，如果 mid-beg 等于 42，则此函数将值最小的 42 个元素有序放在序列前 42 个位置</span></span><br><span class="line">partial_sort(beg, mid, end, comp); <span class="comment">// 排序 mid-beg 个元素。即，如果 mid-beg 等于 42，则此函数将值最小的 42 个元素有序放在序列前 42 个位置</span></span><br><span class="line">partial_sort_copy(beg, end, destBeg, destEnd); <span class="comment">// 排序输入范围中的元素，并将足够多的已排序元素放到 destBeg 和 destEnd 所指示的序列中</span></span><br><span class="line">partial_sort_copy(beg, end, destBeg, destEnd, comp); <span class="comment">// 排序输入范围中的元素，并将足够多的已排序元素放到 destBeg 和 destEnd 所指示的序列中</span></span><br><span class="line">nth_element(beg, nth, end); <span class="comment">// nth 是一个迭代器，指向输入序列中第 n 大的元素。nth 之前的元素都小于等于它，而之后的元素都大于等于它</span></span><br><span class="line">nth_element(beg, nth, end, comp); <span class="comment">// nth 是一个迭代器，指向输入序列中第 n 大的元素。nth 之前的元素都小于等于它，而之后的元素都大于等于它</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用前向迭代器的重排算法。普通版本在输入序列自身内部重拍元素，_copy 版本完成重拍后写入到指定目的序列中，而不改变输入序列</span></span><br><span class="line">remove(beg, end, val); <span class="comment">// 通过用保留的元素覆盖要删除的元素实现删除 ==val 的元素，返回一个指向最后一个删除元素的尾后位置的迭代器</span></span><br><span class="line">remove_if(beg, end, unaryPred); <span class="comment">// 通过用保留的元素覆盖要删除的元素实现删除满足 unaryPred 的元素，返回一个指向最后一个删除元素的尾后位置的迭代器</span></span><br><span class="line">remove_copy(beg, end, dest, val); <span class="comment">// 通过用保留的元素覆盖要删除的元素实现删除 ==val 的元素，返回一个指向最后一个删除元素的尾后位置的迭代器</span></span><br><span class="line">remove_copy_if(beg, end, dest, unaryPred); <span class="comment">// 通过用保留的元素覆盖要删除的元素实现删除满足 unaryPred 的元素，返回一个指向最后一个删除元素的尾后位置的迭代器</span></span><br><span class="line">unique(beg, end); <span class="comment">// 通过对覆盖相邻的重复元素（用 == 确定是否相同）实现重排序列。返回一个迭代器，指向不重复元素的尾后位置</span></span><br><span class="line">unique (beg, end, binaryPred); <span class="comment">// 通过对覆盖相邻的重复元素（用 binaryPred 确定是否相同）实现重排序列。返回一个迭代器，指向不重复元素的尾后位置</span></span><br><span class="line">unique_copy(beg, end, dest); <span class="comment">// 通过对覆盖相邻的重复元素（用 == 确定是否相同）实现重排序列。返回一个迭代器，指向不重复元素的尾后位置</span></span><br><span class="line">unique_copy_if(beg, end, dest, binaryPred); <span class="comment">// 通过对覆盖相邻的重复元素（用 binaryPred 确定是否相同）实现重排序列。返回一个迭代器，指向不重复元素的尾后位置</span></span><br><span class="line">rotate(beg, mid, end); <span class="comment">// 围绕 mid 指向的元素进行元素转动。元素 mid 成为为首元素，随后是 mid+1 到到 end 之前的元素，再接着是 beg 到 mid 之前的元素。返回一个迭代器，指向原来在 beg 位置的元素</span></span><br><span class="line">rotate_copy(beg, mid, end, dest); <span class="comment">// 围绕 mid 指向的元素进行元素转动。元素 mid 成为为首元素，随后是 mid+1 到到 end 之前的元素，再接着是 beg 到 mid 之前的元素。返回一个迭代器，指向原来在 beg 位置的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用双向迭代器的重排算法</span></span><br><span class="line">reverse(beg, end); <span class="comment">// 翻转序列中的元素，返回 void</span></span><br><span class="line">reverse_copy(beg, end, dest);; <span class="comment">// 翻转序列中的元素，返回一个迭代器，指向拷贝到目的序列的元素的尾后位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用随机访问迭代器的重排算法</span></span><br><span class="line">random_shuffle(beg, end); <span class="comment">// 混洗输入序列中的元素，返回 void</span></span><br><span class="line">random_shuffle(beg, end, rand); <span class="comment">// 混洗输入序列中的元素，rand 接受一个正整数的随机对象，返回 void</span></span><br><span class="line">shuffle(beg, end, Uniform_rand); <span class="comment">// 混洗输入序列中的元素，Uniform_rand 必须满足均匀分布随机数生成器的要求，返回 void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最小值和最大值，使用 &lt; 运算符或给定的比较操作 comp 进行比较</span></span><br><span class="line">min(val1, va12); <span class="comment">// 返回 val1 和 val2 中的最小值，两个实参的类型必须完全一致。参数和返回类型都是 const的引引用，意味着对象不会被拷贝。下略</span></span><br><span class="line">min(val1, val2, comp);</span><br><span class="line">min(init_list);</span><br><span class="line">min(init_list, comp);</span><br><span class="line">max(val1, val2);</span><br><span class="line">max(val1, val2, comp);</span><br><span class="line">max(init_list);</span><br><span class="line">max(init_list, comp);</span><br><span class="line">minmax(val1, val2); <span class="comment">// 返回一个 pair，其 first 成员为提供的值中的较小者，second 成员为较大者。下略</span></span><br><span class="line">minmax(vall, val2, comp);</span><br><span class="line">minmax(init_list);</span><br><span class="line">minmax(init_list, comp);</span><br><span class="line">min_element(beg, end); <span class="comment">// 返回指向输入序列中最小元素的迭代器</span></span><br><span class="line">min_element(beg, end, comp); <span class="comment">// 返回指向输入序列中最小元素的迭代器</span></span><br><span class="line">max_element(beg, end); <span class="comment">// 返回指向输入序列中最大元素的迭代器</span></span><br><span class="line">max_element(beg, end, comp); <span class="comment">// 返回指向输入序列中最大元素的迭代器</span></span><br><span class="line">minmax_element(beg, end); <span class="comment">// 返回一个 pair，其中 first 成员为最小元素，second 成员为最大元素</span></span><br><span class="line">minmax_element(beg, end, comp); <span class="comment">// 返回一个 pair，其中 first 成员为最小元素，second 成员为最大元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字典序比较，根据第一对不相等的元素的相对大小来返回结果。如果第一个序列在字典序中小于第二个序列，则返回 true。否则，返回 fa1se。如果个序列比另一个短，且所有元素都与较长序列的对应元素相等，则较短序列在字典序中更小。如果序列长度相等，且对应元素都相等，则在字典序中任何一个都不大于另外一个。</span></span><br><span class="line">lexicographical_compare(beg1, end1, beg2, end2);</span><br><span class="line">lexicographical_compare(beg1, end1, beg2, end2, comp);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;容器（containers）&quot;&gt;&lt;a href=&quot;#容器（containers）&quot; class=&quot;headerlink&quot; title=&quot;容器（containers）&quot;&gt;&lt;/a&gt;容器（containers）&lt;/h1&gt;&lt;h2 id=&quot;array&quot;&gt;&lt;a href=&quot;#array&quot; class=&quot;headerlink&quot; title=&quot;array&quot;&gt;&lt;/a&gt;array&lt;/h2&gt;&lt;p&gt;array 是固定大小的顺序容器，它们保存了一个以严格的线性顺序排列的特定数量的元素。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;begin&lt;/td&gt;
&lt;td&gt;返回指向数组容器中第一个元素的迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;end&lt;/td&gt;
&lt;td&gt;返回指向数组容器中最后一个元素之后的理论元素的迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rbegin&lt;/td&gt;
&lt;td&gt;返回指向数组容器中最后一个元素的反向迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rend&lt;/td&gt;
&lt;td&gt;返回一个反向迭代器，指向数组中第一个元素之前的理论元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cbegin&lt;/td&gt;
&lt;td&gt;返回指向数组容器中第一个元素的常量迭代器（const_iterator）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cend&lt;/td&gt;
&lt;td&gt;返回指向数组容器中最后一个元素之后的理论元素的常量迭代器（const_iterator）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;crbegin&lt;/td&gt;
&lt;td&gt;返回指向数组容器中最后一个元素的常量反向迭代器（const_reverse_iterator）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;crend&lt;/td&gt;
&lt;td&gt;返回指向数组中第一个元素之前的理论元素的常量反向迭代器（const_reverse_iterator）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;返回数组容器中元素的数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max_size&lt;/td&gt;
&lt;td&gt;返回数组容器可容纳的最大元素数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;empty&lt;/td&gt;
&lt;td&gt;返回一个布尔值，指示数组容器是否为空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;operator[]&lt;/td&gt;
&lt;td&gt;返回容器中第 n（参数）个位置的元素的引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;at&lt;/td&gt;
&lt;td&gt;返回容器中第 n（参数）个位置的元素的引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;front&lt;/td&gt;
&lt;td&gt;返回对容器中第一个元素的引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;back&lt;/td&gt;
&lt;td&gt;返回对容器中最后一个元素的引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;返回指向容器中第一个元素的指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fill&lt;/td&gt;
&lt;td&gt;用 val（参数）填充数组所有元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;swap&lt;/td&gt;
&lt;td&gt;通过 x（参数）的内容交换数组的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;get（array）&lt;/td&gt;
&lt;td&gt;形如 &lt;code&gt;std::get&amp;lt;0&amp;gt;(myarray)&lt;/code&gt;；传入一个数组容器，返回指定位置元素的引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;relational operators (array)&lt;/td&gt;
&lt;td&gt;形如 &lt;code&gt;arrayA &amp;gt; arrayB&lt;/code&gt;；依此比较数组每个元素的大小关系&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
    
    </summary>
    
      <category term="C++" scheme="https://kaaier.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://kaaier.github.io/tags/C/"/>
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>CVPR(Latest paper learning)</title>
    <link href="https://kaaier.github.io/2019/06/15/CVPR(Latest%20paper%20learning)/"/>
    <id>https://kaaier.github.io/2019/06/15/CVPR(Latest paper learning)/</id>
    <published>2019-06-15T03:21:20.000Z</published>
    <updated>2019-08-06T15:56:02.723Z</updated>
    
    <content type="html"><![CDATA[<h5 id="CVPR关于目标检测最新论文-2D目标检测、3D目标检测、视频目标检测"><a href="#CVPR关于目标检测最新论文-2D目标检测、3D目标检测、视频目标检测" class="headerlink" title="CVPR关于目标检测最新论文(2D目标检测、3D目标检测、视频目标检测)."></a>CVPR关于目标检测最新论文(2D目标检测、3D目标检测、视频目标检测).</h5><p>2019-07-24 Update 1 paper</p><p><strong>A Survey of Deep Learning-based Object Detection</strong></p><ul><li><p>intro：From Fast R-CNN to NAS-FPN</p></li><li><p>arXiv：<a href="https://arxiv.org/abs/1907.09408" target="_blank" rel="noopener">https://arxiv.org/abs/1907.09408</a></p></li></ul><p>2019-05-17 Update 1 paper</p> <a id="more"></a><p><strong>Object Detection in 20 Years: A Survey</strong></p><ul><li>intro：This work has been submitted to the IEEE TPAMI for possible publication</li><li>arXiv：<a href="https://arxiv.org/abs/1905.05055" target="_blank" rel="noopener">https://arxiv.org/abs/1905.05055</a></li></ul><p>2019-04-05 Update 1 paper</p><p><strong>Comparison Network for One-Shot Conditional Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1904.02317" target="_blank" rel="noopener">https://arxiv.org/abs/1904.02317</a></li></ul><p>2019-03-05 Update 1 paper</p><p><strong>Feature Selective Anchor-Free Module for Single-Shot Object Detection</strong></p><ul><li>intro: CVPR 2019</li><li>arXiv: <a href="https://arxiv.org/abs/1903.00621" target="_blank" rel="noopener">https://arxiv.org/abs/1903.00621</a></li></ul><p>2019-02-15 Update 3 detection toolbox</p><ul><li><p><a href="https://github.com/facebookresearch/Detectron" target="_blank" rel="noopener">Detectron(FAIR)</a>: Detectron is Facebook AI Research’s software system that implements state-of-the-art object detection algorithms, including <a href="https://arxiv.org/abs/1703.06870" target="_blank" rel="noopener">Mask R-CNN</a>. It is written in Python and powered by the <a href="https://github.com/caffe2/caffe2" target="_blank" rel="noopener">Caffe2</a> deep learning framework.</p></li><li><p><a href="https://github.com/facebookresearch/maskrcnn-benchmark" target="_blank" rel="noopener">maskrcnn-benchmark(FAIR)</a>: Fast, modular reference implementation of Instance Segmentation and Object Detection algorithms in PyTorch.</p></li><li><p><a href="https://github.com/open-mmlab/mmdetection" target="_blank" rel="noopener">mmdetection(SenseTime&amp;CUHK)</a>: mmdetection is an open source object detection toolbox based on PyTorch. It is a part of the open-mmlab project developed by <a href="http://mmlab.ie.cuhk.edu.hk/" target="_blank" rel="noopener">Multimedia Laboratory, CUHK</a>.</p></li></ul><p>2019-01-25 Update 5 papers</p><p><strong>3D Backbone Network for 3D Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1901.08373" target="_blank" rel="noopener">https://arxiv.org/abs/1901.08373</a></li></ul><p><strong>Object Detection based on Region Decomposition and Assembly</strong></p><ul><li><p>intro: AAAI 2019</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1901.08225" target="_blank" rel="noopener">https://arxiv.org/abs/1901.08225</a></p></li></ul><p><strong>Bottom-up Object Detection by Grouping Extreme and Center Points</strong></p><ul><li>intro: one stage 43.2% on COCO test-dev</li><li>arXiv: <a href="https://arxiv.org/abs/1901.08043" target="_blank" rel="noopener">https://arxiv.org/abs/1901.08043</a></li><li>github: <a href="https://github.com/xingyizhou/ExtremeNet" target="_blank" rel="noopener">https://github.com/xingyizhou/ExtremeNet</a></li></ul><p><strong>ORSIm Detector: A Novel Object Detection Framework in Optical Remote Sensing Imagery Using Spatial-Frequency Channel Features</strong></p><ul><li><p>intro: IEEE TRANSACTIONS ON GEOSCIENCE AND REMOTE SENSING</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1901.07925" target="_blank" rel="noopener">https://arxiv.org/abs/1901.07925</a></p></li></ul><p><strong>Consistent Optimization for Single-Shot Object Detection</strong></p><ul><li><p>intro: improves RetinaNet from 39.1 AP to 40.1 AP on COCO datase</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1901.06563" target="_blank" rel="noopener">https://arxiv.org/abs/1901.06563</a></p></li></ul><p>2019-01-15 Update 1 paper</p><p><strong>Learning Pairwise Relationship for Multi-object Detection in Crowded Scenes</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1901.03796" target="_blank" rel="noopener">https://arxiv.org/abs/1901.03796</a></li></ul><p>2019-01-14 Update 1 paper</p><p><strong>RetinaMask: Learning to predict masks improves state-of-the-art single-shot detection for free</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1901.03353" target="_blank" rel="noopener">https://arxiv.org/abs/1901.03353</a></li><li>github: <a href="https://github.com/chengyangfu/retinamask" target="_blank" rel="noopener">https://github.com/chengyangfu/retinamask</a></li></ul><p>2019-01-12 Update 1 paper</p><p><strong>Region Proposal by Guided Anchoring</strong></p><ul><li>intro: CUHK - SenseTime Joint Lab</li><li>arXiv: <a href="https://arxiv.org/abs/1901.03278" target="_blank" rel="noopener">https://arxiv.org/abs/1901.03278</a></li></ul><p>2019-01-08 Update 1 paper</p><p><strong>Scale-Aware Trident Networks for Object Detection</strong></p><ul><li>intro: mAP of <strong>48.4</strong> on the COCO dataset</li><li>arXiv: <a href="https://arxiv.org/abs/1901.01892" target="_blank" rel="noopener">https://arxiv.org/abs/1901.01892</a></li></ul><p>2019-01-04 Update 1 paper</p><p><strong>Large-Scale Object Detection of Images from Network Cameras in Variable Ambient Lighting Conditions</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.11901" target="_blank" rel="noopener">https://arxiv.org/abs/1812.11901</a></li></ul><p>2018-12-13 Update 1 paper</p><p><strong>Strong-Weak Distribution Alignment for Adaptive Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.04798" target="_blank" rel="noopener">https://arxiv.org/abs/1812.04798</a></li></ul><p>2018-12-05 Update 3 papers</p><p><strong>AutoFocus: Efficient Multi-Scale Inference</strong></p><ul><li>intro: AutoFocus obtains an <strong>mAP of 47.9%</strong> (68.3% at 50% overlap) on the <strong>COCO test-dev</strong> set while processing <strong>6.4 images per second on a Titan X (Pascal) GPU</strong> </li><li>arXiv: <a href="https://arxiv.org/abs/1812.01600" target="_blank" rel="noopener">https://arxiv.org/abs/1812.01600</a></li></ul><p><strong>NOTE-RCNN: NOise Tolerant Ensemble RCNN for Semi-Supervised Object Detection</strong></p><ul><li>intro: Google Could</li><li>arXiv: <a href="https://arxiv.org/abs/1812.00124" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00124</a></li></ul><p><strong>SPLAT: Semantic Pixel-Level Adaptation Transforms for Detection</strong></p><ul><li>intro: UC Berkeley</li><li>arXiv: <a href="https://arxiv.org/abs/1812.00929" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00929</a></li></ul><p>2018-12-04 Update 10 papers</p><p><strong>Grid R-CNN</strong></p><ul><li>intro: SenseTime</li><li>arXiv: <a href="https://arxiv.org/abs/1811.12030" target="_blank" rel="noopener">https://arxiv.org/abs/1811.12030</a></li></ul><p><strong>Deformable ConvNets v2: More Deformable, Better Results</strong></p><ul><li><p>intro: Microsoft Research Asia</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1811.11168" target="_blank" rel="noopener">https://arxiv.org/abs/1811.11168</a></p></li></ul><p><strong>Anchor Box Optimization for Object Detection</strong></p><ul><li>intro: Microsoft Research</li><li>arXiv: <a href="https://arxiv.org/abs/1812.00469" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00469</a></li></ul><p><strong>Efficient Coarse-to-Fine Non-Local Module for the Detection of Small Objects</strong></p><ul><li>intro: <a href="https://arxiv.org/abs/1811.12152" target="_blank" rel="noopener">https://arxiv.org/abs/1811.12152</a></li></ul><p><strong>NOTE-RCNN: NOise Tolerant Ensemble RCNN for Semi-Supervised Object Detection</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.00124" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00124</a></li></ul><p><strong>Learning RoI Transformer for Detecting Oriented Objects in Aerial Images</strong></p><ul><li>arXiv: <a href="https://arxiv.org/abs/1812.00155" target="_blank" rel="noopener">https://arxiv.org/abs/1812.00155</a></li></ul><p><strong>Integrated Object Detection and Tracking with Tracklet-Conditioned Detection</strong></p><ul><li>intro: Microsoft Research Asia</li><li>arXiv: <a href="https://arxiv.org/abs/1811.11167" target="_blank" rel="noopener">https://arxiv.org/abs/1811.11167</a></li></ul><p><strong>Deep Regionlets: Blended Representation and Deep Learning for Generic Object Detection</strong></p><ul><li><p>arXiv: <a href="https://arxiv.org/abs/1811.11318" target="_blank" rel="noopener">https://arxiv.org/abs/1811.11318</a></p><p><strong>Gradient Harmonized Single-stage Detector</strong></p></li><li><p>intro: AAAI 2019</p></li><li><p>arXiv: <a href="https://arxiv.org/abs/1811.05181" target="_blank" rel="noopener">https://arxiv.org/abs/1811.05181</a></p></li></ul><p><strong>CFENet: Object Detection with Comprehensive Feature Enhancement Module</strong></p><ul><li>intro: ACCV 2018</li><li>github: <a href="https://github.com/qijiezhao/CFENet" target="_blank" rel="noopener">https://github.com/qijiezhao/CFENet</a></li></ul><p>2018-11-19</p><p><strong>DeRPN: Taking a further step toward more general object detection</strong></p><ul><li>intro: AAAI 2019</li><li>arXiv: <a href="https://arxiv.org/abs/1811.06700" target="_blank" rel="noopener">https://arxiv.org/abs/1811.06700</a></li><li>github: <a href="https://github.com/HCIILAB/DeRPN" target="_blank" rel="noopener">https://github.com/HCIILAB/DeRPN</a></li></ul><p>2018-11-14</p><p><strong>M2Det: A Single-Shot Object Detector based on Multi-Level Feature Pyramid Network</strong></p><ul><li>intro: AAAI 2019</li><li>arXiv: <a href="https://arxiv.org/abs/1811.04533" target="_blank" rel="noopener">https://arxiv.org/abs/1811.04533</a></li><li>github: <a href="https://github.com/qijiezhao/M2Det" target="_blank" rel="noopener">https://github.com/qijiezhao/M2Det</a></li></ul><p>2018-10-31</p><p><strong>Hybrid Knowledge Routed Modules for Large-scale Object Detection</strong></p><ul><li>intro: Sun Yat-Sen University &amp; Huawei Noah’s Ark Lab</li><li>arXiv: <a href="https://arxiv.org/abs/1810.12681" target="_blank" rel="noopener">https://arxiv.org/abs/1810.12681</a></li><li>github: <a href="https://github.com/chanyn/HKRM" target="_blank" rel="noopener">https://github.com/chanyn/HKRM</a></li></ul><p>2018-10-08</p><p><strong>Weakly Supervised Object Detection in Artworks</strong></p><ul><li>intro: ECCV 2018 Workshop Computer Vision for Art Analysis</li><li>arXiv: <a href="https://arxiv.org/abs/1810.02569" target="_blank" rel="noopener">https://arxiv.org/abs/1810.02569</a></li><li>Datasets: <a href="https://wsoda.telecom-paristech.fr/downloads/dataset/IconArt_v1.zip" target="_blank" rel="noopener">https://wsoda.telecom-paristech.fr/downloads/dataset/IconArt_v1.zip</a></li></ul><p><strong>Cross-Domain Weakly-Supervised Object Detection through Progressive Domain Adaptation</strong></p><ul><li>intro: CVPR 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1803.11365" target="_blank" rel="noopener">https://arxiv.org/abs/1803.11365</a></li><li>homepage: <a href="https://naoto0804.github.io/cross_domain_detection/" target="_blank" rel="noopener">https://naoto0804.github.io/cross_domain_detection/</a></li><li>paper: <a href="http://openaccess.thecvf.com/content_cvpr_2018/html/Inoue_Cross-Domain_Weakly-Supervised_Object_CVPR_2018_paper.html" target="_blank" rel="noopener">http://openaccess.thecvf.com/content_cvpr_2018/html/Inoue_Cross-Domain_Weakly-Supervised_Object_CVPR_2018_paper.html</a></li><li>github: <a href="https://github.com/naoto0804/cross-domain-detection" target="_blank" rel="noopener">https://github.com/naoto0804/cross-domain-detection</a></li></ul><p>2018-09-26</p><p><strong>Object Detection from Scratch with Deep Supervision</strong></p><ul><li>intro: This is an extended version of DSOD</li><li>arXiv: <a href="https://arxiv.org/abs/1809.09294" target="_blank" rel="noopener">https://arxiv.org/abs/1809.09294</a></li></ul><p>2018-09-25</p><p><strong>《Softer-NMS: Rethinking Bounding Box Regression for Accurate Object Detection》</strong></p><ul><li>intro: CMU &amp; Face++</li><li>arXiv: <a href="https://arxiv.org/abs/1809.08545" target="_blank" rel="noopener">https://arxiv.org/abs/1809.08545</a></li><li>github: <a href="https://github.com/yihui-he/softer-NMS" target="_blank" rel="noopener">https://github.com/yihui-he/softer-NMS</a></li></ul><p>2018-09-21</p><p><strong>《Receptive Field Block Net for Accurate and Fast Object Detection》</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1711.07767" target="_blank" rel="noopener">https://arxiv.org/abs/1711.07767</a></li><li>github: <a href="https://github.com/ruinmessi/RFBNet" target="_blank" rel="noopener">https://github.com/ruinmessi/RFBNet</a></li></ul><p>2018-09-11</p><p><strong>《Recent Advances in Object Detection in the Age of Deep Convolutional Neural Networks》</strong></p><ul><li>intro: awesome</li></ul><ul><li>arXiv: <a href="https://arxiv.org/abs/1809.03193" target="_blank" rel="noopener">https://arxiv.org/abs/1809.03193</a></li></ul><p>2018-09-10</p><p><strong>《Deep Learning for Generic Object Detection: A Survey》</strong></p><ul><li>intro: Submitted to IJCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1809.02165" target="_blank" rel="noopener">https://arxiv.org/abs/1809.02165</a></li></ul><p>2018-08-27</p><p><strong>Deep Feature Pyramid Reconfiguration for Object Detection</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1808.07993" target="_blank" rel="noopener">https://arxiv.org/abs/1808.07993</a></li></ul><p>2018-08-17</p><p><strong>R3-Net: A Deep Network for Multi-oriented Vehicle Detection in Aerial Images and Videos</strong></p><ul><li>arxiv: <a href="https://arxiv.org/abs/1808.05560" target="_blank" rel="noopener">https://arxiv.org/abs/1808.05560</a></li><li>youtube: <a href="https://youtu.be/xCYD-tYudN0" target="_blank" rel="noopener">https://youtu.be/xCYD-tYudN0</a></li></ul><p>2018-08-14</p><p><strong>《Unsupervised Hard Example Mining from Videos for Improved Object Detection》</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1808.04285" target="_blank" rel="noopener">https://arxiv.org/abs/1808.04285</a></li></ul><p>2018-08-10</p><p><strong>CornerNet: Detecting Objects as Paired Keypoints</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1808.01244" target="_blank" rel="noopener">https://arxiv.org/abs/1808.01244</a></li></ul><p>2018-07-30</p><p><strong>Acquisition of Localization Confidence for Accurate Object Detection</strong></p><ul><li>intro: ECCV 2018</li><li>arXiv: <a href="https://arxiv.org/abs/1807.11590" target="_blank" rel="noopener">https://arxiv.org/abs/1807.11590</a></li><li>github: <a href="https://github.com/vacancy/PreciseRoIPooling" target="_blank" rel="noopener">https://github.com/vacancy/PreciseRoIPooling</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;CVPR关于目标检测最新论文-2D目标检测、3D目标检测、视频目标检测&quot;&gt;&lt;a href=&quot;#CVPR关于目标检测最新论文-2D目标检测、3D目标检测、视频目标检测&quot; class=&quot;headerlink&quot; title=&quot;CVPR关于目标检测最新论文(2D目标检测、3D目标检测、视频目标检测).&quot;&gt;&lt;/a&gt;CVPR关于目标检测最新论文(2D目标检测、3D目标检测、视频目标检测).&lt;/h5&gt;&lt;p&gt;2019-07-24 Update 1 paper&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Survey of Deep Learning-based Object Detection&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;intro：From Fast R-CNN to NAS-FPN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;arXiv：&lt;a href=&quot;https://arxiv.org/abs/1907.09408&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://arxiv.org/abs/1907.09408&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2019-05-17 Update 1 paper&lt;/p&gt;
    
    </summary>
    
      <category term="Computer-Vision" scheme="https://kaaier.github.io/categories/Computer-Vision/"/>
    
    
      <category term="CV" scheme="https://kaaier.github.io/tags/CV/"/>
    
      <category term="Object-Detection" scheme="https://kaaier.github.io/tags/Object-Detection/"/>
    
  </entry>
  
  <entry>
    <title>面试</title>
    <link href="https://kaaier.github.io/2019/06/15/%E9%9D%A2%E8%AF%95/"/>
    <id>https://kaaier.github.io/2019/06/15/面试/</id>
    <published>2019-06-15T03:21:20.000Z</published>
    <updated>2019-08-11T13:02:26.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="知识点积累"><a href="#知识点积累" class="headerlink" title="知识点积累"></a>知识点积累</h1><h2 id="KDXF"><a href="#KDXF" class="headerlink" title="KDXF"></a>KDXF</h2><ul><li><p>1.PCA原理，LDA的区别</p></li><li><p>2.梯度爆炸，梯度消失，<strong>参数初始化</strong>。</p></li></ul><table><thead><tr><th>Project</th><th>Question</th></tr></thead><tbody><tr><td>一</td><td>Faster RCNN中的anchor box(YOLO/SSD)、anchor怎么理解</td></tr><tr><td>二</td><td>剪枝原理</td></tr><tr><td>三</td><td>数据是否归一化操作、距离度量后。</td></tr></tbody></table>  <a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;知识点积累&quot;&gt;&lt;a href=&quot;#知识点积累&quot; class=&quot;headerlink&quot; title=&quot;知识点积累&quot;&gt;&lt;/a&gt;知识点积累&lt;/h1&gt;&lt;h2 id=&quot;KDXF&quot;&gt;&lt;a href=&quot;#KDXF&quot; class=&quot;headerlink&quot; title=&quot;KDXF&quot;&gt;&lt;/a&gt;KDXF&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.PCA原理，LDA的区别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.梯度爆炸，梯度消失，&lt;strong&gt;参数初始化&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Project&lt;/th&gt;
&lt;th&gt;Question&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;一&lt;/td&gt;
&lt;td&gt;Faster RCNN中的anchor box(YOLO/SSD)、anchor怎么理解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二&lt;/td&gt;
&lt;td&gt;剪枝原理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三&lt;/td&gt;
&lt;td&gt;数据是否归一化操作、距离度量后。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="Kaaier" scheme="https://kaaier.github.io/categories/Kaaier/"/>
    
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
      <category term="Kaaier" scheme="https://kaaier.github.io/tags/Kaaier/"/>
    
  </entry>
  
  <entry>
    <title>Non-Maximum-Suppression</title>
    <link href="https://kaaier.github.io/2019/05/25/NMS/"/>
    <id>https://kaaier.github.io/2019/05/25/NMS/</id>
    <published>2019-05-24T17:22:11.000Z</published>
    <updated>2019-08-06T16:13:58.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Non-Maximum-Suppression"><a href="#Non-Maximum-Suppression" class="headerlink" title="Non-Maximum-Suppression"></a>Non-Maximum-Suppression</h1><p><strong>非极大值抑制（Non-Maximum-Suppression，NMS）</strong>是抑制非极大值的元素，可以理解为局部最大搜索。NMS算法在计算机视觉中有广泛应用，特别是目标检测领域。本文将以目标检测举例，讨论NMS算法的实现过程。</p><p>TODO:</p><p>记录关于NMS的相关实现以及SoftNMS等目标检测后处理方法</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.vision.ee.ethz.ch/publications/papers/proceedings/eth_biwi_00446.pdf" target="_blank" rel="noopener">《Efficient Non-Maximum Suppression》</a></li><li><a href="https://www.cnblogs.com/makefile/p/nms.html" target="_blank" rel="noopener">非极大值抑制（Non-Maximum Suppression，NMS）</a></li><li><a href="https://blog.csdn.net/shuzfan/article/details/52711706" target="_blank" rel="noopener">NMS——非极大值抑制</a></li><li><a href="https://blog.csdn.net/danieljianfeng/article/details/43084875" target="_blank" rel="noopener">非极大抑制（Non-Maximum Suppression）</a></li><li><a href="https://zh.coursera.org/lecture/convolutional-neural-networks/non-max-suppression-dvrjH" target="_blank" rel="noopener">吴恩达（Non-max Suppression）视频</a></li><li><a href="https://www.pyimagesearch.com/2014/11/17/non-maximum-suppression-object-detection-python/" target="_blank" rel="noopener">Non-Maximum Suppression for Object Detection in Python</a></li><li><a href="http://noahsnail.com/2017/12/13/2017-12-13-非极大值抑制(Non-Maximum%20Suppression)/" target="_blank" rel="noopener">非极大值抑制(Non-Maximum Suppression)</a></li><li><a href="https://github.com/watersink/nonMaximumSuppression" target="_blank" rel="noopener">nonMaximumSuppression</a>：非极大值抑制，包含了matlab，c,，c++，3种实现的代码</li><li><a href="https://github.com/Nuzhny007/Non-Maximum-Suppression" target="_blank" rel="noopener">Non-Maximum-Suppression</a>：C++实现</li><li><a href="https://github.com/SnailTyan/deep-learning-tools" target="_blank" rel="noopener">deep-learning-tools</a>：Python实现</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Non-Maximum-Suppression&quot;&gt;&lt;a href=&quot;#Non-Maximum-Suppression&quot; class=&quot;headerlink&quot; title=&quot;Non-Maximum-Suppression&quot;&gt;&lt;/a&gt;Non-Maximum-Suppr
      
    
    </summary>
    
      <category term="Computer-Vision" scheme="https://kaaier.github.io/categories/Computer-Vision/"/>
    
    
      <category term="Object-Detection" scheme="https://kaaier.github.io/tags/Object-Detection/"/>
    
      <category term="Computer-Vision" scheme="https://kaaier.github.io/tags/Computer-Vision/"/>
    
  </entry>
  
  <entry>
    <title>操作系统知识点积累</title>
    <link href="https://kaaier.github.io/2019/04/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://kaaier.github.io/2019/04/16/操作系统/</id>
    <published>2019-04-16T01:41:50.000Z</published>
    <updated>2019-08-07T00:20:22.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><blockquote><p>面向进程和线程学习操作系统。</p></blockquote><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><table><thead><tr><th align="center">Chapter 1</th><th align="center">Chapter 2</th><th align="center">Chapter 3</th><th align="center">Chapter 4</th><th align="center">Chapter 5</th></tr></thead><tbody><tr><td align="center"><a href="#thread">进程线程模型</a></td><td align="center"><a href="#con">进程间通信</a></td><td align="center"><a href="#mutex">同步互斥机制</a></td><td align="center"><a href="#mem">存储管理</a></td><td align="center"><a href="#netio">网络I/O模型</a></td></tr></tbody></table><hr><pre><code>&lt;!-- more --&gt;</code></pre><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h3 id="进程线程模型"><a href="#进程线程模型" class="headerlink" title="进程线程模型"></a><span id="thread">进程线程模型</span></h3><p>线程和进程的概念已经在操作系统书中被翻来覆去讲了很多遍。很多概念虽然都是套话，但没能理解透其中深意会导致很多内容理解不清晰。对于进程和线程的理解和把握可以说基本奠定了对系统的认知和把控能力。其核心意义绝不仅仅是“线程是调度的基本单位，进程是资源分配的基本单位”这么简单。</p><p><strong>多线程</strong></p><p>我们这里讨论的是用户态的多线程模型，同一个进程内部有多个线程，所有的线程共享同一个进程的内存空间，进程中定义的全局变量会被虽有的线程共享，比如有全局变量int i = 10，这一进程中所有并发运行的线程都可以读取和修改这个i的值，而多个线程被CPU调度的顺序又是不可控的，所以对临界资源的访问尤其需要注意安全。我们必须知道，做一次简单的i = i + 1在计算机中并不是原子操作，涉及内存取数，计算和写入内存几个环节，而线程的切换有可能发生在上述任何一个环节中间，所以不同的操作顺序很有可能带来意想不到的结果。</p><p>但是，虽然线程在安全性方面会引入许多新挑战，但是线程带来的好处也是有目共睹的。首先，原先顺序执行的程序（暂时不考虑多进程）可以被拆分成几个独立的逻辑流，这些逻辑流可以独立完成一些任务（最好这些任务是不相关的）。比如QQ可以一个线程处理聊天一个线程处理上传文件，两个线程互不干涉，在用户看来是同步在执行两个任务，试想如果线性完成这个任务的话，在数据传输完成之前用户聊天被一直阻塞会是多么尴尬的情况。</p><p>对于线程，我认为弄清以下两点非常重要：</p><ul><li><p>线程之间有无先后访问顺序（线程依赖关系）</p></li><li><p>多个线程共享访问同一变量（同步互斥问题）</p></li></ul><p>另外，我们通常只会去说同一进程的多个线程共享进程的资源，但是每个线程特有的部分却很少提及，除了标识线程的tid，每个线程还有自己独立的栈空间，线程彼此之间是无法访问其他线程栈上内容的。而作为处理机调度的最小单位，线程调度只需要保存线程栈、寄存器数据和PC即可，相比进程切换开销要小很多。</p><p>线程相关接口不少，主要需要了解各个参数意义和返回值意义。</p><ol><li><p>线程创建和结束</p><ul><li><p>背景知识：</p><p>  在一个文件内的多个函数通常都是按照main函数中出现的顺序来执行，但是在分时系统下，我们可以让每个函数都作为一个逻辑流并发执行，最简单的方式就是采用多线程策略。在main函数中调用多线程接口创建线程，每个线程对应特定的函数（操作），这样就可以不按照main函数中各个函数出现的顺序来执行，避免了忙等的情况。线程基本操作的接口如下。</p></li><li><p>相关接口：</p><ul><li><p>创建线程：int pthread_create(pthread_t <em>pthread, const pthread_attr_t *attr, void *(</em>start_routine)(void *), void *agr);</p><p>  创建一个新线程，pthread和start_routine不可或缺，分别用于标识线程和执行体入口，其他可以填NULL。</p><ul><li><p>pthread：用来返回线程的tid，*pthread值即为tid，类型pthread_t == unsigned long int。</p></li><li><p>attr：指向线程属性结构体的指针，用于改变所创线程的属性，填NULL使用默认值。</p></li><li><p>start_routine：线程执行函数的首地址，传入函数指针。</p></li><li><p>arg：通过地址传递来传递函数参数，这里是无符号类型指针，可以传任意类型变量的地址，在被传入函数中先强制类型转换成所需类型即可。</p></li></ul></li><li><p>获得线程ID：pthread_t pthread_self();</p><p>  调用时，会打印线程ID。</p></li><li><p>等待线程结束：int pthread_join(pthread_t tid, void** retval);</p><p>  主线程调用，等待子线程退出并回收其资源，类似于进程中wait/waitpid回收僵尸进程，调用pthread_join的线程会被阻塞。</p><ul><li><p>tid：创建线程时通过指针得到tid值。</p></li><li><p>retval：指向返回值的指针。</p></li></ul></li><li><p>结束线程：pthread_exit(void *retval);</p><p>  子线程执行，用来结束当前线程并通过retval传递返回值，该返回值可通过pthread_join获得。</p><ul><li>retval：同上。</li></ul></li><li><p>分离线程：int pthread_detach(pthread_t tid);</p><p>  主线程、子线程均可调用。主线程中pthread_detach(tid)，子线程中pthread_detach(pthread_self())，调用后和主线程分离，子线程结束时自己立即回收资源。</p><ul><li>tid：同上。</li></ul></li></ul></li></ul></li><li><p>线程属性值修改</p><ul><li><p>背景知识：</p><p>  线程属性对象类型为pthread_attr_t，结构体定义如下：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> etachstate;    <span class="comment">// 线程分离的状态</span></span><br><span class="line">    <span class="keyword">int</span> schedpolicy;    <span class="comment">// 线程调度策略</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">schedparam</span>;</span>    <span class="comment">// 线程的调度参数</span></span><br><span class="line">    <span class="keyword">int</span> inheritsched;    <span class="comment">// 线程的继承性</span></span><br><span class="line">    <span class="keyword">int</span> scope;    <span class="comment">// 线程的作用域</span></span><br><span class="line">    <span class="comment">// 以下为线程栈的设置</span></span><br><span class="line">    <span class="keyword">size_t</span> guardsize;    <span class="comment">// 线程栈末尾警戒缓冲大小</span></span><br><span class="line">    <span class="keyword">int</span> stackaddr_set;    <span class="comment">// 线程的栈设置</span></span><br><span class="line">    <span class="keyword">void</span> *    stackaddr;    <span class="comment">// 线程栈的位置</span></span><br><span class="line">    <span class="keyword">size_t</span> stacksize;    <span class="comment">// 线程栈大小</span></span><br><span class="line">&#125;<span class="keyword">pthread_arrt_t</span>;</span><br></pre></td></tr></table></figure></li><li><p>相关接口：</p><p>  对上述结构体中各参数大多有：pthread_attr_get<strong><em>()和pthread_attr_set</em></strong>()系统调用函数来设置和获取。这里不一一罗列。</p></li></ul></li><li><p>线程同步</p><ul><li><a href="#mutex">详见同步互斥专题</a></li></ul></li></ol><p><strong>多进程</strong></p><p>每一个进程是资源分配的基本单位。进程结构由以下几个部分组成：代码段、堆栈段、数据段。代码段是静态的二进制代码，多个程序可以共享。实际上在父进程创建子进程之后，父、子进程除了pid外，几乎所有的部分几乎一样，子进程创建时拷贝父进程PCB中大部分内容，而PCB的内容实际上是各种数据、代码的地址或索引表地址，所以复制了PCB中这些指针实际就等于获取了全部父进程可访问数据。所以简单来说，创建新进程需要复制整个PCB，之后操作系统将PCB添加到进程核心堆栈底部，这样就可以被操作系统感知和调度了。</p><p>父、子进程共享全部数据，但并不是说他们就是对同一块数据进行操作，子进程在读写数据时会通过写时复制机制将公共的数据重新拷贝一份，之后在拷贝出的数据上进行操作。如果子进程想要运行自己的代码段，还可以通过调用execv()函数重新加载新的代码段，之后就和父进程独立开了。我们在shell中执行程序就是通过shell进程先fork()一个子进程再通过execv()重新加载新的代码段的过程。</p><ol><li><p>进程创建与结束</p><ul><li><p>背景知识：</p><p>  进程有两种创建方式，一种是操作系统创建的一种是父进程创建的。从计算机启动到终端执行程序的过程为：0号进程 -&gt; 1号内核进程 -&gt; 1号用户进程(init进程) -&gt; getty进程 -&gt; shell进程 -&gt; 命令行执行进程。所以我们在命令行中通过 ./program执行可执行文件时，所有创建的进程都是shell进程的子进程，这也就是为什么shell一关闭，在shell中执行的进程都自动被关闭的原因。从shell进程到创建其他子进程需要通过以下接口。</p></li><li><p>相关接口：</p><ul><li><p>创建进程：pid_t fork(void);</p><p>  返回值：出错返回-1；父进程中返回pid &gt; 0；子进程中pid == 0</p></li><li><p>结束进程：void exit(int status);</p><ul><li>status是退出状态，保存在全局变量中S?，通常0表示正常退出。</li></ul></li><li><p>获得PID：pid_t getpid(void);</p><p>  返回调用者pid。</p></li><li><p>获得父进程PID：pid_t getppid(void);</p><p>  返回父进程pid。</p></li></ul></li><li><p>其他补充：</p><ul><li><p>正常退出方式：exit()、_exit()、return（在main中）。</p><p>  exit()和_exit()区别：exit()是对_exit()的封装，都会终止进程并做相关收尾工作，最主要的区别是_exit()函数关闭全部描述符和清理函数后不会刷新流，但是exit()会在调用_exit()函数前刷新数据流。</p><p>  return和exit()区别：exit()是函数，但有参数，执行完之后控制权交给系统。return若是在调用函数中，执行完之后控制权交给调用进程，若是在main函数中，控制权交给系统。</p></li><li><p>异常退出方式：abort()、终止信号。</p></li></ul></li></ul></li><li><p>僵尸进程、孤儿进程</p><ul><li><p>背景知识：</p><p>  父进程在调用fork接口之后和子进程已经可以独立开，之后父进程和子进程就以未知的顺序向下执行（异步过程）。所以父进程和子进程都有可能先执行完。当父进程先结束，子进程此时就会变成孤儿进程，不过这种情况问题不大，孤儿进程会自动向上被init进程收养，init进程完成对状态收集工作。而且这种过继的方式也是守护进程能够实现的因素。如果子进程先结束，父进程并未调用wait或者waitpid获取进程状态信息，那么子进程描述符就会一直保存在系统中，这种进程称为僵尸进程。</p></li><li><p>相关接口：</p><ul><li><p>回收进程（1）：pid_t wait(int *status);</p><p>  一旦调用wait()，就会立即阻塞自己，wait()自动分析某个子进程是否已经退出，如果找到僵尸进程就会负责收集和销毁，如果没有找到就一直阻塞在这里。</p><ul><li>status：指向子进程结束状态值。</li></ul><ul><li><p>回收进程（2）：pid_t waitpid(pid_t pid, int *status, int options);</p><p> 返回值：返回pid：返回收集的子进程id。返回-1：出错。返回0：没有被手机的子进程。</p><ul><li><p>pid：子进程识别码，控制等待哪些子进程。</p><ol><li><p>pid &lt; -1，等待进程组识别码为pid绝对值的任何进程。</p></li><li><p>pid = -1，等待任何子进程。</p></li><li><p>pid = 0，等待进程组识别码与目前进程相同的任何子进程。</p></li><li><p>pid &gt; 0，等待任何子进程识别码为pid的子进程。</p></li></ol></li><li><p>status：指向返回码的指针。</p></li><li><p>options：选项决定父进程调用waitpid后的状态。</p><ol><li><p>options = WNOHANG，即使没有子进程退出也会立即返回。</p></li><li><p>options = WUNYRACED，子进程进入暂停马上返回，但结束状态不予理会。</p></li></ol></li></ul></li></ul></li></ul></li></ul></li><li><p>守护进程</p><ul><li><p>背景知识：</p><p>守护进程是脱离终端并在后台运行的进程，执行过程中信息不会显示在终端上并且也不会被终端发出的信号打断。</p></li><li><p>操作步骤：</p><ul><li><p>创建子进程，父进程退出：fork() + if(pid &gt; 0){exit(0);}，使子进程称为孤儿进程被init进程收养。</p></li><li><p>在子进程中创建新会话：setsid()。</p></li><li><p>改变当前目录结构为根：chdir(“/“)。</p></li><li><p>重设文件掩码：umask(0)。</p></li><li><p>关闭文件描述符：for(int i = 0; i &lt; 65535; ++i){close(i);}。</p></li></ul></li></ul></li><li><p>Linux进程控制</p></li></ol><ul><li><p>进程地址空间（地址空间）</p><p>  虚拟存储器为每个进程提供了独占系统地址空间的假象。尽管每个进程地址空间内容不尽相同，但是他们的都有相似的结构。X86 Linux进程的地址空间底部是保留给用户程序的，包括文本、数据、堆、栈等，其中文本区和数据区是通过存储器映射方式将磁盘中可执行文件的相应段映射至虚拟存储器地址空间中。有一些”敏感”的地址需要注意下，对于32位进程来说，代码段从0x08048000开始。从0xC0000000开始到0xFFFFFFFF是内核地址空间，通常情况下代码运行在用户态（使用0x00000000 ~ 0xC00000000的用户地址空间），当发生系统调用、进程切换等操作时CPU控制寄存器设置模式位，进入内和模式，在该状态（超级用户模式）下进程可以访问全部存储器位置和执行全部指令。也就说32位进程的地址空间都是4G，但用户态下只能访问低3G的地址空间，若要访问3G ~ 4G的地址空间则只有进入内核态才行。</p></li><li><p>进程控制块（处理机）</p><p>  进程的调度实际就是内核选择相应的进程控制块，被选择的进程控制块中包含了一个进程基本的信息。</p></li><li><p>上下文切换</p><p>  内核管理所有进程控制块，而进程控制块记录了进程全部状态信息。每一次进程调度就是一次上下文切换，所谓的上下文本质上就是当前运行状态，主要包括通用寄存器、浮点寄存器、状态寄存器、程序计数器、用户栈和内核数据结构（页表、进程表、文件表）等。进程执行时刻，内核可以决定抢占当前进程并开始新的进程，这个过程由内核调度器完成，当调度器选择了某个进程时称为该进程被调度，该过程通过上下文切换来改变当前状态。一次完整的上下文切换通常是进程原先运行于用户态，之后因系统调用或时间片到切换到内核态执行内核指令，完成上下文切换后回到用户态，此时已经切换到进程B。</p></li></ul><p><strong>线程、进程比较</strong></p><p>关于进程和线程的区别这里就不一一罗列了，主要对比下线程和进程操作中主要的接口。</p><ul><li><p>fork()和pthread_create()</p><p>  负责创建。调用fork()后返回两次，一次标识主进程一次标识子进程；调用pthread_create()后得到一个可以独立执行的线程。</p></li><li><p>wait()和pthread_join()</p><p>  负责回收。调用wait()后父进程阻塞；调用pthread_join()后主线程阻塞。</p></li><li><p>exit()和pthread_exit()</p><p>  负责退出。调用exit()后调用进程退出，控制权交给系统；调用pthread_exit()后线程退出，控制权交给主线程。</p></li></ul><hr><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a><span id="con">进程间通信</span></h3><p>Linux几乎支持全部UNIX进程间通信方法，包括管道（有名管道和无名管道）、消息队列、共享内存、信号量和套接字。其中前四个属于同一台机器下进程间的通信，套接字则是用于网络通信。</p><p><strong>管道</strong></p><ul><li><p>无名管道</p><ul><li><p>无名管道特点：</p><ul><li><p>无名管道是一种特殊的文件，这种文件只存在于内存中。</p></li><li><p>无名管道只能用于父子进程或兄弟进程之间，必须用于具有亲缘关系的进程间的通信。</p></li><li><p>无名管道只能由一端向另一端发送数据，是半双工方式，如果双方需要同时收发数据需要两个管道。</p></li></ul></li><li><p>相关接口：</p><ul><li><p>int pipe(int fd[2]);</p><ul><li>fd[2]：管道两端用fd[0]和fd[1]来描述，读的一端用fd[0]表示，写的一端用fd[1]表示。通信双方的进程中写数据的一方需要把fd[0]先close掉，读的一方需要先把fd[1]给close掉。</li></ul></li></ul></li></ul></li><li><p>有名管道：</p><ul><li><p>有名管道特点：</p><ul><li><p>有名管道是FIFO文件，存在于文件系统中，可以通过文件路径名来指出。</p></li><li><p>无名管道可以在不具有亲缘关系的进程间进行通信。</p></li></ul></li><li><p>相关接口：</p><ul><li><p>int mkfifo(const char *pathname, mode_t mode);</p><ul><li><p>pathname：即将创建的FIFO文件路径，如果文件存在需要先删除。</p></li><li><p>mode：和open()中的参数相同。</p></li></ul></li></ul></li></ul></li></ul><p><strong>消息队列</strong></p><p><strong>共享内存</strong></p><p>进程可以将同一段共享内存连接到它们自己的地址空间，所有进程都可以访问共享内存中的地址，如果某个进程向共享内存内写入数据，所做的改动将立即影响到可以访问该共享内存的其他所有进程。</p><ul><li><p>相关接口</p><ul><li><p>创建共享内存：int shmget(key_t key, int size, int flag);</p><p>  成功时返回一个和key相关的共享内存标识符，失败范湖范围-1。</p><ul><li><p>key：为共享内存段命名，多个共享同一片内存的进程使用同一个key。</p></li><li><p>size：共享内存容量。</p></li><li><p>flag：权限标志位，和open的mode参数一样。</p></li></ul></li><li><p>连接到共享内存地址空间：void *shmat(int shmid, void *addr, int flag);</p><p>  返回值即共享内存实际地址。</p><ul><li><p>shmid：shmget()返回的标识。</p></li><li><p>addr：决定以什么方式连接地址。</p></li><li><p>flag：访问模式。</p></li></ul></li><li><p>从共享内存分离：int shmdt(const void *shmaddr);</p><p>  调用成功返回0，失败返回-1。</p><ul><li>shmaddr：是shmat()返回的地址指针。</li></ul></li></ul></li><li><p>其他补充</p><p>  共享内存的方式像极了多线程中线程对全局变量的访问，大家都对等地有权去修改这块内存的值，这就导致在多进程并发下，最终结果是不可预期的。所以对这块临界区的访问需要通过信号量来进行进程同步。</p><p>  但共享内存的优势也很明显，首先可以通过共享内存进行通信的进程不需要像无名管道一样需要通信的进程间有亲缘关系。其次内存共享的速度也比较快，不存在读取文件、消息传递等过程，只需要到相应映射到的内存地址直接读写数据即可。</p></li></ul><p><strong>信号量</strong></p><p>在提到共享内存方式时也提到，进程共享内存和多线程共享全局变量非常相似。所以在使用内存共享的方式是也需要通过信号量来完成进程间同步。多线程同步的信号量是POSIX信号量，<br>而在进程里使用SYSTEM  V信号量。</p><ul><li><p>相关接口</p><ul><li><p>创建信号量：int semget(key_t key, int nsems, int semflag);</p><p>  创建成功返回信号量标识符，失败返回-1。</p><ul><li><p>key：进程pid。</p></li><li><p>nsems：创建信号量的个数。</p></li><li><p>semflag：指定信号量读写权限。</p></li></ul></li><li><p>改变信号量值：int semop(int semid, struct sembuf *sops, unsigned nsops);</p><p>  我们所需要做的主要工作就是串讲sembuf变量并设置其值，然后调用semop，把设置好的sembuf变量传递进去。</p><p>  struct sembuf结构体定义如下：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span>&#123;</span></span><br><span class="line">    <span class="keyword">short</span> sem_num;</span><br><span class="line">    <span class="keyword">short</span> sem_op;</span><br><span class="line">    <span class="keyword">short</span> sem_flg;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  成功返回信号量标识符，失败返回-1。</p><ul><li><p>semid：信号量集标识符，由semget()函数返回。</p></li><li><p>sops：指向struct sembuf结构的指针，先设置好sembuf值再通过指针传递。</p></li><li><p>nsops：进行操作信号量的个数，即sops结构变量的个数，需大于或等于1。最常见设置此值等于1，只完成对一个信号量的操作。</p></li></ul></li><li><p>直接控制信号量信息：int semctl(int semid, int semnum, int cmd, union semun arg);</p><ul><li><p>semid：信号量集标识符。</p></li><li><p>semnum：信号量集数组上的下标，表示某一个信号量。</p></li><li><p>arg：union semun类型。</p></li></ul></li></ul></li></ul><p><strong>辅助命令</strong></p><p>ipcs命令用于报告共享内存、信号量和消息队列信息。</p><ul><li><p>ipcs -a：列出共享内存、信号量和消息队列信息。</p></li><li><p>ipcs -l：列出系统限额。</p></li><li><p>ipcs -u：列出当前使用情况。</p></li></ul><p><strong>套接字</strong></p><ul><li><p><a href="https://github.com/linw7/Skill-Tree/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md" target="_blank" rel="noopener">详见socket交互流程</a></p></li><li><p><a href="#netio">详见网络I/O模型</a></p></li></ul><hr><h3 id="同步互斥机制"><a href="#同步互斥机制" class="headerlink" title="同步互斥机制"></a><span id="mutex">同步互斥机制</span></h3><blockquote><p>待补充</p></blockquote><hr><h3 id="网络I-O模型"><a href="#网络I-O模型" class="headerlink" title="网络I/O模型"></a><span id="netio">网络I/O模型</span></h3><p>在描述这块内容的诸多书籍中，很多都只说笼统的概念，我们将问题具体化，暂时只考虑服务器端的网络I/O情形。我们假定目前的情形是服务器已经在监听用户请求，建立连接后服务器调用read()函数等待读取用户发送过来的数据流，之后将接收到的数据打印出来。</p><p>所以服务器端简单是这样的流程：建立连接 -&gt; 监听请求 -&gt; 等待用户数据 -&gt; 打印数据。我们总结网络通信中的等待：</p><ul><li><p>建立连接时等待对方的ACK包（TCP）。</p></li><li><p>等待客户端请求（HTTP）。</p></li><li><p>输入等待：服务器用户数据到达内核缓冲区（read函数等待）。</p></li><li><p>输出等待：用户端等待缓冲区有足够空间可以输入（write函数等待）。</p></li></ul><p>另外为了能够解释清楚网络I/O模型，还需要了解一些基础。对服务器而言，打印出用户输入的字符串（printf函数）和从网络中获取数据（read函数）需要单独来看。服务器首先accept用户连接请求后首先调用read函数等待数据，这里的read函数是系统调用，运行于内核态，使用的也是内核地址空间，并且从网络中取得的数据需要先写入到内核缓冲区。当read系统调用获取到数据后将这些数据再复制到用户地址空间的用户缓冲区中，之后返回到用户态执行printf函数打印字符串。我们需要明确两点：</p><ul><li><p>read执行在内核态且数据流先读入内核缓冲区；printf运行于用户态，打印的数据会先从内核缓冲区复制到进程的用户缓冲区，之后打印出来。</p></li><li><p>printf函数一定是在read函数已经准备好数据之后才能执行，但read函数作为I/O操作通常需要等待而触发阻塞。调用read函数的是服务器进程，一旦被read调用阻塞，整个服务器在获取到用户数据前都不能接受任何其他用户的请求（单进程/线程）。</p></li></ul><p>有了上面的基础，我们就可以介绍下面四种网路I/O模型。</p><p><strong>阻塞式</strong></p><ul><li>阻塞表示一旦调用I/O函数必须等整个I/O完成才返回。正如上面提到的那种情形，当服务器调用了read函数之后，如果不是立即接收到数据，服务器进程会被阻塞，之后一直在等待用户数据到达，用户数据到达后首先会写进内核缓冲区，之后内核缓冲区数据复制到用户进程（服务器进程）缓冲区。完成了上述所有的工作后，才会把执行权限返回给用户（从内核态 -&gt; 用户态）。</li></ul><ul><li><p>很显然，阻塞式I/O的效率实在太低，如果用户输入数据迟迟不到的话，整个服务器就会一直被阻塞（单进程/线程）。为了不影响服务器接收其他进程的连接，我们可以考虑多进程模型，这样当服务器建立连接后为连接的用户创建新线程，新线程即使是使用阻塞式I/O也仅仅是这一个线程被阻塞，不会影响服务器等待接收新的连接。</p></li><li><p>多线程模型下，主线程等待用户请求，用户有请求到达时创建新线程。新线程负责具体的工作，即使是因为调用了read函数被阻塞也不会影响服务器。我们还可以进一步优化创建连接池和线程池以减小频繁调用I/O接口的开销。但新问题随之产生，每个新线程或者进程（加入使用对进程模型）都会占用大量系统资源，除此之外过多的线程和进程在调度方面开销也会大很对，所以这种模型并不适合大并发量。</p></li></ul><p><strong>非阻塞I/O</strong></p><ul><li><p>阻塞和非阻塞最大的区别在于调用I/O系统调用后，是等整个I/O过程完成再把操作权限返回给用户还是会立即返回。</p></li><li><p>可以使用以下语句将句柄fd设置为非阻塞I/O：fcntl(fd, F_SETFL, O_NONBLOCK);</p></li><li><p>非阻塞I/O在调用后会立即返回，用户进程对返回的返回值判断以区分是否完成了I/O。如果返回大于0表示完成了数据读取，返回值即读取的字节数；返回0表示连接已经正常断开；返回-1表示错误，接下来用户进程会不停地询问kernel是否准备完毕。</p></li><li><p>非阻塞I/O虽然不再会完全阻塞用户进程，但实际上由于用户进程需要不停地询问kernel是否准备完数据，所以整体效率依旧非常低，不适合做并发。</p></li></ul><p><strong>I/O多路复用（事件驱动模型）</strong></p><p>前面已经论述了多进程、多进程模型会因为开销巨大和调度困难而导致并不能承受高并发量。但不适用这种模型的话，无论是阻塞还是非阻塞方式都会导致整个服务器停滞。</p><p>所以对于大并发量，我们需要一种代理模型可以帮助我们集中去管理所有的socket连接，一旦某个socket数据到达了就执行其对应的用户进程，I/O多路复用就是这么一种模型。Linux下I/O多路复用的系统调用有select，poll和epoll，但从本质上来讲他们都是同步I/O范畴。</p><ol><li><p>select</p><ul><li><p>相关接口：</p><p>  int select (int maxfd, fd_set *readfds, fd_set *writefds, fd_set *errorfds, struct timeval *timeout);</p><p>  FD_ZERO(int fd, fd_set* fds)    //清空集合</p><p>  FD_SET(int fd, fd_set* fds)    //将给定的描述符加入集合</p><p>  FD_ISSET(int fd, fd_set* fds)    //将给定的描述符从文件中删除</p><p>  FD_CLR(int fd, fd_set* fds)    //判断指定描述符是否在集合中</p></li><li><p>参数：<br>  maxfd：当前最大文件描述符的值+1（≠ MAX_CONN）。</p><p>  readfds：指向读文件队列集合（fd_set）的指针。</p><p>  writefds：同上，指向读集合的指针。</p><p>  writefds：同上，指向错误集合的指针。</p><p>  timeout：指向timeval结构指针，用于设置超时。</p></li><li><p>其他：</p><p>  判断和操作对象为set_fd集合，集合大小为单个进程可打开的最大文件数1024或2048（可重新编译内核修改但不建议）。</p></li></ul></li><li><p>poll</p><ul><li><p>相关接口：<br>  int poll(struct pollfd *fds, unsigned int nfds, int timeout);</p></li><li><p>结构体定义：<br>  struct pollfd{</p><pre><code>int fd;    // 文件描述符short events;    // 等到的事件short revents;    // 实际发生的事件</code></pre><p>  }</p></li><li><p>参数：<br>  fds：指向pollfd结构体数组的指针。</p><p>  nfds：pollfd数组当前已被使用的最大下标。</p><p>  timeout：等待毫秒数。</p></li><li><p>其他：</p><p>  判断和操作对象是元素为pollfd类型的数组，数组大小自己设定，即为最大连接数。</p></li></ul></li><li><p>epoll</p><ul><li><p>相关接口：<br>  int epoll_create(int size);    // 创建epoll句柄<br>  int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);    // 事件注册函数<br>  int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</p></li><li><p>结构体定义：<br>  struct epoll_event{</p><pre><code>__uint32_t events;epoll_data_t data;</code></pre><p>  };<br>  typedef union epoll_data{</p><pre><code>void *ptr;int fd;__uint32_t u32;__uint64_t u64;</code></pre><p>  }epoll_data_t;</p></li><li><p>参数：</p><p>  size：用来告诉内核要监听的数目。</p><p>  epfd：epoll函数的返回值。</p><p>  op：表示动作（EPOLL_CTL_ADD/EPOLL_CTL_FD/EPOLL_CTL_DEL）。</p><p>  fd：需要监听的fd。</p><p>  events：指向epoll_event的指针，该结构记录监听的事件。</p><p>  maxevents：告诉内核events的大小。</p><p>  timeout：超时时间（ms为单位，0表示立即返回，-1将不确定）。</p></li></ul></li><li><p>select、poll和epoll区别</p><ul><li><p>操作方式及效率：</p><p>  select是遍历，需要遍历fd_set每一个比特位（= MAX_CONN），O(n)；poll是遍历，但只遍历到pollfd数组当前已使用的最大下标（≠ MAX_CONN），O(n)；epoll是回调，O(1)。</p></li><li><p>最大连接数：</p><p>  select为1024/2048（一个进程打开的文件数是有限制的）；poll无上限；epoll无上限。</p></li><li><p>fd拷贝：</p><p>  select每次都需要把fd集合从用户态拷贝到内核态；poll每次都需要把fd集合从用户态拷贝到内核态；epoll调用epoll_ctl时拷贝进内核并放到事件表中，但用户进程和内核通过mmap映射共享同一块存储，避免了fd从内核赋值到用户空间。</p></li><li><p>其他：</p><p>  select每次内核仅仅是通知有消息到了需要处理，具体是哪一个需要遍历所有的描述符才能找到。epoll不仅通知有I/O到来还可通过callback函数具体定位到活跃的socket，实现伪AIO。</p></li></ul></li></ol><p><strong>异步I/O模型</strong></p><ul><li><p>上面三种I/O方式均属于同步I/O。</p></li><li><p>从阻塞式I/O到非阻塞I/O，我们已经做到了调用I/O请求后立即返回，但不停轮询的操作效率又很低，如果能够既像非阻塞I/O能够立即返回又能不一直轮询的话会更符合我们的预期。</p></li><li><p>之所以用户进程会不停轮询就是因为在数据准备完毕后内核不会回调用户进程，只能通过用户进程一次又一次轮询来查询I/O结果。如果内核能够在完成I/O后通过消息告知用户进程来处理已经得到的数据自然是最好的，异步I/O就是这么回事。</p></li><li><p>异步I/O就是当用户进程发起I/O请求后立即返回，直到内核发送一个信号，告知进程I/O已完成，在整个过程中，都没有进程被阻塞。看上去异步I/O和非阻塞I/O的区别在于：判断数据是否准备完毕的任务从用户进程本身被委托给内核来完成。这里所谓的异步只是操作系统提供的一直机制罢了。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;面向进程和线程学习操作系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;目录&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="C++" scheme="https://kaaier.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://kaaier.github.io/tags/C/"/>
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>海量数据处理</title>
    <link href="https://kaaier.github.io/2019/04/15/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>https://kaaier.github.io/2019/04/15/海量数据处理/</id>
    <published>2019-04-15T14:30:20.000Z</published>
    <updated>2019-08-11T12:59:57.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="海量数据处理"><a href="#海量数据处理" class="headerlink" title="海量数据处理"></a>海量数据处理</h1><h2 id="TOP-N问题"><a href="#TOP-N问题" class="headerlink" title="TOP N问题"></a>TOP N问题</h2><ol><li>如何在海量数据中找出重复最多一个。</li></ol><ul><li><p>通过hash映射为小文件</p></li><li><p>通过hash_map统计各个小文件重读最多的并记录次数</p></li><li><p>对每个小文件重复最多的进行建立大根堆</p></li></ul><ol start="2"><li>上亿有重数据，统计最多前N个。</li></ol><ul><li><p>内存存不下</p>  <a id="more"></a><ul><li><p>通过hash映射为小文件</p></li><li><p>通过hash_map统计各个小文件重读最多的并记录次数</p></li><li><p>对每个小文件重复最多的进行建立大根堆并重复N次取走堆顶并重建堆操作</p></li></ul></li><li><p>内存存得下</p><ul><li><p>直接内存通过hash_map统计并建大根堆</p></li><li><p>重复N次取走堆顶并重建堆操作</p></li></ul></li></ul><ol start="3"><li>海量日志数据，提取出某日访问百度次数最多的那个IP（同1）。</li></ol><ul><li><p>将IP % 1000映射到1000个小文件中</p><ul><li><p>相同IP会被映射到同一个文件</p></li><li><p>不会出现累加和更大情况</p></li></ul></li><li><p>分1000次在内存处理小文件，得到频率最大IP（使用map统计）</p></li><li><p>对这1000个IP建立大根堆</p></li></ul><ol start="4"><li>1000w查询串统计最热门10个（同2）。</li></ol><ul><li>同上</li></ul><ol start="5"><li>1G的文件，里面1行1个不超过16字节的词。内存限制1M，返回频数最高前100（同2）。</li></ol><ul><li><p>将单词 % 5000存入5000小文件</p><ul><li><p>平均各文件约200K</p></li><li><p>对超过1M的文件继续分割直到小于200K</p></li></ul></li><li><p>使用map统计各个词出现的频率</p></li><li><p>对5000词使用堆排序或归并排序</p></li></ul><h2 id="分布式TOP-N问题"><a href="#分布式TOP-N问题" class="headerlink" title="分布式TOP N问题"></a>分布式TOP N问题</h2><ol start="6"><li>分布在100台电脑的海量数据，统计前十。</li></ol><ul><li><p>各数据只出现在一台机器中</p><ul><li><p>先在独立机器得到前十</p><ul><li><p>若可以放入内存直接堆排序</p></li><li><p>若不可全放入内存：哈希分块 -&gt; map统计 -&gt; 归总堆排</p></li></ul></li><li><p>再将100台计算机的TOP10组合起来堆排序</p></li></ul></li><li><p>同一元素可同时出现在不同机器中</p><ul><li>遍历所有数据，重新hash取模，使同一个元素只出现在单独的一台电脑中，然后采用上面方法先统计每台电脑TOP10再汇总起来</li></ul></li></ul><h2 id="快速外排序问题"><a href="#快速外排序问题" class="headerlink" title="快速外排序问题"></a>快速外排序问题</h2><ol start="7"><li>有10个1G文件，每行都是一个可重复用户query，按query频度排序。</li></ol><ul><li><p>顺序读取十个文件并采取哈希，将query写入10个文件中</p></li><li><p>通过hash_map(query, count)统计每个query出现次数，至少2G内存</p></li><li><p>通过得到的hash_map中query和query_count，对query_count排序并将重新输出到文件中，得到已排序好的文件</p></li><li><p>对十个文件进行归并排序（外排序）</p></li></ul><h2 id="公共数据问题"><a href="#公共数据问题" class="headerlink" title="公共数据问题"></a>公共数据问题</h2><ol start="8"><li>A,B两个文件各存放50亿url，每个为64Byte，限制内存4G找出公共url。</li></ol><ul><li><p>对A和B两个大文件，先通过url % 1000将数据映射到1000个文件中，单个文件大小约320M（我们只需要检查对应小文件A1 V B1……，不对应小文件不会有相同url）</p></li><li><p>通过hash_set统计，把A1的url存储到hash_set中，再遍历对应的B1小文件，检查是否在hash_set中，若存在则写入外存。重复循环处理对应的1000个对。</p></li></ul><ol start="9"><li>1000w有重字符串，对字符串去重。</li></ol><ul><li><p>先hash分为多个文件</p></li><li><p>逐个文件检查并插入set中</p></li><li><p>多个set取交集</p></li></ul><h2 id="内存内TOP-N问题"><a href="#内存内TOP-N问题" class="headerlink" title="内存内TOP N问题"></a>内存内TOP N问题</h2><ol start="10"><li>100w个数字找出最大100个。</li></ol><ul><li><p>堆排序法</p><ul><li>建大根堆，取走堆顶并重建堆，重复100次</li></ul></li><li><p>快排法</p><ul><li>使用快速排序划分，若某次枢纽元在后10000时（具体情况具体分析），对后10000数据排序后取前100</li></ul></li></ul><h2 id="位图法"><a href="#位图法" class="headerlink" title="位图法"></a>位图法</h2><ol start="11"><li>在2.5亿数字中找出不重复的整数。</li></ol><ul><li><p>使用2-Bit位图法，00表示不存在，01表示出现一次，10表示出现多次，11无意义。这样只需要1G内存。</p></li><li><p>或者hash划分小文件，小文件使用hash_set检查各个元素，得到的。</p></li></ul><ol start="12"><li>如何在40亿数字中快速判断是否有某个数？</li></ol><ul><li>位图法标记某个数字是否存在，check标记数组。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;海量数据处理&quot;&gt;&lt;a href=&quot;#海量数据处理&quot; class=&quot;headerlink&quot; title=&quot;海量数据处理&quot;&gt;&lt;/a&gt;海量数据处理&lt;/h1&gt;&lt;h2 id=&quot;TOP-N问题&quot;&gt;&lt;a href=&quot;#TOP-N问题&quot; class=&quot;headerlink&quot; title=&quot;TOP N问题&quot;&gt;&lt;/a&gt;TOP N问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;如何在海量数据中找出重复最多一个。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过hash映射为小文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过hash_map统计各个小文件重读最多的并记录次数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对每个小文件重复最多的进行建立大根堆&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;上亿有重数据，统计最多前N个。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;内存存不下&lt;/p&gt;
    
    </summary>
    
      <category term="Summary" scheme="https://kaaier.github.io/categories/Summary/"/>
    
    
      <category term="C++" scheme="https://kaaier.github.io/tags/C/"/>
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>笔试</title>
    <link href="https://kaaier.github.io/2019/04/15/%E7%AC%94%E8%AF%95/"/>
    <id>https://kaaier.github.io/2019/04/15/笔试/</id>
    <published>2019-04-15T12:30:20.000Z</published>
    <updated>2019-08-11T13:03:03.272Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Kaaier" scheme="https://kaaier.github.io/categories/Kaaier/"/>
    
    
      <category term="C++" scheme="https://kaaier.github.io/tags/C/"/>
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>C++知识点积累</title>
    <link href="https://kaaier.github.io/2019/04/15/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80C++/"/>
    <id>https://kaaier.github.io/2019/04/15/编程语言C++/</id>
    <published>2019-04-15T02:41:50.000Z</published>
    <updated>2019-08-07T00:18:13.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编程语言-C-C"><a href="#编程语言-C-C" class="headerlink" title="编程语言(C/C++)"></a>编程语言(C/C++)</h1><blockquote><p>都是语言，为什么英语比C++难这么多呢？</p></blockquote><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><table><thead><tr><th align="center">Chapter 1</th><th align="center">Chapter 2</th><th align="center">Chapter 3</th><th align="center">Chapter 4</th></tr></thead><tbody><tr><td align="center"><a href="base">编程基础</a></td><td align="center"><a href="#oop">面向对象基础</a></td><td align="center"><a href="#stl">标准模板库</a></td><td align="center"><a href="#other">编译及调试</a></td></tr></tbody></table><hr><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h3 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a><span id="base">编程基础</span></h3><p>C/C++的内容又多又杂，常常看到有人罗列相关书单，觉得毫无意义，我不相信他们真的完全掌握了其中任何一本。学习任何东西，首先要掌握基本概念，基础不牢地动山摇，因为高级的内容都是通过低级的概念来描述的。当基本概念都没理解透，学习再多都是空中楼阁。这里罗列了一些听基本的问题，虽然看着不难，但是精确理解每句话中的每个词真的并不容易。</p><ol><li><p>变量声明和定义区别？</p><a id="more"></a><ul><li><p>声明仅仅是把变量的声明的位置及类型提供给编译器，并不分配内存空间；定义要在定义的地方为其分配存储空间。</p></li><li><p>相同变量可以再多处声明（外部变量extern），但只能在一处定义。</p></li></ul></li><li><p>“零值比较”？</p><ul><li><p>bool类型：if(flag)</p></li><li><p>int类型：if(flag == 0)</p></li><li><p>指针类型：if(flag == null)</p></li><li><p>float类型：if((flag &gt;= -0.000001) &amp;&amp; (flag &lt;= 0. 000001))</p></li></ul></li><li><p>strlen和sizeof区别？</p><ul><li><p>sizeof是运算符，并不是函数，结果在编译时得到而非运行中获得；strlen是字符处理的库函数。</p></li><li><p>sizeof参数可以是任何数据的类型或者数据（sizeof参数不退化）；strlen的参数只能是字符指针且结尾是’\0’的字符串。</p></li><li><p><strong>因为sizeof值在编译时确定，所以不能用来得到动态分配（运行时分配）存储空间的大小。</strong></p></li></ul></li><li><p>同一不同对象可以互相赋值吗？</p><ul><li><p>可以，但含有指针成员时需要注意。</p></li><li><p>对比类的对象赋值时深拷贝和浅拷贝。</p></li></ul></li><li><p>结构体内存对齐问题？</p><ul><li><p>结构体内成员按照声明顺序存储，第一个成员地址和整个结构体地址相同。</p></li><li><p>未特殊说明时，按结构体中size最大的成员对齐（若有double成员），按8字节对齐。</p></li></ul></li><li><p>static作用是什么？在C和C++中有何区别？</p><ul><li><p>static可以修饰局部变量（静态局部变量）、全局变量（静态全局变量）和函数，被修饰的变量存储位置在静态区。对于静态局部变量，相对于一般局部变量其生命周期长，直到程序运行结束而非函数调用结束，且只在第一次被调用时定义；对于静态全局变量，相对于全局变量其可见范围被缩小，只能在本文件中可见；修饰函数时作用和修饰全局变量相同，都是为了限定访问域。</p></li><li><p>C++的static除了上述两种用途，还可以修饰类成员（静态成员变量和静态成员函数），静态成员变量和静态成员函数不属于任何一个对象，是所有类实例所共有。</p></li><li><p>static的数据记忆性可以满足函数在不同调用期的通信，也可以满足同一个类的多个实例间的通信。</p></li><li><p>未初始化时，static变量默认值为0。</p></li></ul></li><li><p>结构体和类的区别？</p><ul><li><p>结构体的默认限定符是public；类是private。</p></li><li><p><del>结构体不可以继承，类可以。</del> C++中结构体也可以继承。</p></li></ul></li><li><p>malloc和new的区别？</p><ul><li><p>malloc和free是标准库函数，支持覆盖；new和delete是运算符，并且支持重载。</p></li><li><p>malloc仅仅分配内存空间，free仅仅回收空间，不具备调用构造函数和析构函数功能，用malloc分配空间存储类的对象存在风险；new和delete除了分配回收功能外，还会调用构造函数和析构函数。</p></li><li><p>malloc和free返回的是void类型指针（必须进行类型转换），new和delete返回的是具体类型指针。</p></li></ul></li><li><p>指针和引用区别？</p><ul><li><p>引用只是别名，不占用具体存储空间，只有声明没有定义；指针是具体变量，需要占用存储空间。</p><ul><li><p>引用在声明时必须初始化为另一变量，一旦出现必须为typename refname &amp;varname形式；指针声明和定义可以分开，可以先只声明指针变量而不初始化，等用到时再指向具体变量。</p></li><li><p>引用一旦初始化之后就不可以再改变（变量可以被引用为多次，但引用只能作为一个变量引用）；指针变量可以重新指向别的变量。</p></li><li><p>不存在指向空值的引用，必须有具体实体；但是存在指向空值的指针。</p></li></ul></li></ul></li><li><p>宏定义和函数有何区别？</p><ul><li><p>宏在编译时完成替换，之后被替换的文本参与编译，相当于直接插入了代码，运行时不存在函数调用，执行起来更快；函数调用在运行时需要跳转到具体调用函数。</p></li><li><p>宏函数属于在结构中插入代码，没有返回值；函数调用具有返回值。</p></li><li><p>宏函数参数没有类型，不进行类型检查；函数参数具有类型，需要检查类型。</p></li><li><p>宏函数不要在最后加分号。</p></li></ul></li><li><p>宏定义和const区别？</p><ul><li><p>宏替换发生在编译阶段之前，属于文本插入替换；const作用发生于编译过程中。</p></li><li><p>宏不检查类型；const会检查数据类型。</p></li><li><p>宏定义的数据没有分配内存空间，只是插入替换掉；const定义的变量只是值不能改变，但要分配内存空间。</p></li></ul></li><li><p>宏定义和typedef区别？</p><ul><li><p>宏主要用于定义常量及书写复杂的内容；typedef主要用于定义类型别名。</p></li><li><p>宏替换发生在编译阶段之前，属于文本插入替换；typedef是编译的一部分。</p></li><li><p>宏不检查类型；typedef会检查数据类型。</p></li><li><p>宏不是语句，不在在最后加分号；typedef是语句，要加分号标识结束。</p></li><li><p>注意对指针的操作，typedef char * p_char和#define p_char char *区别巨大。</p></li></ul></li><li><p>宏定义和内联函数(inline)区别？</p><ul><li><p>在使用时，宏只做简单字符串替换（编译前）。而内联函数可以进行参数类型检查（编译时），且具有返回值。</p></li><li><p>内联函数本身是函数，强调函数特性，具有重载等功能。</p></li><li><p>内联函数可以作为某个类的成员函数，这样可以使用类的保护成员和私有成员。而当一个表达式涉及到类保护成员或私有成员时，宏就不能实现了。</p></li></ul></li><li><p>条件编译#ifdef, #else, #endif作用？</p><ul><li><p>可以通过加#define，并通过#ifdef来判断，将某些具体模块包括进要编译的内容。</p></li><li><p>用于子程序前加#define DEBUG用于程序调试。</p></li><li><p>应对硬件的设置（机器类型等）。</p></li><li><p>条件编译功能if也可实现，但条件编译可以减少被编译语句，从而减少目标程序大小。</p></li></ul></li><li><p>区别以下几种变量？</p><pre><code>const int a;int const a;const int *a;int *const a;</code></pre><ul><li><p>int const a和const int a均表示定义常量类型a。</p></li><li><p>const int <em>a，其中a为指向int型变量的指针，const在 * 左侧，表示a指向不可变常量。(看成const (</em>a)，对引用加const)</p></li><li><p>int *const a，依旧是指针类型，表示a为指向整型数据的常指针。(看成const(a)，对指针const)</p></li></ul></li><li><p>volatile有什么作用？</p><ul><li><p>volatile定义变量的值是易变的，每次用到这个变量的值的时候都要去重新读取这个变量的值，而不是读寄存器内的备份。</p></li><li><p>多线程中被几个任务共享的变量需要定义为volatile类型。</p></li></ul></li><li><p>什么是常引用？</p><ul><li><p>常引用可以理解为常量指针，形式为const typename &amp; refname = varname。</p></li><li><p>常引用下，原变量值不会被别名所修改。</p></li><li><p>原变量的值可以通过原名修改。</p></li><li><p>常引用通常用作只读变量别名或是形参传递。</p></li></ul></li><li><p>区别以下指针类型？</p><pre><code>int *p[10]int (*p)[10]int *p(int)int (*p)(int)</code></pre><ul><li><p>int *p[10]表示指针数组，强调数组概念，是一个数组变量，数组大小为10，数组内每个元素都是指向int类型的指针变量。</p></li><li><p>int (*p)[10]表示数组指针，强调是指针，只有一个变量，是指针类型，不过指向的是一个int类型的数组，这个数组大小是10。</p></li><li><p>int *p(int)是函数声明，函数名是p，参数是int类型的，返回值是int *类型的。</p></li><li><p>int (*p)(int)是函数指针，强调是指针，该指针指向的函数具有int类型参数，并且返回值是int类型的。</p></li></ul></li><li><p>常量指针和指针常量区别？</p><ul><li><p>常量指针是一个指针，读成常量的指针，指向一个只读变量。如int const *p或const int *p。</p></li><li><p>指针常量是一个不能给改变指向的指针。如int *const p。</p></li></ul></li><li><p>a和&amp;a有什么区别？</p><pre><code>假设数组int a[10];int (*p)[10] = &amp;a;</code></pre><ul><li><p>a是数组名，是数组首元素地址，+1表示地址值加上一个int类型的大小，如果a的值是0x00000001，加1操作后变为0x00000005。*(a + 1) = a[1]。</p></li><li><p>&amp;a是数组的指针，其类型为int (*)[10]（就是前面提到的数组指针），其加1时，系统会认为是数组首地址加上整个数组的偏移（10个int型变量），值为数组a尾元素后一个元素的地址。</p></li><li><p>若(int *)p ，此时输出 *p时，其值为a[0]的值，因为被转为int *类型，解引用时按照int类型大小来读取。</p></li></ul></li><li><p>数组名和指针（这里为指向数组首元素的指针）区别？</p><ul><li><p>二者均可通过增减偏移量来访问数组中的元素。</p></li><li><p>数组名不是真正意义上的指针，可以理解为常指针，所以数组名没有自增、自减等操作。</p></li><li><p>当数组名当做形参传递给调用函数后，就失去了原有特性，退化成一般指针，多了自增、自减操作，但sizeof运算符不能再得到原数组的大小了。</p></li></ul></li><li><p>野指针是什么？</p><ul><li><p>也叫空悬指针，不是指向null的指针，是指向垃圾内存的指针。</p></li><li><p>产生原因及解决办法：</p><ul><li><p>指针变量未及时初始化 =&gt; 定义指针变量及时初始化，要么置空。</p></li><li><p>指针free或delete之后没有及时置空 =&gt; 释放操作后立即置空。</p></li></ul></li></ul></li><li><p>堆和栈的区别？</p><ul><li><p>申请方式不同。</p><ul><li><p>栈由系统自动分配。</p></li><li><p>堆由程序员手动分配。</p></li></ul></li><li><p>申请大小限制不同。</p><ul><li><p>栈顶和栈底是之前预设好的，大小固定，可以通过ulimit -a查看，由ulimit -s修改。</p></li><li><p>堆向高地址扩展，是不连续的内存区域，大小可以灵活调整。</p></li></ul></li><li><p>申请效率不同。</p><ul><li><p>栈由系统分配，速度快，不会有碎片。</p></li><li><p>堆由程序员分配，速度慢，且会有碎片。</p></li></ul></li></ul></li><li><p>delete和delete[]区别？</p><ul><li><p>delete只会调用一次析构函数。</p></li><li><p>delete[]会调用数组中每个元素的析构函数。</p></li></ul></li></ol><h3 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a><span id="oop">面向对象基础</span></h3><p>能够准确理解下面这些问题是从C程序员向C++程序员进阶的基础。当然了，这只是一部分。</p><ol><li><p>面向对象三大特性？</p><ul><li><p>封装性：数据和代码捆绑在一起，避免外界干扰和不确定性访问。</p></li><li><p>继承性：让某种类型对象获得另一个类型对象的属性和方法。</p></li><li><p>多态性：同一事物表现出不同事物的能力，即向不同对象发送同一消息，不同的对象在接收时会产生不同的行为（重载实现编译时多态，虚函数实现运行时多态）。</p></li></ul></li><li><p>public/protected/private的区别？</p><ul><li><p>public的变量和函数在类的内部外部都可以访问。</p></li><li><p>protected的变量和函数只能在类的内部和其派生类中访问。</p></li><li><p>private修饰的元素只能在类内访问。</p></li></ul></li><li><p>对象存储空间？</p><ul><li><p>非静态成员的数据类型大小之和。</p></li><li><p>编译器加入的额外成员变量（如指向虚函数表的指针）。</p><ul><li>为了边缘对齐优化加入的panding。</li></ul></li></ul></li><li><p>C++空类有哪些成员函数?</p><ul><li><p>首先，空类大小为1字节。</p></li><li><p>默认函数有：</p><ul><li><p>构造函数</p></li><li><p>析构函数</p></li><li><p>拷贝构造函数</p></li><li><p>赋值运算符</p></li></ul></li></ul></li><li><p>构造函数能否为虚函数，析构函数呢？</p><ul><li><p>析构函数：</p><ul><li><p>析构函数可以为虚函数，并且一般情况下基类析构函数要定义为虚函数。</p></li><li><p>只有在基类析构函数定义为虚函数时，调用操作符delete销毁指向对象的基类指针时，才能准确调用派生类的析构函数（从该级向上按序调用虚函数），才能准确销毁数据。</p></li><li><p>析构函数可以是纯虚函数，含有纯虚函数的类是抽象类，此时不能被实例化。但派生类中可以根据自身需求重新改写基类中的纯虚函数。</p></li></ul></li><li><p>构造函数：</p><ul><li>构造函数不能定义为虚函数，不仅如此，构造函数中还不能调用虚函数。因为那样实际执行的是父类对应的函数，因为自己还没有构造好（构造顺序先基类再派生类）。</li></ul></li></ul></li><li><p>构造函数调用顺序，析构函数呢？</p><ul><li><p>基类的构造函数：如果有多个基类，先调用纵向上最上层基类构造函数，如果横向继承了多个类，调用顺序为派生表从左到右顺序。</p></li><li><p>成员类对象的构造函数：如果类的变量中包含其他类（类的组合），需要在调用本类构造函数前先调用成员类对象的构造函数，调用顺序遵照在类中被声明的顺序。</p></li><li><p>派生类的构造函数。</p></li><li><p>析构函数与之相反。</p></li></ul></li><li><p>拷贝构造函数中深拷贝和浅拷贝区别？</p><ul><li><p>深拷贝时，当被拷贝对象存在动态分配的存储空间时，需要先动态申请一块存储空间，然后逐字节拷贝内容。</p></li><li><p>浅拷贝仅仅是拷贝指针字面值。</p></li><li><p>当使用浅拷贝时，如果原来的对象调用析构函数释放掉指针所指向的数据，则会产生空悬指针。因为所指向的内存空间已经被释放了。</p></li></ul></li><li><p>拷贝构造函数和赋值运算符重载的区别？</p><ul><li><p>拷贝构造函数是函数，赋值运算符是运算符重载。</p></li><li><p>拷贝构造函数会生成新的类对象，赋值运算符不能。</p></li><li><p>拷贝构造函数是直接构造一个新的类对象，所以在初始化对象前不需要检查源对象和新建对象是否相同；赋值运算符需要上述操作并提供两套不同的复制策略，另外赋值运算符中如果原来的对象有内存分配则需要先把内存释放掉。</p></li><li><p>形参传递是调用拷贝构造函数（调用的被赋值对象的拷贝构造函数），但并不是所有出现”=”的地方都是使用赋值运算符，如下：</p><pre><code>Student s;Student s1 = s;    // 调用拷贝构造函数Student s2;s2 = s;    // 赋值运算符操作</code></pre></li></ul><p> <strong>注：类中有指针变量时要重写析构函数、拷贝构造函数和赋值运算符</strong></p></li><li><p>虚函数和纯虚函数区别？</p><ul><li><p>虚函数是为了实现动态编联产生的，目的是通过基类类型的指针指向不同对象时，自动调用相应的、和基类同名的函数（使用同一种调用形式，既能调用派生类又能调用基类的同名函数）。虚函数需要在基类中加上virtual修饰符修饰，因为virtual会被隐式继承，所以子类中相同函数都是虚函数。当一个成员函数被声明为虚函数之后，其派生类中同名函数自动成为虚函数，在派生类中重新定义此函数时要求函数名、返回值类型、参数个数和类型全部与基类函数相同。</p></li><li><p>纯虚函数只是相当于一个接口名，但含有纯虚函数的类不能够实例化。</p></li></ul></li><li><p>覆盖、重载和隐藏的区别？</p><ul><li><p>覆盖是派生类中重新定义的函数，其函数名、参数列表（个数、类型和顺序）、返回值类型和父类完全相同，只有函数体有区别。派生类虽然继承了基类的同名函数，但用派生类对象调用该函数时会根据对象类型调用相应的函数。覆盖只能发生在类的成员函数中。</p></li><li><p>隐藏是指派生类函数屏蔽了与其同名的函数，这里仅要求基类和派生类函数同名即可。其他状态同覆盖。可以说隐藏比覆盖涵盖的范围更宽泛，毕竟参数不加限定。</p></li><li><p>重载是具有相同函数名但参数列表不同（个数、类型或顺序）的两个函数（不关心返回值），当调用函数时根据传递的参数列表来确定具体调用哪个函数。重载可以是同一个类的成员函数也可以是类外函数。</p></li></ul></li><li><p>在main执行之前执行的代码可能是什么？</p><ul><li>全局对象的构造函数。</li></ul></li><li><p>哪几种情况必须用到初始化成员列表？</p><ul><li><p>初始化一个const成员。</p></li><li><p>初始化一个reference成员。</p></li><li><p>调用一个基类的构造函数，而该函数有一组参数。</p></li><li><p>调用一个数据成员对象的构造函数，而该函数有一组参数。</p></li></ul></li><li><p>什么是虚指针？</p><ul><li><p>虚指针或虚函数指针是虚函数的实现细节。</p></li><li><p>虚指针指向虚表结构。</p></li></ul></li><li><p>重载和函数模板的区别？</p><ul><li><p>重载需要多个函数，这些函数彼此之间函数名相同，但参数列表中参数数量和类型不同。在区分各个重载函数时我们并不关心函数体。</p></li><li><p>模板函数是一个通用函数，函数的类型和形参不直接指定而用虚拟类型来代表。但只适用于参个数相同而类型不同的函数。</p></li></ul></li><li><p>this指针是什么？</p><ul><li><p>this指针是类的指针，指向对象的首地址。</p></li><li><p>this指针只能在成员函数中使用，在全局函数、静态成员函数中都不能用this。</p></li><li><p>this指针只有在成员函数中才有定义，且存储位置会因编译器不同有不同存储位置。</p></li></ul></li><li><p>类模板是什么？</p><ul><li><p>用于解决多个功能相同、数据类型不同的类需要重复定义的问题。</p></li><li><p>在建立类时候使用template及任意类型标识符T，之后在建立类对象时，会指定实际的类型，这样才会是一个实际的对象。</p></li><li><p>类模板是对一批仅数据成员类型不同的类的抽象，只要为这一批类创建一个类模板，即给出一套程序代码，就可以用来生成具体的类。</p></li></ul></li><li><p>构造函数和析构函数调用时机？</p><ul><li><p>全局范围中的对象：构造函数在所有函数调用之前执行，在主函数执行完调用析构函数。</p></li><li><p>局部自动对象：建立对象时调用构造函数，函数结束时调用析构函数。</p></li><li><p>动态分配的对象：建立对象时调用构造函数，调用释放时调用析构函数。</p></li><li><p>静态局部变量对象：建立时调用一次构造函数，主函数结束时调用析构函数。</p></li></ul></li></ol><hr><h3 id="标准模板库"><a href="#标准模板库" class="headerlink" title="标准模板库"></a><span id="stl">标准模板库</span></h3><p>STL内容虽然看起来很多，单独成书都不是问题（《STL源码剖析》），但从实际使用状况来看，我认为只需要知道以下几点就可以了：</p><ul><li><p>怎么用？</p><p>  各种STL基本的增删改查怎么使用。每种容器都提供了很多操作，但实际增删改查我们通常只需要掌握透彻一种方式即可。有些功能只是出于通用性考虑才存在的，但对于相应的STL这些操作完全可以忽略。所以我对STL使用的看法是，不需要花太多时间去了解所有功能，只要掌握最基本的即可，要把精力放在对需求的了解并选择适合的数据结构。</p></li><li><p>怎么实现？</p><p>  本身STL就是封装了我们常用的数据结构，所以最先需要了解每种数据结构的特性。而且了解实现方式对我们能够准确、高效使用STL打下了基础。</p></li><li><p>如何避免错误？</p><p>  在第二阶段了解了STL的实现之后，我们已经可以很清楚地知道他们底层使用的是什么数据结构以及该数据结构做什么操作比较高效。但还有一点需要注意的就是怎么才能用对他们，避免一些未知的错误，比如迭代器失效问题。</p></li></ul><p><strong>string</strong></p><p><strong>vector</strong></p><p>用法：</p><pre><code>定义：    vector&lt;T&gt; vec;插入元素：    vec.push_back(element);    vec.insert(iterator, element);删除元素：    vec.pop_back();    vec.erase(iterator);修改元素：    vec[position] = element;遍历容器：    for(auto it = vec.begin(); it != vec.end(); ++it) {......}其他：    vec.empty();    //判断是否空    vec.size();    // 实际元素    vec.capacity();    // 容器容量    vec.begin();    // 获得首迭代器    vec.end();    // 获得尾迭代器    vec.clear();    // 清空</code></pre><p>实现：</p><p><a href="https://github.com/linw7/Skill-Tree/blob/master/code/my_vector.cpp" target="_blank" rel="noopener">模拟Vector实现</a></p><ul><li><p>线性表，数组实现。</p><ul><li><p>支持随机访问。</p></li><li><p>插入删除操作需要大量移动数据。</p></li></ul></li><li><p>需要连续的物理存储空间。</p></li><li><p>每当大小不够时，重新分配内存（*2），并复制原内容。</p></li></ul><p>错误避免：</p><p><a href="https://github.com/linw7/Skill-Tree/blob/master/code/vector_iterator.cpp" target="_blank" rel="noopener">迭代器失效</a></p><ul><li><p>插入元素</p><ul><li><p>尾后插入：size &lt; capacity时，首迭代器不失效尾迭代实现（未重新分配空间），size == capacity时，所有迭代器均失效（需要重新分配空间）。</p></li><li><p>中间插入：size &lt; capacity时，首迭代器不失效但插入元素之后所有迭代器失效，size == capacity时，所有迭代器均失效。</p></li></ul></li><li><p>删除元素</p><ul><li><p>尾后删除：只有尾迭代失效。</p></li><li><p>中间删除：删除位置之后所有迭代失效。</p></li></ul></li></ul><p><strong>map</strong></p><p>用法：</p><pre><code>定义：    map&lt;T_key, T_value&gt; mymap;插入元素：    mymap.insert(pair&lt;T_key, T_value&gt;(key, value));    // 同key不插入    mymap.insert(map&lt;T_key, T_value&gt;::value_type(key, value));    // 同key不插入    mymap[key] = value;    // 同key覆盖删除元素：    mymap.erase(key);    // 按值删    mymap.erase(iterator);    // 按迭代器删修改元素：    mymap[key] = new_value;遍历容器：      for(auto it = mymap.begin(); it != mymap.end(); ++it) {        cout &lt;&lt; it-&gt;first &lt;&lt; &quot; =&gt; &quot; &lt;&lt; it-&gt;second &lt;&lt; &apos;\n&apos;;      }</code></pre><p>实现：</p><p><a href="https://github.com/linw7/Skill-Tree/tree/master/code/RBTree" target="_blank" rel="noopener">RBTree实现</a></p><ul><li><p>树状结构，RBTree实现。</p><ul><li><p>插入删除不需要数据复制。</p></li><li><p>操作复杂度仅跟树高有关。</p></li></ul></li><li><p>RBTree本身也是二叉排序树的一种，key值有序，且唯一。</p><ul><li>必须保证key可排序。</li></ul></li></ul><p>基于红黑树实现的map结构（实际上是map, set, multimap，multiset底层均是红黑树），不仅增删数据时不需要移动数据，其所有操作都可以在O(logn)时间范围内完成。另外，基于红黑树的map在通过迭代器遍历时，得到的是key按序排列后的结果，这点特性在很多操作中非常方便。</p><p>面试时候现场写红黑树代码的概率几乎为0，但是红黑树一些基本概念还是需要掌握的。</p><ol><li><p>它是二叉排序树（继承二叉排序树特显）：</p><ul><li><p>若左子树不空，则左子树上所有结点的值均小于或等于它的根结点的值。</p></li><li><p>若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值。</p></li><li><p>左、右子树也分别为二叉排序树。</p></li></ul></li><li><p>它满足如下几点要求：</p><ul><li><p>树中所有节点非红即黑。</p></li><li><p>根节点必为黑节点。</p></li><li><p>红节点的子节点必为黑（黑节点子节点可为黑）。</p></li><li><p>从根到NULL的任何路径上黑结点数相同。</p></li></ul></li><li><p>查找时间一定可以控制在O(logn)。</p></li><li><p>红黑树的节点定义如下：</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;</span><br><span class="line">    RED = <span class="number">0</span>,</span><br><span class="line">    BLACK = <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span>*<span class="title">left</span>, *<span class="title">right</span>, *<span class="title">parent</span>;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Color color;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>所以对红黑树的操作需要满足两点：1.满足二叉排序树的要求；2.满足红黑树自身要求。通常在找到节点通过和根节点比较找到插入位置之后，还需要结合红黑树自身限制条件对子树进行左旋和右旋。</p><p>相比于AVL树，红黑树平衡性要稍微差一些，不过创建红黑树时所需的旋转操作也会少很多。相比于最简单的BST，BST最差情况下查找的时间复杂度会上升至O(n)，而红黑树最坏情况下查找效率依旧是O(logn)。所以说红黑树之所以能够在STL及Linux内核中被广泛应用就是因为其折中了两种方案，既减少了树高，又减少了建树时旋转的次数。</p><p>从红黑树的定义来看，红黑树从根到NULL的每条路径拥有相同的黑节点数（假设为n），所以最短的路径长度为n（全为黑节点情况）。因为红节点不能连续出现，所以路径最长的情况就是插入最多的红色节点，在黑节点数一致的情况下，最可观的情况就是黑红黑红排列……最长路径不会大于2n，这里路径长就是树高。</p><p><strong>set</strong></p><hr><h3 id="编译及调试"><a href="#编译及调试" class="headerlink" title="编译及调试"></a><span id="other">编译及调试</span></h3><p><strong>编译</strong></p><p>预处理</p><ul><li><p>展开所有的宏定义，完成字符常量替换。</p></li><li><p>处理条件编译语句，通过是否具有某个宏来决定过滤掉哪些代码。</p></li><li><p>处理#include指令，将被包含的文件插入到该指令所在位置。</p></li><li><p>过滤掉所有注释语句。</p></li><li><p>添加行号和文件名标识。</p></li><li><p>保留所有#pragma编译器指令。</p></li></ul><p>编译</p><ul><li><p>词法分析。</p></li><li><p>语法分析。</p></li><li><p>语义分析。</p></li><li><p>中间语言生成。</p></li><li><p>目标代码生成与优化。</p></li></ul><p>链接</p><p>各个源代码模块独立的被编译，然后将他们组装起来成为一个整体，组装的过程就是链接。被链接的各个部分本本身就是二进制文件，所以在被链接时需要将所有目标文件的代码段拼接在一起，然后将所有对符号地址的引用加以修正。</p><ul><li><p>静态链接</p><p>  静态链接最简单的情况就是在编译时和静态库链接在一起成为完整的可执行程序。这里所说的静态库就是对多个目标文件（.o）文件的打包，通常静态链接的包名为lib****.a，静态链接所有被用到的目标文件都会复制到最终生成的可执行目标文件中。这种方式的好处是在运行时，可执行目标文件已经完全装载完毕，只要按指令序执行即可，速度比较快，但缺点也有很多，在讲动态链接时会比较一下。</p><p>  既然静态链接是对目标文件的打包，这里介绍些打包命令。</p><pre><code>gcc -c test1.c    // 生成test1.ogcc -c test2.c    // 生成test2.car cr libtest.a test1.o test2.o</code></pre><p>  首先编译得到test1.o和test2.o两个目标文件，之后通过ar命令将这两个文件打包为.a文件，文件名格式为lib + 静态库名 + .a后缀。在生成可执行文件需要使用到它的时候只需要在编译时加上即可。需要注意的是，使用静态库时加在最后的名字不是libtest.a，而是l + 静态库名。</p><pre><code>gcc -o main main.c -ltest</code></pre></li><li><p>动态链接</p><p>  静态链接发生于编译阶段，加载至内存前已经完整，但缺点是如果多个程序都需要使用某个静态库，则该静态库会在每个程序中都拷贝一份，非常浪费内存资源，所以出现了动态链接的方式来解决这个问题。</p><p>  动态链接在形式上倒是和静态链接非常相似，首先也是需要打包，打包成动态库，不过文件名格式为lib + 动态库名 + .so后缀。不过动态库的打包不需要使用ar命令，gcc就可以完成，但要注意在编译时要加上-fPIC选项，打包时加上-shared选项。</p><pre><code>gcc -fPIC -c test1.c gcc -fPIC -c test2.cgcc -shared test1.o test2.o -o libtest.so</code></pre><p>  使用动态链接的用法也和静态链接相同。</p><pre><code>gcc -o main main.c -ltest</code></pre></li></ul><p>如果仅仅像上面的步骤是没有办法正常使用库的，我们可以通过加-Lpath指定搜索库文件的目录（-L.表示当前目录），默认情况下会到环境变量LD_LIBRARY_PATH指定的目录下搜索库文件，默认情况是/usr/lib，我们可以将库文件拷贝到那个目录下再链接。</p><p>比较静态库和动态库我们可以得到二者的优缺点。</p><ul><li><p>动态库运行时会先检查内存中是否已经有该库的拷贝，若有则共享拷贝，否则重新加载动态库（C语言的标准库就是动态库）。静态库则是每次在编译阶段都将静态库文件打包进去，当某个库被多次引用到时，内存中会有多份副本，浪费资源。</p></li><li><p>动态库另一个有点就是更新很容易，当库发生变化时，如果接口没变只需要用新的动态库替换掉就可以了。但是如果是静态库的话就需要重新被编译。</p></li><li><p>不过静态库也有优点，主要就是静态库一次性完成了所有内容的绑定，运行时就不必再去考虑链接的问题了，执行效率会稍微高一些。</p></li></ul><p>makefile编写</p><p>对于大的工程通常涉及很多头文件和源文件，编译起来很很麻烦，makefile正是为了自动化编译产生的，makefile像是编译说明书，指示编译的步骤和条件，之后被make命令解释。</p><ul><li><p>基本规则</p><pre><code>A:B(tab)&lt;command&gt;</code></pre><p>  其中A是语句最后生成的文件，B是生成A所依赖的文件，比如生成test.o依赖于test.c和test.h，则写成test.o:test.c test.h。接下来一行的开头必须是tab，再往下就是实际的命令了，比如gcc -c test.c -o test.o。</p></li><li><p>变量</p><p>  makefile的书写非常像shell脚本，可以在文件中定义”变量名 = 变量值”的形式，之后需要使用这个变量时只需要写一个$符号加上变量名即可，当然，和shell一样，最好用()包裹起语句来。</p></li></ul><p><strong>链接</strong></p><p>符号解析</p><ul><li><p>可重定位目标文件</p><p>  对于独立编译的可重定位目标文件，其ELF文件格式包括ELF头（指定文件大小及字节序）、.text（代码段）、.rodata（只读数据区）、.data（已初始化数据区）、.bss（未初始化全局变量）、.symtab（符号表）等，其中链接时最需要关注的就是符号表。每个可重定位目标文件都有一张符号表，它包含该模块定义和引用的符号的信息，简而言之就是我们在每个模块中定义和引用的全局变量（包括定义在本模块的全局变量、静态全局变量和引用自定义在其他模块的全局变量）需要通过一张表来记录，在链接时通过查表将各个独立的目标文件合并成一个完整的可执行文件。</p></li><li><p>解析符号表</p><p>  解析符号引用的目的是将每个引用与可重定位目标文件的符号表中的一个符号定义联系起来。</p></li></ul><p>重定位</p><ul><li><p>合并节</p><p>  多个可重定位目标文件中相同的节合并成一个完整的聚合节，比如多个目标文件的.data节合并成可执行文件的.data节。链接器将运行时存储地址赋予每个节，完成这步每条指令和全局变量都有运行时地址了。</p></li><li><p>重定位符号引用</p><p>  这步修改全部代码节和数据节对每个符号的符号引用，使其指向正确的运行时地址。局部变量可以通过进栈、出栈临时分配，但全局变量（”符号”）的位置则是在各个可重定位目标文件中预留好的。通过上一步合并节操作后，指令中所有涉及符号的引用都会通过一定的寻址方式来定位该符号，比如相对寻址、绝对寻址等。</p></li></ul><p>可执行目标文件</p><ul><li><p>ELF头部</p><p>  描述文件总体格式，并且包括程序的入口点（entry point），也就是程序运行时执行的第一条指令地址。</p></li><li><p>段头部表</p><p>  描述了可执行文件数据段、代码段等各段的大小、虚拟地址、段对齐、执行权限等。实际上通过段头部表描绘了虚拟存储器运行时存储映像，比如每个UNIX程序的代码段总是从虚拟地址Ox0804800开始的。</p></li><li><p>其他段</p><p>  和可重定位目标文件各段基本相同，但完成了多个节的合并和重定位工作。</p></li></ul><p>加载</p><ul><li><p>克隆</p><p>  新程序的执行首先需要通过父进程外壳通过fork得到一个子进程，该子进程除了pid等标识和父进程不同外其他基本均与父进程相同。</p></li><li><p>重新映射</p><p>  当子进程执行execve系统调用时会先清空子进程现有的虚拟存储器段（简而言之就是不再映射到父进程的各个段），之后重新创建子进程虚拟存储器各段和可执行目标文件各段的映射。这个阶段我们可以理解为对复制来的父进程页表进程重写，映射到外存中可执行文件的各个段。</p></li><li><p>虚页调入</p><p>  加载过程并没有实际将磁盘中可执行文件调入内存，所做的工作紧紧是复制父进程页表、清空旧页表、建立新页表映射工作。之后加载器跳转到入口地址_start开始执行程序，接下来的过程需要配合虚拟存储器来完成。CPU获得指令的虚拟地址后，若包含该指令或数据的页尚未调入内存则将其从外存中调入，调入内存后修改页表得到虚拟页号和物理页号的对应关系。之后重新取同一条指令或数据时因该页已经被调入内存，所以通过虚拟地址得到虚拟页号，虚拟页号通过查页表可以得到物理页号，通过物理页号 + 页内偏移得到具体的物理地址，此时可以通过物理地址取得想要的数据。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;编程语言-C-C&quot;&gt;&lt;a href=&quot;#编程语言-C-C&quot; class=&quot;headerlink&quot; title=&quot;编程语言(C/C++)&quot;&gt;&lt;/a&gt;编程语言(C/C++)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;都是语言，为什么英语比C++难这么多呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Chapter 1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Chapter 2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Chapter 3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Chapter 4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;base&quot;&gt;编程基础&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;#oop&quot;&gt;面向对象基础&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;#stl&quot;&gt;标准模板库&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;#other&quot;&gt;编译及调试&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;h3 id=&quot;编程基础&quot;&gt;&lt;a href=&quot;#编程基础&quot; class=&quot;headerlink&quot; title=&quot;编程基础&quot;&gt;&lt;/a&gt;&lt;span id=&quot;base&quot;&gt;编程基础&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;C/C++的内容又多又杂，常常看到有人罗列相关书单，觉得毫无意义，我不相信他们真的完全掌握了其中任何一本。学习任何东西，首先要掌握基本概念，基础不牢地动山摇，因为高级的内容都是通过低级的概念来描述的。当基本概念都没理解透，学习再多都是空中楼阁。这里罗列了一些听基本的问题，虽然看着不难，但是精确理解每句话中的每个词真的并不容易。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;变量声明和定义区别？&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://kaaier.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://kaaier.github.io/tags/C/"/>
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Reinforcement Learning  Tutorila</title>
    <link href="https://kaaier.github.io/2019/04/15/Reinforcement-learning/"/>
    <id>https://kaaier.github.io/2019/04/15/Reinforcement-learning/</id>
    <published>2019-04-15T02:24:10.000Z</published>
    <updated>2019-08-06T16:10:57.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reinforcement-Learning-Methods-and-Tutorials"><a href="#Reinforcement-Learning-Methods-and-Tutorials" class="headerlink" title="Reinforcement Learning Methods and Tutorials"></a>Reinforcement Learning Methods and Tutorials</h1><h5 id="转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files"><a href="#转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files" class="headerlink" title="转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接 liufuyang’s notebook files"></a>转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接 <a href="https://github.com/liufuyang" target="_blank" rel="noopener">liufuyang’s</a> <a href="https://github.com/MorvanZhou/PyTorch-Tutorial/tree/master/tutorial-contents-notebooks" target="_blank" rel="noopener"><strong>notebook files</strong></a></h5><h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul><li>Tutorials<ul><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/1_command_line_reinforcement_learning" target="_blank" rel="noopener">Simple entry example</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/2_Q_Learning_maze" target="_blank" rel="noopener">Q-learning</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/3_Sarsa_maze" target="_blank" rel="noopener">Sarsa</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/4_Sarsa_lambda_maze" target="_blank" rel="noopener">Sarsa(lambda)</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5_Deep_Q_Network" target="_blank" rel="noopener">Deep Q Network (DQN)</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/6_OpenAI_gym" target="_blank" rel="noopener">Using OpenAI Gym</a><a id="more"></a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.1_Double_DQN" target="_blank" rel="noopener">Double DQN</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.2_Prioritized_Replay_DQN" target="_blank" rel="noopener">DQN with Prioitized Experience Replay</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.3_Dueling_DQN" target="_blank" rel="noopener">Dueling DQN</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/7_Policy_gradient_softmax" target="_blank" rel="noopener">Policy Gradients</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/8_Actor_Critic_Advantage" target="_blank" rel="noopener">Actor-Critic</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/9_Deep_Deterministic_Policy_Gradient_DDPG" target="_blank" rel="noopener">Deep Deterministic Policy Gradient (DDPG)</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/10_A3C" target="_blank" rel="noopener">A3C</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/11_Dyna_Q" target="_blank" rel="noopener">Dyna-Q</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/12_Proximal_Policy_Optimization" target="_blank" rel="noopener">Proximal Policy Optimization (PPO)</a></li><li><a href="/contents/Curiosity_Model">Curiosity Model</a>, <a href="/contents/Curiosity_Model/Random_Network_Distillation.py">Random Network Distillation (RND)</a></li></ul></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/experiments" target="_blank" rel="noopener">Some of my experiments</a><ul><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/experiments/2D_car" target="_blank" rel="noopener">2D Car</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/experiments/Robot_arm" target="_blank" rel="noopener">Robot arm</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/experiments/Solve_BipedalWalker" target="_blank" rel="noopener">BipedalWalker</a></li><li><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/experiments/Solve_LunarLander" target="_blank" rel="noopener">LunarLander</a></li></ul></li></ul><h1 id="Some-RL-Networks"><a href="#Some-RL-Networks" class="headerlink" title="Some RL Networks"></a>Some RL Networks</h1><h3 id="Deep-Q-Network"><a href="#Deep-Q-Network" class="headerlink" title="Deep Q Network"></a><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5_Deep_Q_Network" target="_blank" rel="noopener">Deep Q Network</a></h3><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5_Deep_Q_Network" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/reinforcement-learning/4-3-2.png"></a><h3 id="Double-DQN"><a href="#Double-DQN" class="headerlink" title="Double DQN"></a><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.1_Double_DQN" target="_blank" rel="noopener">Double DQN</a></h3><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.1_Double_DQN" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/reinforcement-learning/4-5-3.png"></a><h3 id="Dueling-DQN"><a href="#Dueling-DQN" class="headerlink" title="Dueling DQN"></a><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.3_Dueling_DQN" target="_blank" rel="noopener">Dueling DQN</a></h3><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5.3_Dueling_DQN" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/reinforcement-learning/4-7-4.png"></a><h3 id="Actor-Critic"><a href="#Actor-Critic" class="headerlink" title="Actor Critic"></a><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/8_Actor_Critic_Advantage" target="_blank" rel="noopener">Actor Critic</a></h3><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/8_Actor_Critic_Advantage" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/reinforcement-learning/6-1-1.png"></a><h3 id="Deep-Deterministic-Policy-Gradient"><a href="#Deep-Deterministic-Policy-Gradient" class="headerlink" title="Deep Deterministic Policy Gradient"></a><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/9_Deep_Deterministic_Policy_Gradient_DDPG" target="_blank" rel="noopener">Deep Deterministic Policy Gradient</a></h3><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/9_Deep_Deterministic_Policy_Gradient_DDPG" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/reinforcement-learning/6-2-2.png"></a><h3 id="A3C"><a href="#A3C" class="headerlink" title="A3C"></a><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/10_A3C" target="_blank" rel="noopener">A3C</a></h3><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/10_A3C" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/reinforcement-learning/6-3-2.png"></a><h3 id="Proximal-Policy-Optimization-PPO"><a href="#Proximal-Policy-Optimization-PPO" class="headerlink" title="Proximal Policy Optimization (PPO)"></a><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/12_Proximal_Policy_Optimization" target="_blank" rel="noopener">Proximal Policy Optimization (PPO)</a></h3><a href="https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/12_Proximal_Policy_Optimization" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/reinforcement-learning/6-4-3.png"></a><h3 id="Curiosity-Model"><a href="#Curiosity-Model" class="headerlink" title="Curiosity Model"></a><a href="/contents/Curiosity_Model">Curiosity Model</a></h3><a href="/contents/Curiosity_Model">    <img class="course-image" src="/contents/Curiosity_Model/Curiosity.png"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Reinforcement-Learning-Methods-and-Tutorials&quot;&gt;&lt;a href=&quot;#Reinforcement-Learning-Methods-and-Tutorials&quot; class=&quot;headerlink&quot; title=&quot;Reinforcement Learning Methods and Tutorials&quot;&gt;&lt;/a&gt;Reinforcement Learning Methods and Tutorials&lt;/h1&gt;&lt;h5 id=&quot;转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files&quot;&gt;&lt;a href=&quot;#转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files&quot; class=&quot;headerlink&quot; title=&quot;转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接 liufuyang’s notebook files&quot;&gt;&lt;/a&gt;转自莫烦大佬强化学习教程，方便自己后期知识巩固。感谢！教程链接 &lt;a href=&quot;https://github.com/liufuyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;liufuyang’s&lt;/a&gt; &lt;a href=&quot;https://github.com/MorvanZhou/PyTorch-Tutorial/tree/master/tutorial-contents-notebooks&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;notebook files&lt;/strong&gt;&lt;/a&gt;&lt;/h5&gt;&lt;h1 id=&quot;Table-of-Contents&quot;&gt;&lt;a href=&quot;#Table-of-Contents&quot; class=&quot;headerlink&quot; title=&quot;Table of Contents&quot;&gt;&lt;/a&gt;Table of Contents&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Tutorials&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/1_command_line_reinforcement_learning&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Simple entry example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/2_Q_Learning_maze&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Q-learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/3_Sarsa_maze&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sarsa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/4_Sarsa_lambda_maze&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sarsa(lambda)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/5_Deep_Q_Network&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Deep Q Network (DQN)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/tree/master/contents/6_OpenAI_gym&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Using OpenAI Gym&lt;/a&gt;
    
    </summary>
    
      <category term="Deep-Learning" scheme="https://kaaier.github.io/categories/Deep-Learning/"/>
    
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
      <category term="Deep-Learning" scheme="https://kaaier.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow Tutorials</title>
    <link href="https://kaaier.github.io/2019/03/16/Tensorflow%20Tutorila/"/>
    <id>https://kaaier.github.io/2019/03/16/Tensorflow Tutorila/</id>
    <published>2019-03-16T03:21:20.000Z</published>
    <updated>2019-08-06T16:08:12.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tensorflow-Tutorials"><a href="#Tensorflow-Tutorials" class="headerlink" title="Tensorflow Tutorials"></a>Tensorflow Tutorials</h1><h5 id="转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files"><a href="#转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files" class="headerlink" title="转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接 liufuyang’s notebook files"></a>转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接 <a href="https://github.com/liufuyang" target="_blank" rel="noopener">liufuyang’s</a> <a href="https://github.com/MorvanZhou/PyTorch-Tutorial/tree/master/tutorial-contents-notebooks" target="_blank" rel="noopener"><strong>notebook files</strong></a></h5><ul><li>Tensorflow basic<ul><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/201_session.py" target="_blank" rel="noopener">Session</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/202_placeholder.py" target="_blank" rel="noopener">Placeholder</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/203_variable.py" target="_blank" rel="noopener">Variable</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/204_activation.py" target="_blank" rel="noopener">Activation</a></li></ul></li><li>Build your first network<ul><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/301_simple_regression.py" target="_blank" rel="noopener">Regression</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/302_simple_classification.py" target="_blank" rel="noopener">Classification</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/303_save_reload.py" target="_blank" rel="noopener">Save and reload</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/304_optimizer.py" target="_blank" rel="noopener">Optimizers</a><a id="more"></a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/305_tensorboard.py" target="_blank" rel="noopener">Tensorboard</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/306_dataset.py" target="_blank" rel="noopener">Dataset</a></li></ul></li><li>Advanced neural network<ul><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/401_CNN.py" target="_blank" rel="noopener">CNN</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/402_RNN_classification.py" target="_blank" rel="noopener">RNN-Classification</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/403_RNN_regression.py" target="_blank" rel="noopener">RNN-Regression</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/404_AutoEncoder.py" target="_blank" rel="noopener">AutoEncoder</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/405_DQN_reinforcement_learning.py" target="_blank" rel="noopener">DQN Reinforcement Learning</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/406_GAN.py" target="_blank" rel="noopener">GAN (Generative Adversarial Nets)</a> / <a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/406_conditional_GAN.py" target="_blank" rel="noopener">Conditional GAN</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/407_transfer_learning.py" target="_blank" rel="noopener">Transfer Learning</a></li></ul></li><li>Others (WIP)<ul><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/501_dropout.py" target="_blank" rel="noopener">Dropout</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/502_batch_normalization.py" target="_blank" rel="noopener">Batch Normalization</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/503_visualize_gradient_descent.py" target="_blank" rel="noopener">Visualize Gradient Descent</a></li><li><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/504_distributed_training.py" target="_blank" rel="noopener">Distributed training</a></li></ul></li></ul><h3 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/301_simple_regression.py" target="_blank" rel="noopener">Regression</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/301_simple_regression.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/1-1-2.gif"></a><h3 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/302_simple_classification.py" target="_blank" rel="noopener">Classification</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/302_simple_classification.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/1-1-3.gif"></a><h3 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/401_CNN.py" target="_blank" rel="noopener">CNN</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/401_CNN.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-1-2.gif"></a><h3 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/403_RNN_regression.py" target="_blank" rel="noopener">RNN</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/403_RNN_regression.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-3-1.gif"></a><h3 id="Autoencoder"><a href="#Autoencoder" class="headerlink" title="Autoencoder"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/404_AutoEncoder.py" target="_blank" rel="noopener">Autoencoder</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/404_AutoEncoder.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-4-1.gif"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/404_AutoEncoder.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-4-2.gif"></a><h3 id="GAN-Generative-Adversarial-Nets"><a href="#GAN-Generative-Adversarial-Nets" class="headerlink" title="GAN (Generative Adversarial Nets)"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/406_GAN.py" target="_blank" rel="noopener">GAN (Generative Adversarial Nets)</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/406_GAN.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-6-1.gif"></a><h3 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/501_dropout.py" target="_blank" rel="noopener">Dropout</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/501_dropout.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/5-3-1.gif"></a><h3 id="Batch-Normalization"><a href="#Batch-Normalization" class="headerlink" title="Batch Normalization"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/502_batch_normalization.py" target="_blank" rel="noopener">Batch Normalization</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/502_batch_normalization.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/5-4-2.gif"></a><h3 id="Visualize-Gradient-Descent"><a href="#Visualize-Gradient-Descent" class="headerlink" title="Visualize Gradient Descent"></a><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/503_visualize_gradient_descent.py" target="_blank" rel="noopener">Visualize Gradient Descent</a></h3><a href="https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/503_visualize_gradient_descent.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/tensorflow/5_15_01.gif"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Tensorflow-Tutorials&quot;&gt;&lt;a href=&quot;#Tensorflow-Tutorials&quot; class=&quot;headerlink&quot; title=&quot;Tensorflow Tutorials&quot;&gt;&lt;/a&gt;Tensorflow Tutorials&lt;/h1&gt;&lt;h5 id=&quot;转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files&quot;&gt;&lt;a href=&quot;#转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files&quot; class=&quot;headerlink&quot; title=&quot;转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接 liufuyang’s notebook files&quot;&gt;&lt;/a&gt;转自莫烦大佬Tensorflow学习教程，方便自己后期知识巩固。感谢！教程链接 &lt;a href=&quot;https://github.com/liufuyang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;liufuyang’s&lt;/a&gt; &lt;a href=&quot;https://github.com/MorvanZhou/PyTorch-Tutorial/tree/master/tutorial-contents-notebooks&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;notebook files&lt;/strong&gt;&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Tensorflow basic&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/201_session.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/202_placeholder.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Placeholder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/203_variable.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/204_activation.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Activation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Build your first network&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/301_simple_regression.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/302_simple_classification.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Classification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/303_save_reload.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Save and reload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MorvanZhou/Tensorflow-Tutorial/blob/master/tutorial-contents/304_optimizer.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Optimizers&lt;/a&gt;
    
    </summary>
    
      <category term="Deep-Learning" scheme="https://kaaier.github.io/categories/Deep-Learning/"/>
    
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
      <category term="Deep-Learning" scheme="https://kaaier.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch Tutorila</title>
    <link href="https://kaaier.github.io/2019/03/15/Pytorch%20Tutorila/"/>
    <id>https://kaaier.github.io/2019/03/15/Pytorch Tutorila/</id>
    <published>2019-03-15T03:21:20.000Z</published>
    <updated>2019-08-06T16:02:55.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyTorch-Tutorials"><a href="#pyTorch-Tutorials" class="headerlink" title="pyTorch Tutorials"></a>pyTorch Tutorials</h1><h5 id="转自莫烦大佬Pytorch学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files"><a href="#转自莫烦大佬Pytorch学习教程，方便自己后期知识巩固。感谢！教程链接-liufuyang’s-notebook-files" class="headerlink" title="转自莫烦大佬Pytorch学习教程，方便自己后期知识巩固。感谢！教程链接 liufuyang’s notebook files"></a>转自莫烦大佬Pytorch学习教程，方便自己后期知识巩固。感谢！教程链接 <a href="https://github.com/liufuyang" target="_blank" rel="noopener">liufuyang’s</a> <a href="https://github.com/MorvanZhou/PyTorch-Tutorial/tree/master/tutorial-contents-notebooks" target="_blank" rel="noopener"><strong>notebook files</strong></a></h5><ul><li>pyTorch basic<ul><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/201_torch_numpy.py" target="_blank" rel="noopener">torch and numpy</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/202_variable.py" target="_blank" rel="noopener">Variable</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/203_activation.py" target="_blank" rel="noopener">Activation</a></li></ul></li><li>Build your first network<ul><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/301_regression.py" target="_blank" rel="noopener">Regression</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/302_classification.py" target="_blank" rel="noopener">Classification</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/303_build_nn_quickly.py" target="_blank" rel="noopener">An easy way</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/304_save_reload.py" target="_blank" rel="noopener">Save and reload</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/305_batch_train.py" target="_blank" rel="noopener">Train on batch</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/306_optimizer.py" target="_blank" rel="noopener">Optimizers</a></li></ul></li><li>Advanced neural network<ul><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/401_CNN.py" target="_blank" rel="noopener">CNN</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/402_RNN_classifier.py" target="_blank" rel="noopener">RNN-Classification</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/403_RNN_regressor.py" target="_blank" rel="noopener">RNN-Regression</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/404_autoencoder.py" target="_blank" rel="noopener">AutoEncoder</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/405_DQN_Reinforcement_learning.py" target="_blank" rel="noopener">DQN Reinforcement Learning</a></li><li><a href="https://github.com/MorvanZhou/pytorch-A3C" target="_blank" rel="noopener">A3C Reinforcement Learning</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/406_GAN.py" target="_blank" rel="noopener">GAN (Generative Adversarial Nets)</a> / <a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/406_conditional_GAN.py" target="_blank" rel="noopener">Conditional GAN</a></li></ul></li><li>Others (WIP)<ul><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/501_why_torch_dynamic_graph.py" target="_blank" rel="noopener">Why torch dynamic</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/502_GPU.py" target="_blank" rel="noopener">Train on GPU</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/503_dropout.py" target="_blank" rel="noopener">Dropout</a></li><li><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/504_batch_normalization.py" target="_blank" rel="noopener">Batch Normalization</a></li></ul></li></ul><p><strong>For Chinese speakers: All methods mentioned below have their video and text tutorial in Chinese.<br>Visit <a href="https://morvanzhou.github.io/tutorials/" target="_blank" rel="noopener">莫烦 Python</a> for more.<br>You can watch my <a href="https://www.youtube.com/channel/UCdyjiB5H8Pu7aDTNVXTTpcg" target="_blank" rel="noopener">Youtube channel</a> as well.</strong></p><h3 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/301_regression.py" target="_blank" rel="noopener">Regression</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/301_regression.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/1-1-2.gif"></a><h3 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/302_classification.py" target="_blank" rel="noopener">Classification</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/302_classification.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/1-1-3.gif"></a><h3 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/401_CNN.py" target="_blank" rel="noopener">CNN</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/401_CNN.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-1-2.gif"></a><h3 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/403_RNN_regressor.py" target="_blank" rel="noopener">RNN</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/403_RNN_regressor.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-3-1.gif"></a><h3 id="Autoencoder"><a href="#Autoencoder" class="headerlink" title="Autoencoder"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/404_autoencoder.py" target="_blank" rel="noopener">Autoencoder</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/403_RNN_regressor.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-4-1.gif"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/403_RNN_regressor.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-4-2.gif"></a><h3 id="GAN-Generative-Adversarial-Nets"><a href="#GAN-Generative-Adversarial-Nets" class="headerlink" title="GAN (Generative Adversarial Nets)"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/406_GAN.py" target="_blank" rel="noopener">GAN (Generative Adversarial Nets)</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/406_GAN.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/4-6-1.gif"></a><h3 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/503_dropout.py" target="_blank" rel="noopener">Dropout</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/503_dropout.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/5-3-1.gif"></a><h3 id="Batch-Normalization"><a href="#Batch-Normalization" class="headerlink" title="Batch Normalization"></a><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/504_batch_normalization.py" target="_blank" rel="noopener">Batch Normalization</a></h3><a href="https://github.com/MorvanZhou/PyTorch-Tutorial/blob/master/tutorial-contents/504_batch_normalization.py" target="_blank" rel="noopener">    <img class="course-image" src="https://morvanzhou.github.io/static/results/torch/5-4-2.gif"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pyTorch-Tutorials&quot;&gt;&lt;a href=&quot;#pyTorch-Tutorials&quot; class=&quot;headerlink&quot; title=&quot;pyTorch Tutorials&quot;&gt;&lt;/a&gt;pyTorch Tutorials&lt;/h1&gt;&lt;h5 id=&quot;转自莫烦大
      
    
    </summary>
    
      <category term="Deep-Learning" scheme="https://kaaier.github.io/categories/Deep-Learning/"/>
    
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
      <category term="Deep-Learning" scheme="https://kaaier.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>面试题(计算机基础)</title>
    <link href="https://kaaier.github.io/2019/03/14/%E7%9C%9F%E9%A2%98%E6%91%98%E5%BD%95/"/>
    <id>https://kaaier.github.io/2019/03/14/真题摘录/</id>
    <published>2019-03-14T02:41:50.000Z</published>
    <updated>2019-08-07T01:29:30.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><table><thead><tr><th align="center">Chapter 1</th><th align="center">Chapter 2</th><th align="center">Chapter 3</th></tr></thead><tbody><tr><td align="center"><a href="#t">Tencent</a></td><td align="center"><a href="#n">NetEase</a></td><td align="center"><a href="360">360</a></td></tr></tbody></table><h2 id="Tencent"><a href="#Tencent" class="headerlink" title="Tencent"></a><span id="t">Tencent</span></h2><h3 id="模拟1"><a href="#模拟1" class="headerlink" title="模拟1"></a>模拟1</h3><p>Q1 :</p><pre><code>题目：    随着IP网络的发展，为了节省可分配的注册IP地址，有一些地址被拿出来用于私有IP地址，以下不属于私有IP地址范围的是：    A. 10.6.207.84    B. 172.23.30.28    C. 172.32.50.80    D. 192.168.1.100答案：    C解答：    1. 私有IP地址共有三个范围段：        A: 10.0.0.0~10.255.255.255，即10.0.0.0/8。        B: 172.16.0.0~172.31.255.255，即172.16.0.0/12。        C: 192.168.0.0~192.168.255.255，即192.168.0.0/16。    2. 私有IP在公网上不能使用，但在内网内可以通过NAT技术分配给具体设备，节省IP地址。</code></pre><p>Q2 :</p><pre><code>题目：    下列关于一个类的静态成员的描述中，不正确的是：    A. 该类的对象共享其静态成员变量的值    B. 静态成员变量可被该类的所有方法访问    C. 该类的静态方法能访问该类的静态成员变量    D. 该类的静态数据成员变量的值不可修改答案：    D解答：    1. 类的静态成员和对象无关，和类相关，一个类的所有实例共享同一个静态成员。    2. 静态成员函数不能调用非静态成员。    3. 非静态成员函数可以调用静态成员。    4. 静态成员变量必须初始化，且可以修改。</code></pre><p>Q3 :</p><pre><code>题目：    C++将父类的析构函数定义为虚函数，下列正确的是哪个：    A. 释放父类指针时能正确释放子类对象    B. 释放子类指针时能正确释放父类对象    C. 这样做是错误的    D. 以上全错答案：    A解答：    1. 基类通常应定义一个虚析构函数，以确保能正确执行析构函数。    2. 基类指针指向派生类对象，若基类析构函数未声明为虚函数，则只会调用基类析构函数。    3. 基类声明为虚函数，释放指向派生类对象的基类指针时会先调用派生类析构函数，之后调用基类析构函数。</code></pre><p>Q4 :</p><pre><code>题目：    下列哪一个不属于关系数据库的特点：    A. 数据冗余度小    B. 数据独立性高    C. 数据共享性好    D. 多用户访问答案：    D解答：    1. 数据库存在的一个目的就是统一管理数据，减少数据冗余度。    2. 数据独立性，指数据和其管理软件独立，以及数据及其结构的独立。    3. 数据库就是为了方便用户之间共享数据。    4. 数据库中存在锁机制，如果多用户访问可能导致数据不一致等。</code></pre><p>Q5 :</p><pre><code>题目：    typedef char *String_t和#define String_d char *这两句在使用上有什么区别？答案：    1. typedef char *String_t定义了一个新的类型别名，有类型检查，更安全。发生在编译阶段。    2. #define String_d char *仅仅是做字符串替换，无类型检查。发生在预编译阶段。    3. 用法区别：String_t a, b;                String_d c, d; -&gt; char *c, d;                a, b ,c是char*类型，而d为char类型。</code></pre><p>Q6 :</p><pre><code>题目：    void Func(char str_arg[2]){        int m = sizeof(str_arg);        int n = strlen(str_arg);        printf(&quot;%d\n&quot;, m);        printf(&quot;%d\n&quot;, n);    }    int main(void){        char str[]=&quot;Hello&quot;;        Func(str);    }    输出结果为：答案：    4，5    1. str为定义在main函数中的数组。    2. 数组作为参数传递给函数会退化为指针。    3. sizeof(指针变量) = 指针变量大小，strlen(指针变量) = 指针所指向的字符串长（遇&apos;\0&apos;停止）。</code></pre><p>Q7 :</p><pre><code>题目：    给定一个字符串,求出其最长的重复子串。答案：</code></pre><hr><h3 id="模拟2"><a href="#模拟2" class="headerlink" title="模拟2"></a>模拟2</h3><p>Q1 :</p><pre><code>题目：    Internet物理地址和IP地址转换采用什么协议？答案：    1. MAC地址 -&gt; IP地址：ARP协议。    2. IP地址 -&gt; MAC地址：RARP协议。</code></pre><p><a href="http://blog.csdn.net/lanchengxiaoxiao/article/details/7880276" target="_blank" rel="noopener">Q2</a> :</p><pre><code>题目：    static有什么用途？答案：    1. 修饰变量：        静态局部变量：只定义一次，程序运行期间一直存在，作用于局限于定义的函数内。多线程中需要加锁保护。        静态全局变量：程序运行期间一直存在，作用域为定义它的源文件。    2. 修饰函数：        一个被声明为静态的函数只可被这一模块内的其它函数调用。</code></pre><p>Q3 :</p><pre><code>题目：    引用与指针有什么区别？答案：    1. 指针是个实体，指针的内容是变量地址。引用只是变量别名。    2. 指针可以指向新的变量地址。引用只能在定义时被初始化一次，之后不可变。    3. 指针可以为空。引用不能为空。    4. 指针可以用const修饰，引用不能用const修饰。    5. 获取变量值指针需要解引用。引用不需要解引用。    6. 指针变量需要分配实际内存空间。引用不需要分配内存空间，本身不是变量。    7. 指针的sizeof得到的是指针变量的大小。引用得到的是实际变量的大小。    8. 指针变量++是地址值的增加。引用的++是实际变量值得增加。</code></pre><p>Q4 :</p><pre><code>题目：    全局变量和局部变量在内存中是否有区别？如果有，是什么区别？答案：    1. 作用域：        全局变量：具有全局作用域，只需要定义在一个源文件中就可以在所有源文件中使用。不包含变量定义的文件引用时要用extern声明。        局部变量：具有局部作用域，只在函数运行期间存在，函数结束后就被销毁。    2. 生存周期：        全局变量：定义在静态区，与静态变量存储在一起，伴随程序整个生命周期。        局部变量：定义在栈上，函数结束后释放。</code></pre><p>Q5 :</p><pre><code>题目：    什么是平衡二叉树？答案：    1. 空树或者左右两棵子树高度差绝对值小于1，且子树递归满足此定义。    2. 最小平衡二叉树节点公式：F(n) = F(n - 1) + F(n - 2) + 1。</code></pre><p>Q6 :</p><pre><code>题目：    堆栈溢出一般是由什么原因导致的？答案：    1. 循环的递归调用（每次递归都需要压栈）。    2. 大数据结构的局部变量。</code></pre><p>Q7 :</p><pre><code>题目：    什么函数不能声明为虚函数？答案：    1. 构造函数。虚函数主要针对对象而言，而构造函数是在对象创建之前。    2. 内联函数。不能再运行中动态确定其位置。    3. 静态成员函数。全局通用，不受限于具体对象。</code></pre><p>Q8 :</p><pre><code>题目：   写出floatx与“零值”比较的if语句。答案：    1. if (fabs(x) &lt; 0.00001f)</code></pre><p>Q9 :</p><pre><code>题目：    不能做switch()的参数类型是？答案：    1. 只能是char，int，enum。    2. 不能是bool，long，string，float，double。</code></pre><p>Q10 :</p><pre><code>题目：    用户输入M、N值，从1至N开始顺序循环数数，每数到M输出该数值，直至全部输出。写出C程序。答案：</code></pre><hr><h3 id="模拟3"><a href="#模拟3" class="headerlink" title="模拟3"></a>模拟3</h3><p>Q1 :</p><pre><code>题目：    写出下列代码的输出内容：    int inc(int a){        return(++a);    }    int multi(int*a, int*b, int*c){        return(*c = *a**b);    }    typedef int(FUNC1)(int in);    typedef int(FUNC2)(int*, int*, int*);    void show(FUNC2 fun, int arg1, int*arg2){        FUNC1 *p = &amp;inc;        int temp = p(arg1);        fun(&amp;temp, &amp;arg1, arg2);        printf(&quot;%d\n&quot;, *arg2);    }    int main(){        int a;        show(multi, 10, &amp;a);        return 0;    }答案：    110</code></pre><p>Q2 :</p><pre><code>题目：    如何引用一个已经定义过的全局变量?答案：    1. 用extern重新声明已经在别的模块中定义的全局变量，如果写错变量名将会在链接阶段报错。    2. 引用定义了该全局变量的头文件，如果拼写错误会在编译阶段报错。</code></pre><p>Q3 :</p><pre><code>题目：    语句for(; 1; )有什么问题？它是什么意思？答案：    1. 一直循环执行。    2. 此处如果中间是0，则一次不执行。</code></pre><p>Q4 :</p><pre><code>题目：    static全局变量与普通的全局变量有什么区别？static局部变量和普通局部变量有什么区别？static函数与普通函数有什么区别？答案：    1. static全局变量仅能在定义的源文件中使用，全局变量可以在所有源文件中使用。    2. static局部变量定义于静态区，生命周期为程序整个运行阶段，多次调用函数只定义一次。局部变量定义于栈，调用函数退出即销毁，多次调用多次分配。    3. static函数只能在定义的源文件中使用。普通函数可以在头文件中声明，包含该头文件的源文件均可调用该函数。</code></pre><p>Q5 :</p><pre><code>题目：    请找出下面代码中的所有错误：    #include&lt;string.h&gt;    int main(){        char*src = &quot;hello,world&quot;;        char* dest = NULL;        int len = strlen(src);        dest = (char*)malloc(len); (1)        char* d = dest;        char* s = src[len]; (2)        while(len-- != 0) (3)            d++ = s--; (4)        printf(&quot;%s&quot;, dest);        return 0;    }答案：    1. 分配的空间要为len + 1，用于存放&apos;\0&apos;。    2. s = &amp;src[len]这里是取地址。    3. 改为while(len-- &gt;= 0)。    4. 改为*d++ = *s--。</code></pre><p>Q6 :</p><pre><code>题目：    搜索引擎的日志要记录所有查询串，有一千万条查询，不重复的不超过三百万，要统计最热门的10条查询。    条件：串内存&lt;1G，字符串长0-255。    给出主要解决思路，算法及其复杂度分析。答案：    1. 面对的问题有：        (1)1G内存不够一次性装入所有数据？        (2)如何去统计每个记录出现次数？        (3)如何快速得到前十的记录？    2. 解决方式：        (1)255约2^8，一百万约2^20，即一百万记录约256MB，一千万约2.6GB。分多次处理。        (2)利用hash统计，定义map，key为string类型日志，value为日志出现次数。        (3)利用大根堆，取top 10，复杂度O(nlogn)。    3. 新问题：        如何划分数据？如何归并结果？    4. 方案：        (1)哈希表常驻内存，大小(255 +4) * 3 * 1000000，约800MB。        (2)分13（200MB * 13 = 2.6GB）次调入日志数据，每次取200MB数据进行hash。</code></pre><hr><h3 id="模拟4"><a href="#模拟4" class="headerlink" title="模拟4"></a>模拟4</h3><p>Q1 :</p><pre><code>题目：    考虑函数原型void hello(int a, int b = 7, char* pszC = &quot;*&quot;)，下面的函数调用中，属于不合法调用的是：    A. hello(5);    B. hello(5, 8);    C. hello(6, &quot;#&quot;);    D. hello(0, 0, &quot;#&quot;);答案：    C 解答：    1. 参数从左往右依次赋值。    2. 有默认值时，调用函数参数缺失时使用默认值。    3. 参数中字符串会转为指向字符串的指针。</code></pre><p>Q2 :</p><pre><code>题目：    下列程序的运行结果为：    #include&lt;iostream&gt;    using namespace std;    void main(){        int a = 2;        int b = ++a;        cout &lt;&lt; a / 6 &lt;&lt; endl;    }    A. 0.5    B. 0    C. 0.7    D. 0.666666答案：    B解答：    1. 这里的6仅仅是整型数，所以和a进行操作时不存在精度提升。    2. a的值进过++a之后变为3，3 / 6 = 0。</code></pre><p>Q3 :</p><pre><code>题目：    #define ADD(x, y) x + y    int m = 3;    m += m * ADD(m, m);    m的值为多少：    A. 15    B. 12    C. 18    D. 58答案：    A解答：    1. 原式 = m + [m * m + m] = 3 + [3 * 3 + 3] = 15    2. 有+=时先算右边部分。    3. 除非出现++m，否则在同一条语句内，变量值不会改变。</code></pre><p>Q4 :</p><pre><code>题目：    下面哪种情况下，B不能隐式转换为A?    A. class B:public A{}    B. class A:public B{}    C. class B{operator A();}    D. class A{A(const B&amp;);}答案：    B解答：    1. 派生类 -&gt; 基类，向上级转换是隐式的，只需要丢弃多余的部分即可，反之基类没有多余的空间存放B独有的变量。    2. C是隐式类型转换操作符。    3. D是拷贝构造函数进行隐式转化。</code></pre><p>Q5 :</p><pre><code>题目：    假设你在编写一个使用多线程技术的程序，当程序中止运行时，需要怎样一个机制来安全有效的中止所有的线程?答案：    1. 主线程检查是否有子线程在运行。    2. 若有则发起线程退出操作(quit)。    3. wait线程完全停止，delete线程对象。    4. 等待所有线程结束(发出finish信号)，才退出程序。</code></pre><p>Q6 :</p><pre><code>题目：    从程序健壮性进行分析，下面的FillUserInfo函数和main函数分别存在什么问题?    #define MAX_NAME_LEN 20    struct USERINFO{        int nAge;        char szName[MAX_NAME_LEN];    };    void FillUserInfo(USERINFO *parUserInfo){        stu::cout &lt;&lt; &quot;请输入用户的个数:&quot;;        int nCount = 0;        std::cin &gt;&gt; nCount;        for (int i = 0; i &lt; nCount; i++){            std::cout &lt;&lt; &quot;请输入年龄:&quot;;            std::cin &gt;&gt; parUserInfo[i]-&gt;nAge;            std::string strName;            std::cout &lt;&lt; &quot;请输入姓名:&quot;;            std::cin &gt;&gt; strName;            strcpy(parUserInfo[i].szName, strName.c_str());        }    }    int main(int argc, char *argv[]){        USERINFO arUserInfos[100] = {0};        FillUserInfo(arUserInfos);        printf(&quot;The first name is:&quot;);        printf(arUserInfos[0].szName);        printf(&quot;\n&quot;);        return 0;    }答案：</code></pre><hr><h3 id="模拟5"><a href="#模拟5" class="headerlink" title="模拟5"></a>模拟5</h3><p>Q1 :</p><pre><code>题目：    设某种二叉树有如下特点：每个结点要么是叶子结点，要么有2棵子树。假如一棵这样的二叉树中有m（m &gt; 0）个叶子结点，那么该二叉树上的结点总数为：    A. 2m + 1    B. 2m - 1    C. 2(m - 1)    D. 2m答案：    B解答：    1. 关键考点：         (1)叶子节点数 = 度为2的节点数 + 1        (2)树的度 = 所有节点度的和        (3)树的节点数 = 树的度 + 1    2. 计算步骤：        (1)度为2的节点数 = m - 1        (2)树的度 = m * 0 + 0 * 0 + (m - 1) * 2 = 2m - 2        (3)树的节点数 = (2m - 2) + 1 = 2m - 1</code></pre><p>Q2 :</p><pre><code>题目：    中断响应时间是指：    A. 从中断处理开始到中断处理结束所用的时间    B. 从发出中断请求到中断处理结束所用的时间    C. 从发出中断请求到进入中断处理所用的时间    D. 从中断处理结束到再次中断请求的时间答案：    C解答：    见答案。</code></pre><p>Q3 :</p><pre><code>题目：    试写出“背包题目”的非递归解法。答案：</code></pre><hr><h3 id="模拟6"><a href="#模拟6" class="headerlink" title="模拟6"></a>模拟6</h3><p>Q1 :</p><pre><code>题目：    下推自动识别机的语言是：    A. 0型语言    B. 1型语言    C. 2型语言    D. 3型语言答案：    C 解答：    1. 0型文法产生的语言称为0型语言。    2. 1型文法产生的语言称为1型语言，也称作上下文有关语言。    3. 2型文法产生的语言称为2型语言，也称作上下文无关语言。    4. 3型文法产生的语言称为3型语言，也称作正规语言。</code></pre><p>Q2 :</p><pre><code>题目：    浏览器访问某页面，HTTP协议返回状态码为403时表示：    A. 找不到该页面    B. 禁止访问    C. 内部服务器访问    D. 服务器繁忙答案：    B 解答：    1. 100-199，指定客服端相应的某些动作    2. 200-299，表示请求成功    3. 300-399，用于已经移动的文件并且包含在定位头信息中指定    4. 400-499，客服端错误    5. 500-599，服务端错误</code></pre><p>Q3 :</p><pre><code>题目：    递归函数最终会结束，那么这个函数一定：    A. 使用了局部变量    B. 有一个分支不调用自身    C. 使用了全局变量或者使用了一个或多个参数    D. 没有循环调用答案：    B解答：    1. 分支不调用自身即函数出口。</code></pre><p>Q4 :</p><pre><code>题目：    编译过程中，语法分析器的任务是：    A. 分析单词是怎样构成的    B. 分析单词串是如何构成语言和说明的    C. 分析语句和说明是如何构成程序的    D. 分析程序的结构答案：    B, C, D解答：    1. 词法分析：词法分析是编译过程的第一个阶段。这个阶段的任务是从左到右的读取每个字符，然后根据构词规则识别单词。词法分析可以用lex等工具自动生成。    2. 语法分析：语法分析是编译过程的一个逻辑阶段。语法分析在词法分析的基础上，将单词序列组合成各类语法短语，如“程序”，“语句”，“表达式”等等。语法分析程序判断程序在结构上是否正确。    3. 语义分析：属于逻辑阶段。对源程序进行上下文有关性质的审查，类型检查。如赋值语句左右端类型匹配问题。</code></pre><p>Q5 :</p><pre><code>题目：    进程进入等待状态有哪几种方式:    A. CPU调度给优先级更高的线程    B. 阻塞的线程获得资源或者信号    C. 在时间片轮转的情况下，如果时间片到了    D. 获得spinlock未果答案：    D解答：    1. A和C均是由从运行态转为就绪状态。    2. B是由阻塞状态转为就绪状态。    3. 自旋锁（spinlock）是一种保护临界区最常见的技术。在同一时刻只能有一个进程获得自旋锁，其他企图获得自旋锁的任何进程将一直进行尝试。</code></pre><p>Q6 :</p><pre><code>题目：    同一进程下的线程可以共享以下：    A. stack    B. data section    C. register set    D. file fd答案：    B, D解答：    1. 线程共享的内容包括：        进程代码段        进程的公有数据        进程打开的文件描述符        信号的处理器        进程的当前目录        进程用户ID与进程组ID    2. 线程独有的内容包括：        线程ID        寄存器组的值        线程的堆栈        错误返回码        线程的信号屏蔽码</code></pre><p>Q7 :</p><pre><code>题目：    设计模式中，属于结构型模式的有哪些：    A. 状态模式    B. 装饰模式    C. 代理模式    D. 观察者模式答案：    B, C解答：    1. 创建型模式：        单例模式        抽象工厂模式        建造者模式        工厂模式        原型模式    2. 结构型模式：        适配器模式        桥接模式        装饰模式        组合模式        外观模式        享元模式        代理模式    3. 行为型模式：        模版方法模式        命令模式        迭代器模式        观察者模式        中介者模式        备忘录模式        解释器模式        状态模式        策略模式        职责链模式        访问者模式</code></pre><p>Q8 :</p><pre><code>题目：    Unix系统中，哪些可以用于进程间的通信：    A. Socket    B. 共享内存    C. 消息队列    D. 信号量答案：    A, B，C，D解答：    1. Linux进程间通信：管道、信号、消息队列、共享内存、信号量、套接字。    2. Linux线程间通信：互斥量、信号量、条件变量。    3. Windows进程间通信：管道、消息队列、共享内存、信号量、套接字。    3. Windows线程间通信：互斥量、信号量、临界区、事件。</code></pre><p>Q9 :</p><pre><code>题目：    设t是给定的一棵二叉树，下面的递归程序count(t)用于求得：    typedef struct node{        int data;        struct node *lchild, *rchild;    }node;    int N2, NL, NR, N0;    void count(node *t){        if (t-&gt;lchild != NULL)            if (t-&gt;rchild != NULL) N2++;            else NL++;        else if(t-&gt;rchild != NULL)            NR++;        else N0++;        if(t-&gt;lchild != NULL)            count(t-&gt;lchild);        if(t-&gt;rchild != NULL)            count(t-&gt;rchild);    }答案：</code></pre><p>Q10 :</p><pre><code>题目：    请设计一个排队系统，能够让每个进入队伍的用户都能看到自己在队列中所处的位置和变化，队伍可能随时有人加入和退出；当有人退出影响到用户的位置排名时需要及时反馈到用户。答案：</code></pre><p>Q11 :</p><pre><code>题目：    A、B两个整数集合，设计一个算法求他们的交集，尽可能的高效。答案：</code></pre><hr><h3 id="模拟6-1"><a href="#模拟6-1" class="headerlink" title="模拟6"></a>模拟6</h3><p>Q1 : </p><pre><code>题目：    如何减少换页错误：    A. 进程倾向于占用CPU    B. 访问局部性（locality of reference）满足进程要求    C. 进程倾向于占用I/O    D. 使用基于最短剩余时间（shortest remaining time）的调度机制答案：    B解答：    1. 换页错误又称缺页错误，当一个程序试图访问没有映射到物理内存的地方时，就会出现缺页错误。    2. 减少缺页发生的方法：        增加作业分配的内存块数。        增加页面大小。        页面替换算法。        程序满足局部性原理。</code></pre><p>Q2 : </p><pre><code>题目：    有1000亿条记录，每条记录由url,ip,时间组成，设计一个系统能够快速查询以下内容。    1. 给定url和时间段（精确到分钟）统计url的访问次数。    2. 给定ip和时间段（精确到分钟）统计ip的访问次数。答案：</code></pre><p>Q3 : </p><pre><code>题目：    给定一个包含了用户query的日志文件，对于输入的任意一个字符串s，输出以s为前缀的在日志中出现频率最高的前10条query。    至少有26台机器，每个机器存储以26个字母开头的query日志文件（机器1以a字母开头的，机器2以b字母开头……）。    各机器维护一张哈希表，每条query在哈希表中存放其地址（哈希地址为链式的），并对其进行排序，按频率由高到低进行排序。    当用户进行搜索时，可以很快定位到某台机器，并根据哈希表，返回出现频率最高的前10条query。    提示：    1. 可以预处理日志。    2. 假设query超过10亿条，每个query不超过50字节。    3. 考虑在大查询量的情况下如何实现分布式服务。答案：</code></pre><hr><h3 id="模拟7"><a href="#模拟7" class="headerlink" title="模拟7"></a>模拟7</h3><p>Q1 :</p><pre><code>题目：    下列哪些http方法对于服务端和用户端一定是安全的？    A. GET    B. HEAD    C. TRACE    D. OPTION    E. POST答案：    C 解答：</code></pre><p>Q2 :</p><pre><code>题目：    一个系统，提供多个http协议的接口，返回的结果Y有json格式和jsonp格式。Json的格式为{&quot;code&quot;:100,&quot;msg&quot;:&quot;aaa&quot;}，为了保证该协议变更之后更好的应用到多个接口，为了保证修改协议不影响到原先逻辑的代码，以下哪些设计模式是需要的?协议的变更指的是日后可能返回xml格式，或者是根据需求统一对返回的消息进行过滤。    A. Aadapter    B. factory method    C. proxy    D. decorator    E. composite答案：    A, B, D解答：</code></pre><hr><h3 id="模拟8"><a href="#模拟8" class="headerlink" title="模拟8"></a>模拟8</h3><p>Q1 :</p><pre><code>题目：    在数据库系统中，产生不一致的根本原因是：    A. 数据存储量太大    B. 没有严格保护数据    C. 未对数据进行完整性控制    D. .数据冗余答案：解答：</code></pre><p>Q2 :</p><pre><code>题目：    请问下面的程序一共输出多少个“-”？    int main(void){        int i;        for(i = 0; i &lt; 2; i++){            fork();            printf(&quot;-&quot;);        }        return 0;    }    A. 2    B. 4    C. 6    D. 8答案：解答：</code></pre><p>Q3 :</p><pre><code>题目：    请问下面的程序一共输出多少个“-”？为什么？    #include &lt;stdio.h&gt;    #include &lt;sys/types.h&gt;    #include &lt;unistd.h&gt;     int main(void){        int i;        for (i = 0; i &lt; 2; i++){            fork();            printf(&quot;-\n&quot;);        }        return 0;    }    A. 4    B. 5    C. 6    D. 8答案：解答：</code></pre><p>Q4 :</p><pre><code>题目：    A.    B.    C.    D.答案：解答：</code></pre><p>Q5 :</p><pre><code>题目：    A.    B.    C.    D.答案：解答：</code></pre><hr><h2 id="NetEase"><a href="#NetEase" class="headerlink" title="NetEase"></a><span id="n">NetEase</span></h2><hr><h2 id="360"><a href="#360" class="headerlink" title="360"></a><span id="360">360</span></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Chapter 1&lt;/th&gt;
&lt;th align=&quot;center&quot;
      
    
    </summary>
    
      <category term="Interview" scheme="https://kaaier.github.io/categories/Interview/"/>
    
    
      <category term="Data Structures and Algorithms" scheme="https://kaaier.github.io/tags/Data-Structures-and-Algorithms/"/>
    
      <category term="Interview" scheme="https://kaaier.github.io/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>网络编程基础</title>
    <link href="https://kaaier.github.io/2019/02/16/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://kaaier.github.io/2019/02/16/网络编程/</id>
    <published>2019-02-16T13:21:10.000Z</published>
    <updated>2019-08-07T01:34:18.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络编程基础"><a href="#网络编程基础" class="headerlink" title="网络编程基础"></a>网络编程基础</h1><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Socket-API"><a href="#Socket-API" class="headerlink" title="Socket API"></a>Socket API</h3><ol><li><p>网络编程一般步骤？</p><ul><li><p>TCP：</p><ul><li><p>服务端：socket -&gt; bind -&gt; listen -&gt; accept -&gt; recv/send -&gt; close。</p></li><li><p>客户端：socket -&gt; connect -&gt; send/recv -&gt; close。</p></li></ul></li><li><p>UDP：</p><ul><li><p>服务端：socket -&gt; bind -&gt; recvfrom/sendto -&gt; close。</p></li><li><p>客户端：socket -&gt; sendto/recvfrom -&gt; close。</p></li></ul></li></ul></li><li><p>send、sendto区别，recv、recvfrom区别？</p></li></ol><h3 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP/UDP"></a>TCP/UDP</h3><ol><li><p>TCP和UDP区别？</p><ul><li><p>TCP面向连接（三次握手），通信前需要先建立连接；UDP面向无连接，通信前不需要连接。</p></li><li><p>TCP通过序号、重传、流量控制、拥塞控制实现可靠传输；UDP不保障可靠传输，尽最大努力交付。</p></li><li><p>TCP面向字节流传输，因此可以被分割并在接收端重组；UDP面向数据报传输。</p></li></ul></li><li><p>TCP为什么不是两次握手而是三次？</p><ul><li>如果仅两次连接可能出现一种情况：客户端发送完连接报文（第一次握手）后由于网络不好，延时很久后报文到达服务端，服务端接收到报文后向客户端发起连接（第二次握手）。此时客户端会认定此报文为失效报文，但在两次握手情况下服务端会认为已经建立起了连接，服务端会一直等待客户端发送数据，但因为客户端会认为服务端第二次握手的回复是对失效请求的回复，不会去处理。这就造成了服务端一直等待客户端数据的情况，浪费资源。</li></ul></li><li><p>TCP为什么挥手是四次而不是三次？</p><ul><li><p>TCP是全双工的，它允许两个方向的数据传输被独立关闭。当主动发起关闭的一方关闭连接之后，TCP进入半关闭状态，此时主动方可以只关闭输出流。</p></li><li><p>之所以不是三次而是四次主要是因为被动关闭方将”对主动关闭报文的确认”和”关闭连接”两个操作分两次进行。</p></li><li><p>“对主动关闭报文的确认”是为了快速告知主动关闭方，此关闭连接报文已经收到。此时被动方不立即关闭连接是为了将缓冲中剩下的数据从输出流发回主动关闭方（主动方接收到数据后同样要进行确认），因此要把”确认关闭”和”关闭连接”分两次进行。</p></li><li><p><strong>Linux的close实际上是同时关闭输入流和输出流，并不是我们常说的四次握手。半关闭函数为shutdown，它可以用来断开某个具体描述符的TCP输入流或输出流。</strong></p></li></ul></li><li><p>为什么要有TIME_WAIT状态，TIME_WAIT状态过多怎么解决？</p><ul><li><p>主动关闭连接一方在发送对被动关闭方关闭连接的确认报文时，有可能因为网络状况不佳，被动关闭方超时未能收到此报文而重发断开连接（FIN）报文，此时如果主动方不等待而是直接进入CLOSED状态，则接收到被动关闭方重发的断开连接的报文会触发RST分组而非ACK分组，当被动关闭一方接收到RST后会认为出错了。所以说处于TIME_WAIT状态就是为了在重新收到断开连接分组情况下进行确认。</p></li><li><p>解决方法：</p><ul><li><p>可以通过修改sysctl中TIME_WAIT时间来减少此情况（HTTP 1.1也可以减少此状态）。</p></li><li><p>利用SO_LINGER选项的强制关闭方式，发RST而不是FIN，来越过TIMEWAIT状态，直接进入CLOSED状态。</p></li></ul></li></ul></li><li><p>TCP建立连接及断开连接是状态转换？</p><ul><li><p>客户端：SYN_SENT -&gt; ESTABLISHED -&gt; FIN_WAIT_1 -&gt; FIN_WAIT_2 -&gt; TIME_WAIT。</p></li><li><p>服务端：LISTEN -&gt; SYN_RCVD -&gt; ESTABLISHED -&gt; CLOSE_WAIT -&gt; LAST_ACK -&gt; CLOSED。</p></li></ul></li><li><p>TCP流量控制和拥塞控制的实现？</p><ul><li><p>流量控制：TCP采用大小可变的滑动窗口进行流量控制。窗口大小的单位是字节，在TCP报文段首部的窗口字段写入的数值就是当前给对方设置的发送窗口数值的上限，发送窗口在连接建立时由双方商定。但在通信的过程中，接收端可根据自己的资源情况，随时动态地调整对方的发送窗口上限值。</p></li><li><p>拥塞控制：网络拥塞现象是指到达通信子网中某一部分的分组数量过多，使得该部分网络来不及处理，以致引起这部分乃至整个网络性能下降的现象。严重时甚至会导致网络通信业务陷入停顿，即出现死锁现象。拥塞控制是处理网络拥塞现象的一种机制。</p></li></ul></li><li><p>TCP重传机制？</p><ul><li><p>滑动窗口机制，确立收发的边界，能让发送方知道已经发送了多少、尚未确认的字节数、尚待发送的字节数；让接收方知道已经确认收到的字节数。</p></li><li><p>选择重传，用于对传输出错的序列进行重传。</p></li></ul></li><li><p>三次握手过程？</p><ul><li><p>主动建立连接方A的TCP向主机B发出连接请求报文段，其首部中的SYN(同步)标志位应置为1，表示想与目标主机B进行通信，并发送一个同步序列号x进行同步，表明在后面传送数据时的第一个数据字节的序号是x + 1。SYN同步报文会指明客户端使用的端口以及TCP连接的初始序号。</p></li><li><p>接收连接方B的TCP收到连接请求报文段后，如同意则发回确认。在确认报中应将ACK位和SYN位置1，表示客户端的请求被接受。确认号应为x + 1，同时也为自己选择一个序号y。</p></li><li><p>主动方A的TCP收到目标主机B的确认后要向目标主机B给出确认，其ACK置1，确认号为y + 1，而自己的序号为x + 1。</p></li></ul></li><li><p>四次挥手过程？</p><ul><li><p>主动关闭主机A的应用进程先向其TCP发出连接释放请求，并且不再发送数据。TCP通知对方要释放从A到B这个方向的连接，将发往主机B的TCP报文段首部的终止比特FIN置1，其序号x等于前面已传送过的数据的最后一个字节的序号加1。</p></li><li><p>被动关闭主机B的TCP收到释放连接通知后即发出确认，其序号为y，确认号为x + 1，同时通知高层应用进程，这样，从A到B的连接就释放了，连接处于半关闭状态。但若主机B还有一些数据要发送主机A，则可以继续发送。主机A只要正确收到数据，仍应向主机B发送确认。</p></li><li><p>若主机B不再向主机A发送数据，其应用进程就通知TCP释放连接。主机B发出的连接释放报文段必须将终止比特FIN和确认比特ACK置1，并使其序号仍为y，但还必须重复上次已发送过的ACK = x + 1。</p></li><li><p>主机A必须对此发出确认，将ACK置1，ACK = y + 1，而自己的序号是x + 1。这样才把从B到A的反方向的连接释放掉。主机A的TCP再向其应用进程报告，整个连接已经全部释放。</p></li></ul></li></ol><h3 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I/O模型"></a>I/O模型</h3><ol><li><p>阻塞和非阻塞I/O区别？</p><ul><li><p>如果内核缓冲没有数据可读时，read()系统调用会一直等待有数据到来后才从阻塞态中返回，这就是阻塞I/O。</p></li><li><p>非阻塞I/O在遇到上述情况时会立即返回给用户态进程一个返回值，并设置errno为EAGAIN。</p></li><li><p>对于往缓冲区写的操作同理。</p></li></ul></li><li><p>同步和异步区别？</p><ul><li><p>同步I/O指处理I/O操作的进程和处理I/O操作的进程是同一个。</p></li><li><p>异步I/O中I/O操作由操作系统完成，并不由产生I/O的用户进程执行。</p></li></ul></li><li><p>Reactor和Proactor区别？</p><ul><li><p>Reactor模式已经是同步I/O，处理I/O操作的依旧是产生I/O的程序；Proactor是异步I/O，产生I/O调用的用户进程不会等待I/O发生，具体I/O操作由操作系统完成。</p></li><li><p>异步I/O需要操作系统支持，Linux异步I/O为AIO，Windows为IOCP。</p></li></ul></li><li><p>epoll和select及poll区别？</p><ul><li><p>文件描述符数量限制：select文件描述符数量受到限制，最大为2048（FD_SETSIZE），可重编内核修改但治标不治本；poll没有最大文件描述符数量限制；epoll没有最大文件描述符数量限制。</p></li><li><p>检查机制：select和poll会以遍历方式（轮询机制）检查每一个文件描述符以确定是否有I/O就绪，每次执行时间会随着连接数量的增加而线性增长；epoll则每次返回后只对活跃的文件描述符队列进行操作（每个描述符都通过回调函数实现，只有活跃的描述符会调用回调函数并添加至队列中）。<strong>当大量连接是非活跃连接时epoll相对于select和poll优势比较大，若大多为活跃连接则效率未必高（设计队列维护及红黑树创建）</strong></p></li><li><p>数据传递方式：select和poll需要将FD_SET在内核空间和用户空间来回拷贝；epoll则避免了不必要的数据拷贝。</p></li></ul></li><li><p>epoll中ET和LT模式的区别与实现原理？</p><ul><li><p>LT：默认工作方式，同时支持阻塞I/O和非阻塞I/O，LT模式下，内核告知某一文件描述符读、写是否就绪了，然后你可以对这个就绪的文件描述符进行I/O操作。如果不作任何操作，内核还是会继续通知。这种模式编程出错误可能性较小但由于重复提醒，效率相对较低。传统的select、poll都是这种模型的代表。</p></li><li><p>ET：高速工作方式（因为减少了epoll_wait触发次数），适合高并发，只支持非阻塞I/O，ET模式下，内核告知某一文件描述符读、写是否就绪了，然后他假设已经知道该文件描述符是否已经就绪，内核不会再为这个文件描述符发更多的就绪通知（epoll_wait不会返回），直到某些操作导致文件描述符状态不再就绪。</p></li></ul></li><li><p>ET模式下要注意什么（如何使用ET模式）？</p><ul><li><p>对于读操作，如果read没有一次读完buff数据，下一次将得不到就绪通知（ET特性），造成buff中数据无法读出，除非有新数据到达。</p><ul><li>解决方法：将套接字设置为非阻塞，用while循环包住read，只要buff中有数据，就一直读。一直读到产生EAGIN错误。</li></ul></li><li><p>对于写操作主要因为ET模式下非阻塞需要我们考虑如何将用户要求写的数据写完。</p><ul><li>解决方法：只要buff还有空间且用户请求写的数据还未写完，就一直写。</li></ul></li></ul></li></ol><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ol><li><p>Linux下进程间通信方式？</p><ul><li><p>管道：</p><ul><li><p>无名管道（内存文件）：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程之间使用。进程的亲缘关系通常是指父子进程关系。</p></li><li><p>有名管道（FIFO文件，借助文件系统）：有名管道也是半双工的通信方式，但是允许在没有亲缘关系的进程之间使用，管道是先进先出的通信方式。</p></li></ul></li><li><p>共享内存：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的IPC方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与信号量，配合使用来实现进程间的同步和通信。</p></li><li><p>消息队列：消息队列是有消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p></li><li><p>套接字：适用于不同机器间进程通信，在本地也可作为两个进程通信的方式。</p></li><li><p>信号：用于通知接收进程某个事件已经发生，比如按下ctrl + C就是信号。</p></li><li><p>信号量：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，实现进程、线程的对临界区的同步及互斥访问。</p></li></ul></li><li><p>Linux下同步机制？</p><ul><li><p>POSIX信号量：可用于进程同步，也可用于线程同步。</p></li><li><p>POSIX互斥锁 + 条件变量：只能用于线程同步。</p></li></ul></li><li><p>线程和进程的区别？</p><ul><li><p>调度：线程是调度的基本单位（PC，状态码，通用寄存器，线程栈及栈指针）；进程是拥有资源的基本单位（打开文件，堆，静态区，代码段等）。</p></li><li><p>并发性：一个进程内多个线程可以并发（最好和CPU核数相等）；多个进程可以并发。</p></li><li><p>拥有资源：线程不拥有系统资源，但一个进程的多个线程可以共享隶属进程的资源；进程是拥有资源的独立单位。</p></li><li><p>系统开销：线程创建销毁只需要处理PC值，状态码，通用寄存器值，线程栈及栈指针即可；进程创建和销毁需要重新分配及销毁task_struct结构。</p></li></ul></li><li><p>介绍虚拟内存？</p></li><li><p>内存分配及碎片管理？</p></li><li><p>有很多小的碎片文件怎么处理？</p></li></ol><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ol><li><p>fork系统调用？</p></li><li><p>什么场景用共享内存，什么场景用匿名管道？</p></li><li><p>有没有用过开源的cgi框架？</p></li><li><p>epoll和select比有什么优势有什么劣势，epoll有什么局限性？</p><ul><li><p>epoll优势：1. 没有描述符数量限制；2. 通过回调代替轮询；3. 内存映射代替数据在用户和内核空间来回拷贝。</p></li><li><p>epoll劣势（局限性）：select可以跨平台，epoll只能在Linux上使用。</p></li></ul></li><li><p>线程（POSIX）锁有哪些？</p><ul><li><p>互斥锁（mutex）</p><ul><li>互斥锁属于sleep-waiting类型的锁。例如在一个双核的机器上有两个线程A和B，它们分别运行在core 0和core 1上。假设线程A想要通过pthread_mutex_lock操作去得到一个临界区的锁，而此时这个锁正被线程B所持有，那么线程A就会被阻塞，此时会通过上下文切换将线程A置于等待队列中，此时core 0就可以运行其他的任务（如线程C）。</li></ul></li><li><p>条件变量(cond)</p></li><li><p>自旋锁(spin)</p><ul><li><p>自旋锁属于busy-waiting类型的锁，如果线程A是使用pthread_spin_lock操作去请求锁，如果自旋锁已经被线程B所持有，那么线程A就会一直在core 0上进行忙等待并不停的进行锁请求，检查该自旋锁是否已经被线程B释放，直到得到这个锁为止。因为自旋锁不会引起调用者睡眠，所以自旋锁的效率远高于互斥锁。</p></li><li><p>虽然它的效率比互斥锁高，但是它也有些不足之处：</p><ul><li><p>自旋锁一直占用CPU，在未获得锁的情况下，一直进行自旋，所以占用着CPU，如果不能在很短的时间内获得锁，无疑会使CPU效率降低。</p></li><li><p>在用自旋锁时有可能造成死锁，当递归调用时有可能造成死锁。</p></li></ul></li><li><p>自旋锁只有在内核可抢占式或SMP的情况下才真正需要，在单CPU且不可抢占式的内核下，自旋锁的操作为空操作。自旋锁适用于锁使用者保持锁时间比较短的情况下。</p></li></ul></li><li><p>读写锁（rwlock）</p></li></ul></li></ol><h2 id="TKeed"><a href="#TKeed" class="headerlink" title="TKeed"></a>TKeed</h2><ol><li><p>项目整体架构是什么？请求怎么进来？处理完怎么出去？</p><ul><li><p>整体架构为：I/O多路复用 + 非阻塞I/O + 线程池，即Reactor反应堆模型。</p></li><li><p>处理流程：</p><ul><li><p>创建监听描述符并在epoll中注册。</p></li><li><p>监听到新请求，epoll从阻塞中返回并建立新连接。</p></li><li><p>将新建的连接描述符在epoll中注册。</p></li><li><p>当某个连接接收到用户请求数据时，将任务投放到线程池任务队列中。</p></li><li><p>工作线程被条件变量（任务队列不为空）唤醒，并互斥访问线程池。</p></li><li><p>得到任务的线程完成解析及响应。</p><ul><li><p>工作线程执行函数为do_request，参数即为task结构。</p><ul><li>每个task结构在建立连接是被初始化，包含描述符、缓冲区等信息是，并在do_request执行时记录解析结果及状态。</li></ul></li></ul></li></ul></li></ul></li><li><p>在做压测时，机器配置是什么样的？数据如何？</p><ul><li><p>本地测试。</p><ul><li>四核i5处理器 + 128G固态硬盘。</li></ul></li></ul></li><li><p>为了QPS（Query per second, 1秒内完成的请求数量）更高可以做哪些改进？</p><ul><li><p>对请求结果做缓存。</p></li><li><p>多次搜索请求采用异步I/O，改串行为并行。</p></li><li><p>调整并发线程数量（通常和CPU核心数相同）。</p></li></ul></li><li><p>有没有注意到压测时内存，CPU，I/O指标？</p><ul><li>压测同时打开top -H -p pid查看CPU，I/O，内存信息。</li></ul></li><li><p>压测时有没有见过TIME_WAIT？怎么样会见到？怎么解决？</p><ul><li><p>当服务端关闭连接时会产生TIME_WAIT。</p></li><li><p>解决方案：</p><ul><li><p>HTTP 1.1在同一个TCP连接上尽量传输更多数据。</p></li><li><p>通过修改sysctl配置减小TIME_WAIT时间。</p></li></ul></li></ul></li><li><p>是会主动关闭还是会等待客户端关闭连接?</p><ul><li>服务端会在完成请求之后关闭连接。</li></ul></li><li><p>写一个Server需要注意哪些问题？</p><ul><li><p>只支持request/response，除此之外是否需要支持cgi。</p></li><li><p>并发量，QPS，资源占用（内存，CPU，I/O，网络流量等）。</p><ul><li><p>CPU占用是否过高。</p></li><li><p>内存是否泄露。</p></li></ul></li></ul></li><li><p>项目中遇到什么困难，你是如何解决的？</p><ul><li><p>CPU占用过高。</p></li><li><p>压测时，每次最后会挂掉。</p></li></ul></li><li><p>做这个项目的目的是什么？</p></li><li><p>定时器是如何实现的？里面放了有多少个连接（怎么确定大小）？谁去取超时的连接？检查超时之后还会继续检查吗，还是检查完之后就断了？</p></li><li><p>如果发生超时，在关闭连接时同时又收到了新的数据怎么办？</p></li><li><p>用什么数据结构存放url，怎么解析的？</p><ul><li><p>使用tk_request_t结构中buff读取用户请求，buff为循环缓冲（8192 Bytes）。</p></li><li><p>每次进入while循环时读取用户请求到buff中循环队列尾位置（plast），之后解析用户请求并响应。</p></li><li><p>支持HTTP 1.1，只要有数据就读取 -&gt; 解析 -&gt; 响应。</p></li></ul></li></ol><h2 id="实习经历"><a href="#实习经历" class="headerlink" title="实习经历"></a>实习经历</h2><ol><li><p>介绍一下上网行为管理这个系统？</p></li><li><p>介绍一下格林威治云平台做哪些任务？</p></li><li><p>改变数据获取方式及校验数据一致性？</p></li><li><p>WTGGroup模块做什么用的？</p></li></ol><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ol><li><p>层序遍历二叉树？</p></li><li><p>map和hashmap的区别是什么？</p></li><li><p>Hash发生冲突时怎么处理？</p></li><li><p>hashmap的时间复杂度是多少？map的时间复杂度？</p></li><li><p>优先队列时间复杂度？</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络编程基础&quot;&gt;&lt;a href=&quot;#网络编程基础&quot; class=&quot;headerlink&quot; title=&quot;网络编程基础&quot;&gt;&lt;/a&gt;网络编程基础&lt;/h1&gt;&lt;h2 id=&quot;常见问题&quot;&gt;&lt;a href=&quot;#常见问题&quot; class=&quot;headerlink&quot; title=&quot;常
      
    
    </summary>
    
      <category term="Summary" scheme="https://kaaier.github.io/categories/Summary/"/>
    
    
      <category term="Summary" scheme="https://kaaier.github.io/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>图像处理知识点——(1)</title>
    <link href="https://kaaier.github.io/2018/07/30/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E2%80%94%E2%80%94-1/"/>
    <id>https://kaaier.github.io/2018/07/30/图像处理知识点——-1/</id>
    <published>2018-07-30T03:21:20.000Z</published>
    <updated>2019-08-05T05:14:13.829Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/image.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/image.jpg&quot;&gt;


      
    
    </summary>
    
      <category term="Computer-Vision" scheme="https://kaaier.github.io/categories/Computer-Vision/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux相关总结</title>
    <link href="https://kaaier.github.io/2018/05/13/Linux%E5%B7%A5%E5%85%B7/"/>
    <id>https://kaaier.github.io/2018/05/13/Linux工具/</id>
    <published>2018-05-13T04:11:21.000Z</published>
    <updated>2019-08-06T16:16:21.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux工具"><a href="#Linux工具" class="headerlink" title="Linux工具"></a><a href="http://man.linuxde.net/par/2" target="_blank" rel="noopener">Linux工具</a></h1><blockquote><p>Linux下还是有很多超棒的开发工具的。</p></blockquote><p>在Linux日常使用中，最常用的命令自然是sudo, ls, cp, mv, cat等，但作为后台开发者，上述命令远远不够。从我的理解来看，合格的C/C++开发者至少需要从开发及调试工具、文件处理、性能分析、网络工具四个方面针对性使用一些开发工具。这里我罗列了一些，大部分都是开发中经常需要使用的命令，有些功能比较简单的命令我会给出一些基本用法，有些本身自带体系（比如vim, gdb等）的命令只能附上链接了。</p><p>开发及调试工具介绍了从“编辑 -&gt; 编译 -&gt; 分析目标文件 -&gt; 追踪调用过程”的全套命令，文件处理部分介绍了查找、统计、替换等基本文本操作命令，性能分析介绍了查看进程信息、CPU负载、I/O负载、内存使用情况等基本命令，网络工具介绍了可以查看“链路层 -&gt; 网络层 -&gt; 传输层 -&gt; 应用层”信息的工具。除此以外，其他命令中也列出了开发者经常会用到的一些命令，基本可以满足日常开发需要。</p><hr>  <a id="more"></a><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><table><thead><tr><th align="center">Chapter 1</th><th align="center">Chapter 2</th><th align="center">Chapter 3</th><th align="center">Chapter 4</th><th align="center">Chapter 5</th></tr></thead><tbody><tr><td align="center"><a href="#pro">开发及调试</a></td><td align="center"><a href="#file">文件处理</a></td><td align="center"><a href="#sysinfo">性能分析</a></td><td align="center"><a href="#net">网络工具</a></td><td align="center"><a href="#other">其他</a></td></tr></tbody></table><ul><li><p>开发及调试</p><ul><li>编辑器：vim</li><li>编译器：gcc/g++</li><li>调试工具：gdb</li><li>查看依赖库：ldd</li><li>二进制文件分析：objdump</li><li>ELF文件格式分析：readelf</li><li>跟踪进程中系统调用：strace</li><li>跟踪进程栈：pstack</li><li>进程内存映射：pmap</li></ul></li><li><p>文件处理</p><ul><li>文件查找：find</li><li>文本搜索：grep</li><li>排序：sort</li><li>转换：tr</li><li>按列切分文本：cut</li><li>按列拼接文本：paste</li><li>统计行和字符：wc</li><li>文本替换：sed</li><li>数据流处理：awk</li></ul></li><li><p>性能分析</p><ul><li>进程查询：ps</li><li>进程监控：top</li><li>打开文件查询：lsof</li><li>内存使用量：free</li><li>监控性能指标：sar</li></ul></li><li><p>网络工具</p><ul><li>网卡配置：ifconfig </li><li>查看当前网络连接：netstat</li><li>查看路由表：route</li><li>检查网络连通性：ping</li><li>转发路径：traceroute</li><li>网络Debug分析：nc</li><li>命令行抓包：tcpdump</li><li>域名解析工具：dig</li><li>网络请求：curl</li></ul></li><li><p>其他</p><ul><li>终止进程：kill</li><li>修改文件权限：chmod</li><li>创建链接：ln</li><li>显示文件尾：tail</li><li>版本控制：git</li><li>设置别名：alias</li></ul></li></ul><hr><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h3 id="开发及调试"><a href="#开发及调试" class="headerlink" title="开发及调试"></a><span id="pro">开发及调试</span></h3><blockquote><p>开发工具大部分都提供了完善的功能，所以这里不一一列举用法。从技术层面来说，调试工具比开发工具更考验一个人的工程能力。</p></blockquote><ol><li><p>编辑器：vim</p><ul><li>服务器端开发必知必会，功能强大，这里不一一列举，但基本的打开文件、保存退出要会。</li><li><a href="http://coolshell.cn/articles/5426.html" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>编译器：gcc/g++</p><ul><li>C/C++编译器，必知必会，除此以外需要了解预处理-&gt; 编译 -&gt; 汇编 -&gt; 链接等一系列流程。</li><li><a href="http://www.cnblogs.com/lidan/archive/2011/05/25/2239517.html" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>调试工具：gdb</p><ul><li>服务器端调试必备。</li><li><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>查看依赖库：ldd</p><ul><li>程序依赖库查询<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ldd后接可执行文件</span><br><span class="line"><span class="meta">#</span> 第一列为程序依赖什么库，第二列为系统提供的与程序需要的库所对应的库，第三列为库加载的开始地址</span><br><span class="line"><span class="meta">#</span> 前两列可以判断系统提供的库和需要的库是否匹配，第三列可以知道当前库在进程地址空间中对应的开始位置</span><br><span class="line"></span><br><span class="line">ldd a.out</span><br></pre></td></tr></table></figure></li></ul></li><li><p>二进制文件分析：objdump</p><ul><li>反汇编，需要理解汇编语言</li><li><a href="http://man.linuxde.net/objdump" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>ELF文件格式分析：readelf</p><ul><li>可以得到ELF文件各段内容，分析链接、符号表等需要用到</li><li><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/readelf.html" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>跟踪进程中系统调用：strace</p><ul><li><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/strace.html" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>跟踪进程栈：pstack</p><ul><li><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/pstack.html#" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>进程内存映射：pmap</p><ul><li>显示进程内存映射<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -x显示扩展信息，后接进程pid</span><br><span class="line"><span class="meta">#</span> Address: 内存开始地址</span><br><span class="line"><span class="meta">#</span> 显示信息：</span><br><span class="line">    Kbytes: 占用内存的字节数</span><br><span class="line">    RSS: 保留内存的字节数</span><br><span class="line">    Dirty: 脏页的字节数（包括共享和私有的）</span><br><span class="line">    Mode: 内存的权限：read、write、execute、shared、private</span><br><span class="line">    Mapping: 占用内存的文件、或[anon]（分配的内存）、或[stack]（堆栈）</span><br><span class="line">    Device: 设备名 (major:minor)</span><br><span class="line"></span><br><span class="line">pmap -x 12345</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a><span id="file">文件处理</span></h3><blockquote><p>Everything is file. 在Linux环境下，对文本处理相当频繁，所以有些命令的参数还是需要记忆的。另外其他很多命令的输出信息都需要通过文件处理命令来筛选有用信息。</p></blockquote><ol><li><p>文件查找：find</p><p> 按名查找：</p><ul><li><p>查找具体文件（一般方式）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name *.cpp</span><br></pre></td></tr></table></figure></li><li><p>查找具体文件（正则方式）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -regex为正则查找，-iregex为忽略大小写的正则查找 </span><br><span class="line"></span><br><span class="line">find -regex ".*.cpp$"</span><br></pre></td></tr></table></figure><p>定制查找：</p></li><li><p>按类型查找</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> f(file)为文件，d(dictionary)为目录，l(link)为链接</span><br><span class="line"></span><br><span class="line">find . -type f</span><br></pre></td></tr></table></figure></li><li><p>按时间查找</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> atime为访问时间，x天内加参数"-atime -x"，超过x天加"-atime -x"</span><br><span class="line"><span class="meta">#</span> mtime为修改时间</span><br><span class="line"></span><br><span class="line">find . -type f -atime -7</span><br></pre></td></tr></table></figure></li><li><p>按大小查找</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -size后接文件大小，单位可以为k(kb)，m(MB)，g(GB)</span><br><span class="line"></span><br><span class="line">find . -type f -size -1k</span><br></pre></td></tr></table></figure></li><li><p>按权限查询</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -perm后接权限</span><br><span class="line"></span><br><span class="line">find . -type -perm 644</span><br></pre></td></tr></table></figure></li></ul></li><li><p>文本搜索：grep</p><ul><li><p>模式匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 匹配test.cpp文件中含有"iostream"串的内容</span><br><span class="line"></span><br><span class="line">grep "iostream" test.cpp</span><br></pre></td></tr></table></figure></li><li><p>多个模式匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 匹配test.cpp文件中含有"iostream"和"using"串的内容</span><br><span class="line"></span><br><span class="line">grep -e "using" -e "iostream" test.cpp</span><br></pre></td></tr></table></figure></li><li><p>输出信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -n为打印匹配的行号；-i搜索时忽略大小写；-c统计包含文本次数</span><br><span class="line"></span><br><span class="line">grep -n "iostream" test.cpp</span><br></pre></td></tr></table></figure></li></ul></li><li><p>排序：sort</p><ul><li>文件内容行排序<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 排序在内存进行，不改变文件</span><br><span class="line"><span class="meta">#</span> -n(number)表示按数字排序，-d(dictionary)表示按字典序</span><br><span class="line"><span class="meta">#</span> -k N表示按各行第N列进行排序</span><br><span class="line"><span class="meta">#</span> -r(reverse)为逆序排序</span><br><span class="line"></span><br><span class="line">sort -n -k 1 test</span><br></pre></td></tr></table></figure></li></ul></li><li><p>转换：tr</p><ul><li><p>字符替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 转换在内存进行，不改变文件</span><br><span class="line"><span class="meta">#</span> 将打开文件中所有目标字符替换</span><br><span class="line"></span><br><span class="line">cat test | tr '1' '2'</span><br></pre></td></tr></table></figure></li><li><p>字符删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 转换在内存进行，不改变文件</span><br><span class="line"><span class="meta">#</span> -d删除(delete)</span><br><span class="line"></span><br><span class="line">cat test | tr -d '1'</span><br></pre></td></tr></table></figure></li><li><p>字符压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 转换在内存进行，不改变文件</span><br><span class="line"><span class="meta">#</span> -s位于后部</span><br><span class="line"></span><br><span class="line">cat test | tr ' ' -s</span><br></pre></td></tr></table></figure></li></ul></li><li><p>按列切分文本：cut</p><ul><li><p>截取特定列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 截取的内存进行，不改变文件</span><br><span class="line"><span class="meta">#</span> -b(byte)以字节为单位，-c(character)以字符为单位，-f以字段为单位</span><br><span class="line"><span class="meta">#</span> 数字为具体列范围</span><br><span class="line"></span><br><span class="line">cut -f 1,2 test</span><br></pre></td></tr></table></figure></li><li><p>指定界定符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 截取的内存进行，不改变文件</span><br><span class="line"><span class="meta">#</span> -d后接界定符</span><br><span class="line"></span><br><span class="line">cut -f 2 -d ',' new</span><br></pre></td></tr></table></figure></li></ul></li><li><p>按列拼接文本：paste</p><ul><li><p>按列拼接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在内存中拼接，不改变文件</span><br><span class="line"><span class="meta">#</span> 将两个文件按对应列拼接</span><br><span class="line"><span class="meta">#</span> 最后加上-d "x"会将x作为指定分隔符（paste test1 test2 -d ","）</span><br><span class="line"><span class="meta">#</span> 两文件列数可以不同 </span><br><span class="line"></span><br><span class="line">paste test1 test2</span><br></pre></td></tr></table></figure></li><li><p>指定界定符拼接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在内存中拼接，不改变文件</span><br><span class="line"><span class="meta">#</span> 按照-d之后给出的界定符拼接</span><br><span class="line"></span><br><span class="line">paste test1 test2 -d ","</span><br></pre></td></tr></table></figure></li></ul></li><li><p>统计行和字符：wc</p><ul><li>基本统计<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -l统计行数(line)，-w统计单词数(word)，-c统计字符数(character)</span><br><span class="line"></span><br><span class="line">wc -l test</span><br></pre></td></tr></table></figure></li></ul></li><li><p>文本替换：sed</p><ul><li>区别于上面的命令，sed是可以直接改变被编辑文件内容的。</li><li><a href="http://coolshell.cn/articles/9104.html" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>数据流处理：awk</p><ul><li>区别于上面的命令，awk是可以直接改变被编辑文件内容的。</li><li><a href="http://coolshell.cn/articles/9070.html" target="_blank" rel="noopener">详见</a></li></ul></li></ol><hr><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a><span id="sysinfo">系统信息</span></h3><blockquote><p>性能监视工具对于程序员的作用就像是听诊器对于医生的作用一样。系统信息主要针对于服务器性能较低时的排查工作，主要包括CPU信息，文件I/O和内存使用情况，通过进程为纽带得到系统运行的瓶颈。</p></blockquote><ol><li><p>进程查询：ps</p><ul><li><p>查看正在运行进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 常结合grep筛选信息(e.g, ps -ef | grep xxx)</span><br><span class="line"></span><br><span class="line">ps -ef</span><br></pre></td></tr></table></figure></li><li><p>以完整格式显示所有进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 常结合grep筛选信息</span><br><span class="line"></span><br><span class="line">ps -ajx</span><br></pre></td></tr></table></figure></li></ul></li><li><p>进程监控：top</p><ul><li>显示实时进程信息<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 这是个大招，都不带参数的，具体信息通过grep筛选</span><br><span class="line"><span class="meta">#</span> 交互模式下键入M进程列表按内存使用大小降序排列，键入P进程列表按CPU使用大小降序排列</span><br><span class="line"><span class="meta">#</span> %id表示CPU空闲率，过低表示可能存在CPU存在瓶颈</span><br><span class="line"><span class="meta">#</span> %wa表示等待I/O的CPU时间百分比，过高则I/O存在瓶颈 &gt; 用iostat进一步分析</span><br><span class="line"></span><br><span class="line">top</span><br></pre></td></tr></table></figure></li></ul></li><li><p>打开文件查询：lsof</p><ul><li><p>查看占用某端口的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 最常见的就是mysql端口被占用使用(lsof i:3307)</span><br><span class="line"><span class="meta">#</span> 周知端口(ftp:20/21, ssh:22, telnet:23, smtp:25, dns:53, http:80, pop3:110, https:443)</span><br><span class="line"></span><br><span class="line">lsof -i:53</span><br></pre></td></tr></table></figure><ul><li><p>查看某用户打开的文件 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -u(user)为用户，后接用户名</span><br><span class="line"></span><br><span class="line">lsof -u inx</span><br></pre></td></tr></table></figure></li><li><p>查看指定进程打开的文件 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -p(process)为进程，后接进程PID</span><br><span class="line"></span><br><span class="line">lsof -p 12345</span><br></pre></td></tr></table></figure></li><li><p>查看指定目录下被进程打开的文件 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 这里是"+d"，需要注意，使用"+D"递归目录</span><br><span class="line"></span><br><span class="line">lsof +d /test</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>内存使用量：free</p><ul><li>内存使用量<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 可获得内存及交换区的总量，已使用量，空闲量等信息</span><br><span class="line"></span><br><span class="line">free</span><br></pre></td></tr></table></figure></li></ul></li><li><p>监控性能指标：sar</p><p> 监控CPU</p><ul><li><p>监控CPU负载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 加上-q可以查看运行队列中进程数，系统上进程大小，平均负载等</span><br><span class="line"><span class="meta">#</span> 这里"1"表示采样时间间隔是1秒，这里"2"表示采样次数为2</span><br><span class="line"></span><br><span class="line">sar -q 1 2</span><br></pre></td></tr></table></figure></li><li><p>监控CPU使用率</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 可以显示CPU使用情况</span><br><span class="line"><span class="meta">#</span> 参数意义同上</span><br><span class="line"></span><br><span class="line">sar -u 1 2</span><br></pre></td></tr></table></figure><p>监控内存</p></li><li><p>查询内存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 可以显示内存使用情况</span><br><span class="line"><span class="meta">#</span> 参数意义同上 </span><br><span class="line"></span><br><span class="line">sar -r 1 2</span><br></pre></td></tr></table></figure></li><li><p>页面交换查询</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> #</span> 可以查看是否发生大量页面交换，吞吐率大幅下降时可用</span><br><span class="line"><span class="meta"> #</span> 参数意义同上</span><br><span class="line"></span><br><span class="line">sar -W 1 2</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="网络工具"><a href="#网络工具" class="headerlink" title="网络工具"></a><span id="net">网络工具</span></h3><blockquote><p>网络工具部分只介绍基本功能，参数部分一笔带过。这部分重点不在于工具的使用而是对反馈的数据进行解读，并且这部分命令功能的重合度还是比较高的。</p></blockquote><ol><li><p>网卡配置（链路层）：ifconfig </p><ul><li><p>显示设备信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 可以显示已激活的网络设备信息</span><br><span class="line"></span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure></li><li><p>启动关闭指定网卡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 前一个参数为具体网卡，后一个为开关信息</span><br><span class="line"><span class="meta">#</span> up为打开，down为关闭</span><br><span class="line"></span><br><span class="line">ifconfig eth0 up</span><br></pre></td></tr></table></figure></li><li><p>配置IP地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 前一个参数为具体网卡，后一个为配置的IP地址</span><br><span class="line"></span><br><span class="line">ifconfig eth0 192.168.1.1</span><br></pre></td></tr></table></figure></li><li><p>设置最大传输单元</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前一个参数为具体网卡，后面为MTU的大小</span><br><span class="line"><span class="meta">#</span> 设置链路层MTU值，通常为1500</span><br><span class="line"></span><br><span class="line">ifconfig eth0 mtu 1500</span><br></pre></td></tr></table></figure></li><li><p>启用和关闭ARP协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 开启arp如下，若关闭则-arp</span><br><span class="line"></span><br><span class="line">ifconfig eth0 arp</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="2"><li><p>查看当前网络连接（链路层/网络层/传输层）：netstat</p><ul><li><p>网络接口信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 显示网卡信息，可结合ifconfig学习</span><br><span class="line"></span><br><span class="line">netstat -i</span><br></pre></td></tr></table></figure></li><li><p>列出端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -a(all)表示所有端口，-t(tcp)表示所有使用中的TCP端口</span><br><span class="line"><span class="meta">#</span> -l(listening)表示正在监听的端口</span><br><span class="line"></span><br><span class="line">netstat -at</span><br></pre></td></tr></table></figure></li><li><p>显示端口统计信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -s(status)显示各协议信息</span><br><span class="line"><span class="meta">#</span> -加上-t(tcp)显示tcp协议信息，加上-u(udp)显示udp协议信息</span><br><span class="line"></span><br><span class="line">netstat -s</span><br></pre></td></tr></table></figure></li><li><p>显示使用某协议的应用名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -p(progress)表示程序，可以显示使用tcp/udp协议的应用的名称</span><br><span class="line"></span><br><span class="line">netstat -pt</span><br></pre></td></tr></table></figure></li><li><p>查找指定进程、端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 互逆操作第一个显示某程序使用的端口号，第二个显示某端口号的使用进程</span><br><span class="line"><span class="meta">#</span> 第二个操作可以用lsof替代</span><br><span class="line"></span><br><span class="line">netstat -ap | grep ssh</span><br><span class="line">netstat -an | grep ':80'</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看路由表（网络层IP协议）：route</p><ul><li>查看路由信息<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 得到路由表信息，具体分析路由表工作需要网络知识</span><br><span class="line"><span class="meta">#</span> 可以通过netstat -r(route)得到同样的路由表</span><br><span class="line"></span><br><span class="line">route</span><br></pre></td></tr></table></figure></li></ul></li><li><p>检查网络连通性（网络层ICMP协议）：ping</p><ul><li>检查是否连通<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 主要功能是检测网络连通性</span><br><span class="line"><span class="meta">#</span> 可以额外得到网站的ip地址和连接最大/最小/平均耗时。</span><br><span class="line"></span><br><span class="line">ping baidu.com</span><br></pre></td></tr></table></figure></li></ul></li><li><p>转发路径（网络层ICMP协议）：traceroute</p><ul><li>文件包途径的IP<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> </span><br><span class="line"><span class="meta">#</span> 可以打印从沿途经过的路由器IP地址</span><br><span class="line"></span><br><span class="line">traceroute baidu.com</span><br></pre></td></tr></table></figure></li></ul></li><li><p>网络Debug分析（网络层/传输层）：nc</p><ul><li><p>端口扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 黑客很喜欢</span><br><span class="line"><span class="meta">#</span> 扫描某服务器端口使用情况</span><br><span class="line"><span class="meta">#</span> -v(view)显示指令执行过程，-w(wait)设置超时时长</span><br><span class="line"><span class="meta">#</span> -z使用输入输出模式（只在端口扫描时使用）</span><br><span class="line"><span class="meta">#</span> 数字为扫描的端口范围 </span><br><span class="line"></span><br><span class="line">nc -v -w 1 baidu.com  -z 75-1000</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.oschina.net/translate/linux-netcat-command" target="_blank" rel="noopener">其他详见</a></p></li></ul></li><li><p>命令行抓包（网络层/传输层）：tcpdump</p><ul><li>抓包利器，没有什么比数据更值得信赖。可以跟踪整个传输过程。</li><li><a href="http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>域名解析工具（应用层DNS协议）：dig</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 应用层，DNS</span><br><span class="line"><span class="meta">#</span> 打印域名解析结果</span><br><span class="line"><span class="meta">#</span> 打印域名解析过程中涉及的各级DNS服务器地址</span><br><span class="line"></span><br><span class="line">dig baidu.com</span><br></pre></td></tr></table></figure></li><li><p>网络请求（应用层）：curl</p><ul><li><a href="http://www.cnblogs.com/gbyukg/p/3326825.html" target="_blank" rel="noopener">详见</a></li></ul></li></ol><hr><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a><span id="other">其他</span></h3><blockquote><p>这里都是日常开发中高频命令。</p></blockquote><ol><li><p>终止进程：kill</p><ul><li><p>杀死具体进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 加具体进程PID</span><br><span class="line"></span><br><span class="line">kill 12345</span><br></pre></td></tr></table></figure></li><li><p>杀死某进程相关进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 加上"-9"杀死某进程相关进程</span><br><span class="line"></span><br><span class="line">kill -9 12345</span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改文件权限：chmod</p><ul><li>更改文件权限<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 可以对三种使用者设置权限，u(user, owner)，g(group)，o(other)</span><br><span class="line"><span class="meta">#</span> 文件可以有三种权限，r(read)，w(write)，x(execute)</span><br><span class="line"><span class="meta">#</span> 这里u+r表示文件所有者在原有基础上增加文件读取权限</span><br><span class="line"><span class="meta">#</span> 这里777分别对应，u=7，g=7，o=7，具体数字含义自行google</span><br><span class="line"></span><br><span class="line">chmod u+r file</span><br><span class="line">chmod 777 file</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建链接：ln</p><ul><li><p>创建硬链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 文件inode中链接数会增加，只有链接数减为0时文件才真正被删除</span><br><span class="line"></span><br><span class="line">ln file1 file2</span><br></pre></td></tr></table></figure></li><li><p>创建软（符号链接）链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -s(symbol)为符号链接，仅仅是引用路径</span><br><span class="line"><span class="meta">#</span> 相比于硬链接最大特点是可以跨文件系统</span><br><span class="line"><span class="meta">#</span> 类似于Windows创建快捷方式，实际文件删除则链接失效</span><br><span class="line"></span><br><span class="line">ln -s file1 file2</span><br></pre></td></tr></table></figure></li></ul></li><li><p>显示文件尾：tail</p><ul><li>查看文件尾部<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -f参数可以不立即回传结束信号，当文件有新写入数据时会及时更新</span><br><span class="line"><span class="meta">#</span> 查看日志时常用</span><br><span class="line"></span><br><span class="line">tail -f test</span><br></pre></td></tr></table></figure></li></ul></li><li><p>版本控制：git</p><ul><li>版本控制最好用的软件，没有之一。至少要知道”git init”，”git add”，”git commit”，”git pull”，”git push”几个命令。</li><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="noopener">详见</a></li></ul></li><li><p>设置别名：alias</p><ul><li>常用命令添加别名<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ".bashrc"文件中配置常用命令别名，生效后在命令行只需要使用别名即可代替原先很长的命令</span><br><span class="line"></span><br><span class="line">alias rm='rm -i'</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>假设已经通过vim编辑，gcc编译得到可执行文件server，这时就可以使用一些开发者常用的工具来进行后期调试。这里都是给出最简单的用法，意在快速掌握一些基本开发工具。</p><p>先clone这个项目，然后使用src_code下代码编译通过后通过下面命令调试。<a href="https://github.com/linw7/TKeed" target="_blank" rel="noopener">代码</a></p><ol><li>单步调试：gdb</li></ol><ul><li>运行得不到正确结果可以通过gdb设置断点来查看每个中间变量值，以此来确定哪里出了问题。因为gdb调试内容较多，这里不详细说明。另外，gdb出了可以单步查看变量值，还可以分析coredump文件来排查错误。</li></ul><ol start="2"><li>动态库依赖：ldd</li></ol><ul><li><p>命令：ldd ./server</p></li><li><p>可以查看可执行文件server所需的所有动态库，动态库所在目录及其被映射到的虚拟地址空间。</p></li></ul><ol start="3"><li>性能分析：top</li></ol><ul><li>top可以查看当前系统很多信息，比如1,5,15分钟内负载，运行、休眠、僵尸进程数，用户、内核程序占CPU百分比，存储信息等。top可以定位具体哪个进程CPU占用率高和内存使用率高。我们可以以此定位性能问题出在什么程序上（比如你后台执行TKeed server之后，可以看到CPU占用率为99%，这时候我们就需要从这个程序入手了）。</li></ul><ol start="4"><li>系统调用：strace</li></ol><ul><li><p>命令：strace ./server</p></li><li><p>上面已经提到TKeed server的CPU占用率为99%，那么问题通常一定是出在了死循环上。我们接下来在代码中找到死循环位置。因为程序中epoll_wait需要阻塞进程，我们怀疑是不是这里没有阻塞，这时就可以通过上面的方式运行server程序。此时可以打印出没次系统调用及其参数等，我们也可以加-o filename将系统调用信息保存下来。</p></li></ul><ol start="5"><li>打印进程：ps</li></ol><ul><li><p>命令：ps -ejH</p></li><li><p>我们在命令行下打开的程序的父进程是shell程序，之前用strace打开server程序，strace也是server的父进程。我们有时候需要知道进程间的层级关系就需要打印进程树，上面的ps命令可以做到。当出现僵尸进程时就可以通过进程树定位具体是哪个进程出了问题。另外当想要知道进程pid时，ps -el | grep XXX也是很常用的。</p></li></ul><ol start="6"><li>打开文件：lsof</li></ol><ul><li><p>lsof -i:3000</p></li><li><p>比如在运行server时发现端口被占用了，可以通过lsof -i:port来查看对应端口号正在被哪个进程所占用。端口占用是非常常见的问题，比如3306被占用我遇到过好几次，要么是某个程序正好占用了要么是之前没能结束进程，这些都可以借助lsof帮助查看端口。</p></li></ul><ol start="7"><li>修改权限：chmod</li></ol><ul><li><p>chmod 000 ./index.html</p></li><li><p>可以修改文件权限，这里设为000，这样任何人都无法访问，重新在浏览器请求127.0.0.1:3000/index.html就会因为文件权限不够而无法展示，服务器返回状态码为403，符合我们预期。修改权限后再请求一次可得到状态码200。</p></li></ul><ol start="8"><li>网卡信息：ifconfig</li></ol><ul><li><p>ifconfig</p></li><li><p>如果想看一下整个传输过程，可以使用tcpdump来抓包，但是抓包时参数需要加上网卡信息，这时候可以通过ifconfig来获得网卡信息。</p></li></ul><ol start="9"><li>抓包分析：tcpdump</li></ol><ul><li><p>tcpdump -i eth0 port 3000</p></li><li><p>可以用tcpdump来抓包分析三次握手及数据传输过程，-i之后加上上一步得到的网卡地址，port可以指定监听的端口号。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux工具&quot;&gt;&lt;a href=&quot;#Linux工具&quot; class=&quot;headerlink&quot; title=&quot;Linux工具&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://man.linuxde.net/par/2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linux工具&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Linux下还是有很多超棒的开发工具的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Linux日常使用中，最常用的命令自然是sudo, ls, cp, mv, cat等，但作为后台开发者，上述命令远远不够。从我的理解来看，合格的C/C++开发者至少需要从开发及调试工具、文件处理、性能分析、网络工具四个方面针对性使用一些开发工具。这里我罗列了一些，大部分都是开发中经常需要使用的命令，有些功能比较简单的命令我会给出一些基本用法，有些本身自带体系（比如vim, gdb等）的命令只能附上链接了。&lt;/p&gt;
&lt;p&gt;开发及调试工具介绍了从“编辑 -&amp;gt; 编译 -&amp;gt; 分析目标文件 -&amp;gt; 追踪调用过程”的全套命令，文件处理部分介绍了查找、统计、替换等基本文本操作命令，性能分析介绍了查看进程信息、CPU负载、I/O负载、内存使用情况等基本命令，网络工具介绍了可以查看“链路层 -&amp;gt; 网络层 -&amp;gt; 传输层 -&amp;gt; 应用层”信息的工具。除此以外，其他命令中也列出了开发者经常会用到的一些命令，基本可以满足日常开发需要。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://kaaier.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://kaaier.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>二叉树系列</title>
    <link href="https://kaaier.github.io/2017/01/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%B3%BB%E5%88%97/"/>
    <id>https://kaaier.github.io/2017/01/04/二叉树系列/</id>
    <published>2017-01-04T01:53:41.000Z</published>
    <updated>2019-08-12T01:23:43.277Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-最近公共祖先"><a href="#一-最近公共祖先" class="headerlink" title="一.最近公共祖先"></a>一.最近公共祖先</h5><p>思路：递归的求每个节点的最近公共祖先<br>            条件:3 到达点了需要返回出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lowestancestor</span><span class="params">(root,A,B)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root==A <span class="keyword">or</span> root==B <span class="keyword">or</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    right=lowestancestor(root.right,A,B)</span><br><span class="line">    left=lowestancestor(root.left,A,B)</span><br><span class="line">    <span class="keyword">if</span> left <span class="keyword">and</span> right:</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> left :</span><br><span class="line">        <span class="keyword">return</span> right</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> right:</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"><span class="comment">#满二叉树：root=child/2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LCS</span>:</span>(a,b):</span><br><span class="line">        <span class="keyword">while</span> (a!=b):</span><br><span class="line">            <span class="keyword">if</span> a&gt;b:</span><br><span class="line">                a=a/<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> a&lt;b:</span><br><span class="line">                b=b/<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><p>##### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;一-最近公共祖先&quot;&gt;&lt;a href=&quot;#一-最近公共祖先&quot; class=&quot;headerlink&quot; title=&quot;一.最近公共祖先&quot;&gt;&lt;/a&gt;一.最近公共祖先&lt;/h5&gt;&lt;p&gt;思路：递归的求每个节点的最近公共祖先&lt;br&gt;            条件:3 到达点了需要返
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://kaaier.github.io/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="https://kaaier.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>回溯递归系列</title>
    <link href="https://kaaier.github.io/2017/01/04/%E5%9B%9E%E6%BA%AF%E9%80%92%E5%BD%92/"/>
    <id>https://kaaier.github.io/2017/01/04/回溯递归/</id>
    <published>2017-01-04T01:53:41.000Z</published>
    <updated>2019-08-11T12:55:49.931Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Leetcode" scheme="https://kaaier.github.io/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="https://kaaier.github.io/tags/Leetcode/"/>
    
  </entry>
  
</feed>
